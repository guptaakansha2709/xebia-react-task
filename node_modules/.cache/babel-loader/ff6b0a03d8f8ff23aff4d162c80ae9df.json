{"ast":null,"code":"import _toConsumableArray from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ScenarioActionType } from \"../actiontype/scenario.actiontype\";\nimport ScenarioService from '../services/scenario.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { fetchDFFRequest, fetchClaimDFFRequest } from '../actions/dff.action';\nimport { fetchTaskFieldsRequest } from './task-update.action';\nimport { tagFTRRequest } from '../actions/ftr.action';\nimport { TabConstant } from '../constants/tabs.constant';\nimport { switchHomeTab, dispayScenarioTab } from './tabs.action';\nimport { createFTRRequest } from \"./app-dialog.action\";\nimport { leapInfoHandler, validateLeapCalendarDate } from \"./leap.action\";\nimport { disableBlankCallClick, enableSelfHelpClick } from './left-nav.action';\nimport SystemTypeService from \"../services/system-type.service\";\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { enableScenarioFTRTagging, enableScenarioSRTagging } from \"./disabled-tagging.action\";\nimport { openAlertMessageDialog } from \"./alert-message-dialog.action\";\nimport { openPovisioningConfirmDialog } from './app-dialog.action';\nimport { AlertMessageDialogConstant } from \"../constants/alert-message.constant\";\nexport var updateCurrentScenarioId = function updateCurrentScenarioId(scenarioId) {\n  return function (dispatch) {\n    dispatch({\n      type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n      payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId));\n  };\n};\nexport var updateCurrentScenarioIdAndStep = function updateCurrentScenarioIdAndStep(scenarioId, stepId) {\n  return function (dispatch) {\n    dispatch({\n      type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n      payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId, null, stepId));\n  };\n};\nexport var updateSearchScenarioText = function updateSearchScenarioText(text) {\n  return {\n    type: ScenarioActionType.UPDATE_SEARCH_SCENARIO_TEXT,\n    payload: text\n  };\n};\nexport var openBookmarkScenario = function openBookmarkScenario(bookmarkData) {\n  return function (dispatch) {\n    var scenarioId = bookmarkData[\"scenarioId\"];\n    var bookmarkName = bookmarkData[\"bookMarkName\"];\n    dispatch({\n      type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n      payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId, bookmarkName));\n  };\n};\nexport var fetchScenarioInfo = function fetchScenarioInfo(scenarioId, bookmarkName, stepId) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var lsiNumber = state.customerInfo.customerLSINumber;\n    var reqData = {\n      scenarioId: scenarioId,\n      lsiNumber: lsiNumber\n    };\n    dispatch(showLoader());\n    ScenarioService.fetchScenarioRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data) {\n        dispatch(onFetchScenarioSuccess(response.data)); // Display and move on scenario tab\n\n        dispatch(dispayScenarioTab());\n        dispatch(switchHomeTab(TabConstant.HOME_SCENARIO_TAB)); //disabling blank cal from sidebar on scenario tab active\n\n        dispatch(disableBlankCallClick());\n        dispatch(enableSelfHelpClick()); // Enable scenario FTR/SR tagging on scenario load\n\n        dispatch(enableScenarioFTRTagging());\n        dispatch(enableScenarioSRTagging());\n\n        if (response.data && response.data.result) {\n          var scenarioTree = response.data.result[\"decisionTree\"]; // Go to a particular scenario step.\n\n          if (stepId) {\n            dispatch(updateCurrentStepId(stepId));\n            dispatch(executeScenarioStep(stepId));\n          } // Go to bookmark step \n          else if (bookmarkName) {\n              var bookmarkStepId = ScenarioService.getScenarioBookmarkStepId(response.data.result, bookmarkName);\n              dispatch(updateCurrentStepId(bookmarkStepId));\n              dispatch(executeScenarioStep(bookmarkStepId));\n            } else {\n              // By default go to the starting step of scenario\n              var scenarioStartingStepId = ScenarioService.getScenarioStartingStepId(scenarioTree);\n\n              if (scenarioStartingStepId) {\n                dispatch(resetScenarioValues());\n                dispatch(updateCurrentStepId(scenarioStartingStepId));\n                dispatch(executeScenarioStep(scenarioStartingStepId));\n              } else {\n                dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_STEP_ID_NOT_FOUND));\n              }\n            }\n        } else {\n          dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_NOT_FOUND));\n        } // Update scenario name in auto-complete\n\n\n        var scenarioName = response.data.result[\"name\"];\n        dispatch(updateSearchScenarioText(scenarioName));\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_NOT_FOUND));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\n\nvar onFetchScenarioSuccess = function onFetchScenarioSuccess(payload) {\n  return {\n    type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_INFO,\n    payload: payload\n  };\n};\n\nvar saveBookmarkForCRMCodeClick = function saveBookmarkForCRMCodeClick(bookmark) {\n  return {\n    type: ScenarioActionType.SAVE_BOOKMARK_FOR_CRM_CODE_CLICK,\n    payload: bookmark\n  };\n};\n\nvar saveProvConfirmDialogInfo = function saveProvConfirmDialogInfo(choiceData, nextStepData) {\n  return {\n    type: ScenarioActionType.SAVE_PROV_CONFIRM_INFO,\n    payload: {\n      provConfirmDialogMessage: choiceData['promptText'],\n      provConfirmParamName: ScenarioService.getProvConfirmParamName(nextStepData),\n      nextStepData: nextStepData\n    }\n  };\n};\n\nexport var handleChoiceButtonClick = function handleChoiceButtonClick(choiceData) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var nextStepData = state.scenario.currentScenarioInfo.decisionTree[parseInt(choiceData.nextStep)];\n\n    switch (true) {\n      case ScenarioService.isProvisioningConfirmation(choiceData, nextStepData):\n        dispatch(saveProvConfirmDialogInfo(choiceData, nextStepData));\n        dispatch(openPovisioningConfirmDialog());\n        break;\n\n      case ScenarioService.isChoiceBookmarkWithCRMCode(choiceData):\n        dispatch(saveBookmarkForCRMCodeClick(choiceData[\"bookMark\"]));\n        dispatch(handleManualChoiceButtonClick(choiceData));\n        break;\n\n      case ScenarioService.isChoiceBookmark(choiceData):\n        var bookmarkData = choiceData[\"bookMark\"];\n        dispatch(openBookmarkScenario(bookmarkData));\n        break;\n\n      case state.scenario.stepLevelConfig.displayCalender:\n        dispatch(validateLeapCalendarDate(choiceData));\n        break;\n\n      default:\n        dispatch(handleManualChoiceButtonClick(choiceData));\n        break;\n    }\n  };\n};\nexport var handleManualChoiceButtonClick = function handleManualChoiceButtonClick(choiceData) {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch(updateScenarioLeapFlag(choiceData[\"isLeapEnable\"]));\n    dispatch(handleChoiceCrmCode(choiceData[\"crmCode\"]));\n    dispatch(handleChoiceUpdateTaskCase(choiceData[\"updateSrTaskCaseName\"]));\n    dispatch(updateStepChoiceSMSTemplate(choiceData[\"smsTemplate\"]));\n    dispatch(updateScenarioStepHistory(state.scenario.previousStepsList.concat(parseInt(state.scenario.currentStepId, 10))));\n    var breadcrumbChoices = state.scenario.breadcrumbChoices.concat(choiceData[\"choiceText\"]);\n    dispatch(updateScenarioBreadcrumb(breadcrumbChoices));\n    dispatch(manageScenarioDataUpdation(choiceData));\n    dispatch(executeScenarioStep(parseInt(choiceData[\"nextStep\"], 10)));\n  };\n};\nexport var manageScenarioDataUpdation = function manageScenarioDataUpdation(choiceData) {\n  return function (dispatch, getState) {\n    var stepData = null;\n    var isProspectNumber = false;\n    var stepId = parseInt(choiceData[\"nextStep\"], 10);\n\n    try {\n      stepData = getState().scenario.currentScenarioInfo[\"decisionTree\"][stepId];\n      isProspectNumber = getState().customerInfo && getState().customerInfo.isProspectNumber ? getState().customerInfo.isProspectNumber : false;\n    } catch (e) {//\n    }\n\n    if (!ScenarioService.isAutoScenarioStepFlow(stepData, isProspectNumber)) {\n      dispatch(handleScenarioNotes(choiceData[\"choiceText\"]));\n    } else {\n      dispatch(handleScenarioNotes(choiceData[\"choiceText\"], 'autoRequest'));\n    }\n  };\n};\nexport var executeScenarioStep = function executeScenarioStep(stepId) {\n  return function (dispatch, getState) {\n    var stepData = null;\n    var isProspectNumber = false;\n\n    try {\n      stepData = getState().scenario.currentScenarioInfo[\"decisionTree\"][stepId];\n      isProspectNumber = getState().customerInfo && getState().customerInfo.isProspectNumber ? getState().customerInfo.isProspectNumber : false;\n    } catch (e) {//\n    }\n\n    if (stepData) {\n      var stepType = \"\";\n\n      if (stepData && stepData.instruction) {\n        stepType = stepData.instruction.toLowerCase();\n      }\n\n      var tagRule = stepData && stepData.tagRule != null && stepData.tagRule !== \"null\" && stepData.tagRule && stepData.tagRule !== \"\" ? stepData.tagRule.toLowerCase() : null;\n\n      if ((stepType === \"system check\" || stepType === \"system information\" || stepType === \"system check & information\") && !isProspectNumber) {\n        if (tagRule !== \"select a tagrule\" && tagRule !== \"tagrule not found\" && tagRule != null) {\n          // DO AUTO FLOW\n          dispatch(makeRequestForAutoStep(stepData));\n        } else if (stepType === \"system information\") {\n          // DO AUTO FLOW\n          // Special Case as system Information does not has tag rule by design.\n          dispatch(makeRequestForAutoStep(stepData));\n        } else {\n          // DO MANUAL FLOW\n          dispatch(executeManualStep(stepData));\n        }\n      } else {\n        // DO MANUAL FLOW\n        dispatch(executeManualStep(stepData));\n      }\n    }\n  };\n};\nexport var makeRequestForAutoStep = function makeRequestForAutoStep(stepData, provParam) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var stepId = stepData.stepId;\n    var reqData = {\n      nextStepId: stepId,\n      transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n      notes: encodeURIComponent(state.scenario.autoRequestScenarioNotes),\n      ruleParams: stepData[\"ruleParams\"],\n      START_DATE: state.leap.leapStartDate,\n      END_DATE: state.leap.leapEndDate,\n      lsiNumber: state.customerInfo.customerLSINumber\n    };\n\n    if (provParam) {\n      reqData[state.scenario.provConfirmInfo.provConfirmParamName] = provParam && provParam === 'true' ? true : false;\n    }\n\n    dispatch(showLoader());\n    ScenarioService.systemCheckAndInfoRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data) {\n        dispatch(parseRequestForAutoStepData(response.data));\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DEFAULT_ERROR_MSG));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(openSnackbarRequest(error, SnackbarMessages.DEFAULT_ERROR_MSG)); // console.log(\"error\", error);\n    });\n  };\n};\n\nvar parseRequestForAutoStepData = function parseRequestForAutoStepData(autoStepData) {\n  return function (dispatch, getState) {\n    var scenarioTree = getState().scenario.currentScenarioInfo[\"decisionTree\"];\n    var response = autoStepData[\"result\"];\n    var nextStepId = response[\"nextStepId\"];\n\n    if (ScenarioService.isChoiceBookmark(response)) {\n      var bookMarkData = response[\"bookMark\"];\n      dispatch(openBookmarkScenario(bookMarkData)); // this.openBookMarkScenario(bookMark);\n    } // else if (response[\"automatedStepFailed\"]) {\n    //     // Auto step failed goto manual\n    //     dispatch(executeManualStep(scenarioTree[nextStepId]));\n    // } \n    else {\n        dispatch(handleScenarioNotes(response[\"notes\"], 'autoResponse'));\n\n        if (response[\"crmCode\"]) {\n          dispatch(handleChoiceCrmCode(response[\"crmCode\"]));\n        }\n\n        dispatch(executeManualStep(scenarioTree[nextStepId]));\n        dispatch(handleSystemChecks(response[\"systemCheck\"]));\n        dispatch(handleSystemInfo(response[\"systemInfo\"]));\n      }\n  };\n};\n\nexport var handleScenarioNotes = function handleScenarioNotes(choiceText, autoStep) {\n  return function (dispatch, getState) {\n    var notes = \"\";\n\n    if (choiceText && autoStep === \"autoResponse\") {\n      notes = choiceText;\n    } else if (getState().scenario.scenarioNotes.length === 0) {\n      notes = \" >\" + choiceText;\n    } else {\n      notes = getState().scenario.scenarioNotes + \" >\" + choiceText;\n    }\n\n    if (!autoStep || autoStep === \"autoResponse\") {\n      dispatch(updateScenarioNotes(notes));\n      dispatch(updateScenarioNotesList(getState().scenario.notesList.concat(notes)));\n    } else if (autoStep === \"autoRequest\") {\n      dispatch(updateScenarioNotesForAutoRequest(notes));\n    }\n  };\n};\nexport var handleChoiceCrmCode = function handleChoiceCrmCode(crmCode) {\n  return function (dispatch) {\n    dispatch(updateCRMCode(ScenarioService.getValidTrimmedCrmCode(crmCode) || \"\"));\n    dispatch(updateCRMButtonText(\"CRM Codes\"));\n\n    if (crmCode) {\n      if (crmCode.indexOf(\">SR>\") !== -1) {\n        var crmCodeTokens = crmCode.split('>');\n        var srType = crmCodeTokens[3];\n        var srSubType = crmCodeTokens[4];\n        dispatch(updateCRMButtonText(\"SR\"));\n      } else if (crmCode.indexOf(\">FTR>\") !== -1) {\n        dispatch(updateCRMButtonText(\"FTR\"));\n      }\n    }\n  };\n};\nexport var handleChoiceUpdateTaskCase = function handleChoiceUpdateTaskCase(caseName) {\n  return function (dispatch) {\n    dispatch(updateTaskCaseName(caseName || \"\"));\n\n    if (caseName) {\n      dispatch(updateCRMButtonText(\"Update Task\"));\n    }\n  };\n};\nexport var handleSystemChecks = function handleSystemChecks(sysCheckData) {\n  return function (dispatch) {\n    if (sysCheckData) {\n      var tempList = [];\n      var markedChoiceColor = \"\";\n\n      for (var key in sysCheckData) {\n        if (sysCheckData.hasOwnProperty(key)) {\n          var sysData = sysCheckData[key];\n          var tempObj = {};\n          tempObj[\"key\"] = key;\n          tempObj[\"description\"] = sysData.displayText;\n          tempObj[\"markedChoiceColor\"] = sysData.markedChoiceColor.toLowerCase();\n          tempList.push(tempObj);\n\n          if (markedChoiceColor !== \"red\") {\n            markedChoiceColor = ScenarioService.getChoiceColor(sysData);\n          }\n        }\n      }\n\n      dispatch(updateChoiceColor(markedChoiceColor));\n      dispatch(resortScenarioSystemCheckList(tempList));\n    }\n  };\n};\n\nvar resortScenarioSystemCheckList = function resortScenarioSystemCheckList(tempList) {\n  return function (dispatch) {\n    var scenarioSystemCheckList = [];\n    var greenList = [];\n    var redList = [];\n    tempList.forEach(function (element) {\n      if (element[\"sign\"] === \"green\") {\n        greenList.push(element);\n      } else {\n        redList.push(element);\n      }\n    });\n    scenarioSystemCheckList = greenList.concat(redList);\n    dispatch(updateSystemCheck(scenarioSystemCheckList));\n  };\n};\n\nexport var handleSystemInfo = function handleSystemInfo(sysInfoData) {\n  return function (dispatch) {\n    var scenarioSystemInfoList = [];\n\n    if (sysInfoData && sysInfoData.length) {\n      sysInfoData.forEach(function (element) {\n        element[\"information\"].forEach(function (elementChild) {\n          var tempObj = {};\n          tempObj[\"key\"] = elementChild.informationDisplayTag;\n          tempObj[\"description\"] = elementChild.informationDisplayValue;\n          scenarioSystemInfoList.push(tempObj);\n        });\n      });\n    }\n\n    dispatch(updateSystemInfo(scenarioSystemInfoList));\n  };\n}; //handles drop call scenario info object \n\nexport var handleDropCallSystemInfo = function handleDropCallSystemInfo(sysInfoData) {\n  return function (dispatch) {\n    var scenarioSystemInfoList = [];\n\n    if (sysInfoData && sysInfoData.length) {\n      sysInfoData.forEach(function (element) {\n        var tempObj = {};\n        tempObj[\"key\"] = element.key;\n        tempObj[\"description\"] = element.description;\n        scenarioSystemInfoList.push(tempObj);\n      });\n    }\n\n    dispatch(updateSystemInfo(scenarioSystemInfoList));\n  };\n};\nexport var handleScenarioBackButtonClick = function handleScenarioBackButtonClick() {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch(handleChoiceCrmCode());\n    dispatch(handleChoiceUpdateTaskCase());\n\n    var notesList = _toConsumableArray(state.scenario.notesList);\n\n    var previousStepsList = _toConsumableArray(state.scenario.previousStepsList);\n\n    var breadcrumbChoices = _toConsumableArray(state.scenario.breadcrumbChoices);\n\n    notesList.pop();\n    breadcrumbChoices.pop();\n    var injectableNotes = notesList[notesList.length - 1] || \"\";\n\n    if (previousStepsList.length >= 1) {\n      var stepId = previousStepsList.pop();\n      dispatch(updateScenarioNotes(injectableNotes));\n      dispatch(updateScenarioNotesList(notesList));\n      dispatch(updateScenarioStepHistory(previousStepsList));\n      dispatch(updateScenarioBreadcrumb(breadcrumbChoices));\n      dispatch(goToPreviousManualStep(stepId));\n    }\n  };\n};\nexport var goToPreviousManualStep = function goToPreviousManualStep(stepId) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var scenarioTree = state.scenario.currentScenarioInfo[\"decisionTree\"];\n    var stepData = scenarioTree[stepId];\n\n    if (stepData) {\n      dispatch(executeManualStep(stepData));\n    } else {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DEFAULT_ERROR_MSG));\n    }\n  };\n};\n\nvar executeManualStep = function executeManualStep(stepData) {\n  return function (dispatch) {\n    var description = stepData.description;\n    var choiceList = stepData.choiceList;\n    dispatch(updateCurrentStepId(stepData.stepId));\n    dispatch(updateScenarioDescription(description));\n    dispatch(updateScenarioChoice(choiceList));\n    dispatch(updateScenarioStepConfiguration(stepData));\n    dispatch(leapInfoHandler(stepData));\n  };\n};\n\nexport var updateScenarioStepConfiguration = function updateScenarioStepConfiguration(stepData) {\n  return function (dispatch) {\n    var payload = {\n      displayCalender: stepData.displayCalender\n    };\n    dispatch({\n      type: ScenarioActionType.UPDATE_SCENARIO_STEP_CONFIGURATION,\n      payload: payload\n    });\n  };\n};\nexport var updateCurrentStepId = function updateCurrentStepId(stepId) {\n  return {\n    type: ScenarioActionType.UPDATE_CURRENT_STEP_ID,\n    payload: stepId\n  };\n};\nexport var updateChoiceColor = function updateChoiceColor(value) {\n  return {\n    type: ScenarioActionType.UPDATE_SYSTEM_CHECK_COLOR,\n    payload: value\n  };\n};\nexport var updateSystemCheck = function updateSystemCheck(list) {\n  return {\n    type: ScenarioActionType.UPDATE_SYSTEM_CHECKS,\n    payload: list\n  };\n};\nexport var updateSystemInfo = function updateSystemInfo(list) {\n  return {\n    type: ScenarioActionType.UPDATE_SYSTEM_INFO,\n    payload: list\n  };\n};\nexport var updateScenarioBreadcrumb = function updateScenarioBreadcrumb(list) {\n  return {\n    type: ScenarioActionType.UPDATE_BREADCRUMB,\n    payload: list\n  };\n};\nexport var updateScenarioDescription = function updateScenarioDescription(desc) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_DESCRIPTION,\n    payload: desc\n  };\n};\nexport var updateScenarioChoice = function updateScenarioChoice(list) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_CHOICE,\n    payload: list\n  };\n};\nexport var updateCRMCode = function updateCRMCode(value) {\n  return {\n    type: ScenarioActionType.UPDATE_CRM_CODE,\n    payload: value\n  };\n};\nexport var updateTaskCaseName = function updateTaskCaseName(value) {\n  return {\n    type: ScenarioActionType.UPDATE_TASK_CASE_NAME,\n    payload: value\n  };\n};\nexport var updateCRMButtonText = function updateCRMButtonText(value) {\n  return {\n    type: ScenarioActionType.UPDATE_CRM_BUTTON_TEXT,\n    payload: value\n  };\n};\nexport var updateScenarioNotes = function updateScenarioNotes(value) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES,\n    payload: value\n  };\n};\nexport var updateScenarioNotesForAutoRequest = function updateScenarioNotesForAutoRequest(value) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES_FOR_AUTO_REQUEST,\n    payload: value\n  };\n};\nexport var updateScenarioNotesList = function updateScenarioNotesList(list) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES_LIST,\n    payload: list\n  };\n};\nexport var editScenarioNotes = function editScenarioNotes(value) {\n  return function (dispatch, getState) {\n    dispatch(updateScenarioNotes(value));\n    var notesList = getState().scenario.notesList;\n    notesList[notesList.length - 1] = value;\n    dispatch(updateScenarioNotesList(notesList));\n  };\n};\nexport var updateScenarioStepHistory = function updateScenarioStepHistory(list) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_STEP_HISTORY,\n    payload: list\n  };\n};\nexport var resetScenarioValues = function resetScenarioValues() {\n  return {\n    type: ScenarioActionType.RESET_SCENARIO_VALUES\n  };\n};\nexport var updateStepChoiceSMSTemplate = function updateStepChoiceSMSTemplate(value) {\n  return {\n    type: ScenarioActionType.UPDATE_SCENARIO_CHOICE_SMS_TEMPLATE,\n    payload: value\n  };\n};\nexport var updateScenarioLeapFlag = function updateScenarioLeapFlag(value) {\n  return {\n    type: ScenarioActionType.UPDATE_LEAP_ENABLE_FLAG,\n    payload: value\n  };\n};\nexport var scenarioSRHandler = function scenarioSRHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var customerInfo = state.customerInfo.customerInfo;\n    var crmCode = state.scenario.crmCode;\n\n    if (ScenarioService.checkForCrmCodeValidationForSR(crmCode, customerInfo)) {\n      var isSRAlreadyRaised = false;\n      var isFTRAlreadyRaised = false;\n\n      try {\n        isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n        isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n      } catch (e) {//\n      }\n\n      if (isSRAlreadyRaised || isFTRAlreadyRaised) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n      } else {\n        var reqData = {\n          transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n          subType: ''\n        };\n        var notes = state.scenario.scenarioNotes;\n        var _crmCode = state.scenario.crmCode;\n        reqData.subType = ScenarioService.getSubtype(_crmCode);\n        reqData.type = ScenarioService.getType(_crmCode);\n        dispatch(fetchDFFRequest(reqData, notes, DisabledTaggingStatus.SCENARIO_SR_TAGGING));\n      }\n    } else {\n      //incorrect tagging \n      dispatch(openAlertMessageDialog(AlertMessageDialogConstant.TAGGING_INCORRECT));\n    }\n  };\n};\nexport var scenarioTaskUpdateHandler = function scenarioTaskUpdateHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var caseName = state.scenario.updateSrTaskCaseName;\n    var lsiNumber = state.customerInfo.customerLSINumber;\n    var reqData = {\n      transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n      caseName: caseName,\n      lsiNumber: lsiNumber\n    };\n    dispatch(fetchTaskFieldsRequest(reqData, '', ''));\n  };\n};\nexport var claimDFFHandler = function claimDFFHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var isSRAlreadyRaised = false;\n    var isFTRAlreadyRaised = false; // try {\n    //     isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    //     isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n    // } catch (e) {\n    // }\n\n    if (isSRAlreadyRaised || isFTRAlreadyRaised) {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n    } else {\n      var reqData = {\n        transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n        subType: 'CLAIM'\n      };\n      var notes = state.scenario.scenarioNotes;\n      dispatch(fetchClaimDFFRequest(reqData, notes, DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_TAGGING));\n    }\n  };\n};\nexport var scenarioFTRHandler = function scenarioFTRHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var customerInfo = state.customerInfo.customerInfo;\n    var crmCode = state.scenario.crmCode;\n\n    if (ScenarioService.checkForCrmCodeValidationForFTR(crmCode, customerInfo)) {\n      var _customerInfo = state.customerInfo && state.customerInfo.customerInfo;\n\n      if (SystemTypeService.isOtherSystem(_customerInfo) || SystemTypeService.isLegacySystem(_customerInfo)) {\n        dispatch(createFTRRequest());\n      } else {\n        dispatch(raiseFTRRequest());\n      }\n    } else {\n      // incorrect tagging \n      dispatch(openAlertMessageDialog(AlertMessageDialogConstant.TAGGING_INCORRECT));\n    }\n  };\n};\nexport var raiseFTRRequest = function raiseFTRRequest() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var prospectNumberCircle = null;\n    var isFTRAlreadyRaised = false;\n    var isSRAlreadyRaised = false;\n\n    try {\n      prospectNumberCircle = state.customerInfo && state.customerInfo.prospectCircle ? state.customerInfo.prospectCircle : null;\n      isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n      isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    } catch (e) {//\n    }\n\n    if (isFTRAlreadyRaised || isSRAlreadyRaised) {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n      var reqData = {\n        notes: ScenarioService.getNotesAsPerCharacterConstraint(state.scenario.scenarioNotes),\n        scenarioName: state.scenario.currentScenarioInfo.name,\n        smsTemplate: state.scenario.smsTemplate,\n        tagging: state.scenario.crmCode,\n        prospectNumberCircle: prospectNumberCircle,\n        transactionId: state.scenario.scenarioStatus.transactionId\n      };\n      dispatch(tagFTRRequest(reqData, DisabledTaggingStatus.SCENARIO_FTR_TAGGING));\n    }\n  };\n};\nexport var raiseInsuranceClaimFTRRequest = function raiseInsuranceClaimFTRRequest(resolution) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var prospectNumberCircle = null;\n    var isFTRAlreadyRaised = false;\n    var isSRAlreadyRaised = false;\n\n    try {\n      prospectNumberCircle = state.customerInfo && state.customerInfo.prospectCircle ? state.customerInfo.prospectCircle : null; // isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n      // isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    } catch (e) {//\n    }\n\n    if (isFTRAlreadyRaised || isSRAlreadyRaised) {// dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n      var reqData = {\n        notes: ScenarioService.getNotesAsPerCharacterConstraint(state.scenario.scenarioNotes),\n        scenarioName: state.scenario.currentScenarioInfo.name,\n        smsTemplate: state.scenario.smsTemplate,\n        tagging: state.scenario.crmCode + '>Intimation Request>' + resolution,\n        prospectNumberCircle: prospectNumberCircle,\n        transactionId: state.scenario.scenarioStatus.transactionId\n      };\n      dispatch(tagFTRRequest(reqData, DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_FTR_TAGGING));\n    }\n  };\n};\nexport var disableScenarioSearch = function disableScenarioSearch() {\n  return {\n    type: ScenarioActionType.DISABLE_SCENARIO_SEARCH\n  };\n};\nexport var enableScenarioSearch = function enableScenarioSearch() {\n  return {\n    type: ScenarioActionType.ENABLE_SCENARIO_SEARCH\n  };\n};\nexport var handleFeatureLink = function handleFeatureLink(featureName) {\n  return function (dispatch) {\n    switch (featureName) {\n      case 'billCompare':\n        {\n          dispatch(switchHomeTab(TabConstant.HOME_BILL_COMPARE_TAB));\n          break;\n        }\n\n      default:\n        {}\n    }\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/scenario.action.js"],"names":["ScenarioActionType","ScenarioService","showLoader","hideLoader","openSnackbarRequest","SnackbarMessages","fetchDFFRequest","fetchClaimDFFRequest","fetchTaskFieldsRequest","tagFTRRequest","TabConstant","switchHomeTab","dispayScenarioTab","createFTRRequest","leapInfoHandler","validateLeapCalendarDate","disableBlankCallClick","enableSelfHelpClick","SystemTypeService","DisabledTaggingStatus","enableScenarioFTRTagging","enableScenarioSRTagging","openAlertMessageDialog","openPovisioningConfirmDialog","AlertMessageDialogConstant","updateCurrentScenarioId","scenarioId","dispatch","type","UPDATE_CURRENT_SCENARIO_ID","payload","fetchScenarioInfo","updateCurrentScenarioIdAndStep","stepId","updateSearchScenarioText","text","UPDATE_SEARCH_SCENARIO_TEXT","openBookmarkScenario","bookmarkData","bookmarkName","getState","state","lsiNumber","customerInfo","customerLSINumber","reqData","fetchScenarioRequest","then","response","data","onFetchScenarioSuccess","HOME_SCENARIO_TAB","result","scenarioTree","updateCurrentStepId","executeScenarioStep","bookmarkStepId","getScenarioBookmarkStepId","scenarioStartingStepId","getScenarioStartingStepId","resetScenarioValues","SCENARIO_STEP_ID_NOT_FOUND","SCENARIO_NOT_FOUND","scenarioName","error","UPDATE_CURRENT_SCENARIO_INFO","saveBookmarkForCRMCodeClick","bookmark","SAVE_BOOKMARK_FOR_CRM_CODE_CLICK","saveProvConfirmDialogInfo","choiceData","nextStepData","SAVE_PROV_CONFIRM_INFO","provConfirmDialogMessage","provConfirmParamName","getProvConfirmParamName","handleChoiceButtonClick","scenario","currentScenarioInfo","decisionTree","parseInt","nextStep","isProvisioningConfirmation","isChoiceBookmarkWithCRMCode","handleManualChoiceButtonClick","isChoiceBookmark","stepLevelConfig","displayCalender","updateScenarioLeapFlag","handleChoiceCrmCode","handleChoiceUpdateTaskCase","updateStepChoiceSMSTemplate","updateScenarioStepHistory","previousStepsList","concat","currentStepId","breadcrumbChoices","updateScenarioBreadcrumb","manageScenarioDataUpdation","stepData","isProspectNumber","e","isAutoScenarioStepFlow","handleScenarioNotes","stepType","instruction","toLowerCase","tagRule","makeRequestForAutoStep","executeManualStep","provParam","nextStepId","transactionId","scenarioStatus","notes","encodeURIComponent","autoRequestScenarioNotes","ruleParams","START_DATE","leap","leapStartDate","END_DATE","leapEndDate","provConfirmInfo","systemCheckAndInfoRequest","parseRequestForAutoStepData","DEFAULT_ERROR_MSG","autoStepData","bookMarkData","handleSystemChecks","handleSystemInfo","choiceText","autoStep","scenarioNotes","length","updateScenarioNotes","updateScenarioNotesList","notesList","updateScenarioNotesForAutoRequest","crmCode","updateCRMCode","getValidTrimmedCrmCode","updateCRMButtonText","indexOf","crmCodeTokens","split","srType","srSubType","caseName","updateTaskCaseName","sysCheckData","tempList","markedChoiceColor","key","hasOwnProperty","sysData","tempObj","displayText","push","getChoiceColor","updateChoiceColor","resortScenarioSystemCheckList","scenarioSystemCheckList","greenList","redList","forEach","element","updateSystemCheck","sysInfoData","scenarioSystemInfoList","elementChild","informationDisplayTag","informationDisplayValue","updateSystemInfo","handleDropCallSystemInfo","description","handleScenarioBackButtonClick","pop","injectableNotes","goToPreviousManualStep","choiceList","updateScenarioDescription","updateScenarioChoice","updateScenarioStepConfiguration","UPDATE_SCENARIO_STEP_CONFIGURATION","UPDATE_CURRENT_STEP_ID","value","UPDATE_SYSTEM_CHECK_COLOR","list","UPDATE_SYSTEM_CHECKS","UPDATE_SYSTEM_INFO","UPDATE_BREADCRUMB","desc","UPDATE_SCENARIO_DESCRIPTION","UPDATE_SCENARIO_CHOICE","UPDATE_CRM_CODE","UPDATE_TASK_CASE_NAME","UPDATE_CRM_BUTTON_TEXT","UPDATE_SCENARIO_NOTES","UPDATE_SCENARIO_NOTES_FOR_AUTO_REQUEST","UPDATE_SCENARIO_NOTES_LIST","editScenarioNotes","UPDATE_SCENARIO_STEP_HISTORY","RESET_SCENARIO_VALUES","UPDATE_SCENARIO_CHOICE_SMS_TEMPLATE","UPDATE_LEAP_ENABLE_FLAG","scenarioSRHandler","checkForCrmCodeValidationForSR","isSRAlreadyRaised","isFTRAlreadyRaised","disabledTaggingInfo","SCENARIO_SR_TAGGING","SCENARIO_FTR_TAGGING","DUPLICATE_SR","subType","getSubtype","getType","TAGGING_INCORRECT","scenarioTaskUpdateHandler","updateSrTaskCaseName","claimDFFHandler","SCENARIO_INSURANCE_CLAIM_TAGGING","scenarioFTRHandler","checkForCrmCodeValidationForFTR","isOtherSystem","isLegacySystem","raiseFTRRequest","prospectNumberCircle","prospectCircle","DUPLICATE_FTR","getNotesAsPerCharacterConstraint","name","smsTemplate","tagging","raiseInsuranceClaimFTRRequest","resolution","SCENARIO_INSURANCE_CLAIM_FTR_TAGGING","disableScenarioSearch","DISABLE_SCENARIO_SEARCH","enableScenarioSearch","ENABLE_SCENARIO_SEARCH","handleFeatureLink","featureName","HOME_BILL_COMPARE_TAB"],"mappings":"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","sourcesContent":["import { ScenarioActionType } from \"../actiontype/scenario.actiontype\";\nimport ScenarioService from '../services/scenario.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { fetchDFFRequest, fetchClaimDFFRequest } from '../actions/dff.action';\nimport { fetchTaskFieldsRequest } from './task-update.action';\nimport { tagFTRRequest } from '../actions/ftr.action';\nimport { TabConstant } from '../constants/tabs.constant';\nimport { switchHomeTab, dispayScenarioTab } from './tabs.action';\nimport { createFTRRequest } from \"./app-dialog.action\";\nimport { leapInfoHandler, validateLeapCalendarDate } from \"./leap.action\";\nimport { disableBlankCallClick, enableSelfHelpClick } from './left-nav.action';\nimport SystemTypeService from \"../services/system-type.service\";\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { enableScenarioFTRTagging, enableScenarioSRTagging } from \"./disabled-tagging.action\";\nimport { openAlertMessageDialog } from \"./alert-message-dialog.action\";\nimport { openPovisioningConfirmDialog } from './app-dialog.action';\nimport { AlertMessageDialogConstant } from \"../constants/alert-message.constant\";\n\nexport const updateCurrentScenarioId = scenarioId => dispatch => {\n    dispatch({\n        type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n        payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId));\n};\n\nexport const updateCurrentScenarioIdAndStep = (scenarioId, stepId) => dispatch => {\n    dispatch({\n        type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n        payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId, null, stepId));\n};\n\nexport const updateSearchScenarioText = text => ({\n    type: ScenarioActionType.UPDATE_SEARCH_SCENARIO_TEXT,\n    payload: text\n});\n\nexport const openBookmarkScenario = (bookmarkData) => dispatch => {\n    const scenarioId = bookmarkData[\"scenarioId\"];\n    const bookmarkName = bookmarkData[\"bookMarkName\"];\n    dispatch({\n        type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_ID,\n        payload: scenarioId\n    });\n    dispatch(fetchScenarioInfo(scenarioId, bookmarkName));\n}\n\nexport const fetchScenarioInfo = (scenarioId, bookmarkName, stepId) => (dispatch, getState) => {\n    const state = getState()\n    const lsiNumber = state.customerInfo.customerLSINumber\n    const reqData = {\n        scenarioId,\n        lsiNumber\n    };\n    dispatch(showLoader());\n    ScenarioService.fetchScenarioRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data) {\n                dispatch(onFetchScenarioSuccess(response.data));\n                // Display and move on scenario tab\n                dispatch(dispayScenarioTab());\n                dispatch(switchHomeTab(TabConstant.HOME_SCENARIO_TAB));\n                //disabling blank cal from sidebar on scenario tab active\n                dispatch(disableBlankCallClick());\n                dispatch(enableSelfHelpClick());\n                // Enable scenario FTR/SR tagging on scenario load\n                dispatch(enableScenarioFTRTagging());\n                dispatch(enableScenarioSRTagging());\n                if (response.data && response.data.result) {\n                    const scenarioTree = response.data.result[\"decisionTree\"];\n                    // Go to a particular scenario step.\n                    if (stepId) {\n                        dispatch(updateCurrentStepId(stepId));\n                        dispatch(executeScenarioStep(stepId));\n                    }\n                    // Go to bookmark step \n                    else if (bookmarkName) {\n                        const bookmarkStepId = ScenarioService.getScenarioBookmarkStepId(response.data.result, bookmarkName);\n                        dispatch(updateCurrentStepId(bookmarkStepId));\n                        dispatch(executeScenarioStep(bookmarkStepId));\n                    } else {\n                        // By default go to the starting step of scenario\n                        const scenarioStartingStepId = ScenarioService.getScenarioStartingStepId(scenarioTree);\n                        if (scenarioStartingStepId) {\n                            dispatch(resetScenarioValues());\n                            dispatch(updateCurrentStepId(scenarioStartingStepId));\n                            dispatch(executeScenarioStep(scenarioStartingStepId));\n                        } else {\n                            dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_STEP_ID_NOT_FOUND));\n                        }\n                    }\n                } else {\n                    dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_NOT_FOUND));\n                }\n                // Update scenario name in auto-complete\n                const scenarioName = response.data.result[\"name\"];\n                dispatch(updateSearchScenarioText(scenarioName))\n            } else {\n                dispatch(openSnackbarRequest(null, SnackbarMessages.SCENARIO_NOT_FOUND));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n\n};\n\nconst onFetchScenarioSuccess = payload => {\n    return {\n        type: ScenarioActionType.UPDATE_CURRENT_SCENARIO_INFO,\n        payload\n    }\n}\n\nconst saveBookmarkForCRMCodeClick = bookmark => {\n    return {\n        type: ScenarioActionType.SAVE_BOOKMARK_FOR_CRM_CODE_CLICK,\n        payload: bookmark\n    }\n}\n\nconst saveProvConfirmDialogInfo = (choiceData, nextStepData) => {\n    return {\n        type: ScenarioActionType.SAVE_PROV_CONFIRM_INFO,\n        payload: {\n            provConfirmDialogMessage: choiceData['promptText'],\n            provConfirmParamName: ScenarioService.getProvConfirmParamName(nextStepData),\n            nextStepData\n        }\n    }\n}\n\nexport const handleChoiceButtonClick = choiceData => (dispatch, getState) => {\n    const state = getState();\n    const nextStepData = state.scenario.currentScenarioInfo.decisionTree[parseInt(choiceData.nextStep)]\n    switch (true) {\n        case ScenarioService.isProvisioningConfirmation(choiceData, nextStepData):\n            dispatch(saveProvConfirmDialogInfo(choiceData, nextStepData));\n            dispatch(openPovisioningConfirmDialog());\n            break;\n\n        case ScenarioService.isChoiceBookmarkWithCRMCode(choiceData):\n            dispatch(saveBookmarkForCRMCodeClick(choiceData[\"bookMark\"]));\n            dispatch(handleManualChoiceButtonClick(choiceData));\n            break;\n        case ScenarioService.isChoiceBookmark(choiceData):\n            const bookmarkData = choiceData[\"bookMark\"];\n            dispatch(openBookmarkScenario(bookmarkData));\n            break;\n        case state.scenario.stepLevelConfig.displayCalender:\n            dispatch(validateLeapCalendarDate(choiceData));\n            break;\n        default:\n            dispatch(handleManualChoiceButtonClick(choiceData));\n            break;\n    }\n}\n\nexport const handleManualChoiceButtonClick = choiceData => (dispatch, getState) => {\n    const state = getState();\n    dispatch(updateScenarioLeapFlag(choiceData[\"isLeapEnable\"]));\n    dispatch(handleChoiceCrmCode(choiceData[\"crmCode\"]));\n    dispatch(handleChoiceUpdateTaskCase(choiceData[\"updateSrTaskCaseName\"]));\n    dispatch(updateStepChoiceSMSTemplate(choiceData[\"smsTemplate\"]));\n    dispatch(updateScenarioStepHistory(state.scenario.previousStepsList.concat(parseInt(state.scenario.currentStepId, 10))));\n    const breadcrumbChoices = state.scenario.breadcrumbChoices.concat(choiceData[\"choiceText\"])\n    dispatch(updateScenarioBreadcrumb(breadcrumbChoices));\n    dispatch(manageScenarioDataUpdation(choiceData));\n    dispatch(executeScenarioStep(parseInt(choiceData[\"nextStep\"], 10)));\n}\n\n\nexport const manageScenarioDataUpdation = (choiceData) => (dispatch, getState) => {\n    let stepData = null;\n    let isProspectNumber = false;\n    const stepId = parseInt(choiceData[\"nextStep\"], 10);\n    try {\n        stepData = getState().scenario.currentScenarioInfo[\"decisionTree\"][stepId];\n        isProspectNumber = getState().customerInfo && getState().customerInfo.isProspectNumber ? getState().customerInfo.isProspectNumber : false;\n    } catch (e) {\n        //\n    }\n    if (!ScenarioService.isAutoScenarioStepFlow(stepData, isProspectNumber)) {\n        dispatch(handleScenarioNotes(choiceData[\"choiceText\"]));\n    } else {\n        dispatch(handleScenarioNotes(choiceData[\"choiceText\"], 'autoRequest'));\n    }\n}\n\nexport const executeScenarioStep = (stepId) => (dispatch, getState) => {\n    let stepData = null;\n    let isProspectNumber = false;\n    try {\n        stepData = getState().scenario.currentScenarioInfo[\"decisionTree\"][stepId];\n        isProspectNumber = getState().customerInfo && getState().customerInfo.isProspectNumber ? getState().customerInfo.isProspectNumber : false;\n    } catch (e) {\n        //\n    }\n    if (stepData) {\n        let stepType = \"\";\n        if (\n            stepData &&\n            stepData.instruction\n        ) {\n            stepType = stepData.instruction.toLowerCase();\n        }\n        const tagRule =\n            stepData &&\n                stepData.tagRule != null &&\n                stepData.tagRule !== \"null\" &&\n                stepData.tagRule &&\n                stepData.tagRule !== \"\"\n                ? stepData.tagRule.toLowerCase()\n                : null;\n        if (\n            (stepType === \"system check\" ||\n                stepType === \"system information\" ||\n                stepType === \"system check & information\") && !isProspectNumber\n        ) {\n            if (\n                tagRule !== \"select a tagrule\" &&\n                tagRule !== \"tagrule not found\" &&\n                tagRule != null\n            ) {\n                // DO AUTO FLOW\n                dispatch(makeRequestForAutoStep(stepData));\n            } else if (stepType === \"system information\") {\n                // DO AUTO FLOW\n                // Special Case as system Information does not has tag rule by design.\n                dispatch(makeRequestForAutoStep(stepData));\n            } else {\n                // DO MANUAL FLOW\n                dispatch(executeManualStep(stepData));\n            }\n        } else {\n            // DO MANUAL FLOW\n            dispatch(executeManualStep(stepData));\n        }\n    }\n}\n\nexport const makeRequestForAutoStep = (stepData, provParam) => (dispatch, getState) => {\n    const state = getState();\n    const stepId = stepData.stepId;\n    let reqData = {\n        nextStepId: stepId,\n        transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n        notes: encodeURIComponent(state.scenario.autoRequestScenarioNotes),\n        ruleParams: stepData[\"ruleParams\"],\n        START_DATE: state.leap.leapStartDate,\n        END_DATE: state.leap.leapEndDate,\n        lsiNumber: state.customerInfo.customerLSINumber\n    };\n    if (provParam) {\n        reqData[state.scenario.provConfirmInfo.provConfirmParamName] = (provParam && (provParam === 'true')) ? true : false;\n    }\n    dispatch(showLoader());\n    ScenarioService.systemCheckAndInfoRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data) {\n                dispatch(parseRequestForAutoStepData(response.data));\n            } else {\n                dispatch(openSnackbarRequest(null, SnackbarMessages.DEFAULT_ERROR_MSG));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(openSnackbarRequest(error, SnackbarMessages.DEFAULT_ERROR_MSG));\n            // console.log(\"error\", error);\n        }\n    );\n}\n\nconst parseRequestForAutoStepData = autoStepData => (dispatch, getState) => {\n    const scenarioTree = getState().scenario.currentScenarioInfo[\"decisionTree\"];\n    const response = autoStepData[\"result\"];\n    const nextStepId = response[\"nextStepId\"];\n    if (ScenarioService.isChoiceBookmark(response)) {\n\n        const bookMarkData = response[\"bookMark\"];\n        dispatch(openBookmarkScenario(bookMarkData));\n        // this.openBookMarkScenario(bookMark);\n    }\n    // else if (response[\"automatedStepFailed\"]) {\n    //     // Auto step failed goto manual\n    //     dispatch(executeManualStep(scenarioTree[nextStepId]));\n    // } \n    else {\n        dispatch(handleScenarioNotes(response[\"notes\"], 'autoResponse'));\n        if (response[\"crmCode\"]) {\n            dispatch(handleChoiceCrmCode(response[\"crmCode\"]));\n        }\n        dispatch(executeManualStep(scenarioTree[nextStepId]));\n        dispatch(handleSystemChecks(response[\"systemCheck\"]));\n        dispatch(handleSystemInfo(response[\"systemInfo\"]));\n    }\n}\n\nexport const handleScenarioNotes = (choiceText, autoStep) => (dispatch, getState) => {\n    let notes = \"\";\n    if (choiceText && autoStep === \"autoResponse\") {\n        notes = choiceText;\n    } else if (getState().scenario.scenarioNotes.length === 0) {\n        notes = \" >\" + choiceText;\n    } else {\n        notes = getState().scenario.scenarioNotes + \" >\" + choiceText;\n    }\n    if (!autoStep || autoStep === \"autoResponse\") {\n        dispatch(updateScenarioNotes(notes));\n        dispatch(updateScenarioNotesList(getState().scenario.notesList.concat(notes)));\n    } else if (autoStep === \"autoRequest\") {\n        dispatch(updateScenarioNotesForAutoRequest(notes));\n    }\n}\n\nexport const handleChoiceCrmCode = crmCode => dispatch => {\n    dispatch(updateCRMCode(ScenarioService.getValidTrimmedCrmCode(crmCode) || \"\"));\n    dispatch(updateCRMButtonText(\"CRM Codes\"));\n    if (crmCode) {\n        if (crmCode.indexOf(\">SR>\") !== -1) {\n            const crmCodeTokens = crmCode.split('>')\n            const srType = crmCodeTokens[3]\n            const srSubType = crmCodeTokens[4]\n            \n            dispatch(updateCRMButtonText(\"SR\"));\n        } else if (crmCode.indexOf(\">FTR>\") !== -1) {\n            dispatch(updateCRMButtonText(\"FTR\"));\n        }\n    }\n}\n\nexport const handleChoiceUpdateTaskCase = caseName => dispatch => {\n    dispatch(updateTaskCaseName(caseName || \"\"));\n    if (caseName) {\n        dispatch(updateCRMButtonText(\"Update Task\"));\n    }\n}\n\nexport const handleSystemChecks = sysCheckData => dispatch => {\n    if (sysCheckData) {\n        const tempList = [];\n        let markedChoiceColor = \"\";\n        for (const key in sysCheckData) {\n            if (sysCheckData.hasOwnProperty(key)) {\n                const sysData = sysCheckData[key];\n                const tempObj = {};\n                tempObj[\"key\"] = key;\n                tempObj[\"description\"] = sysData.displayText;\n                tempObj[\"markedChoiceColor\"] = sysData.markedChoiceColor.toLowerCase();\n                tempList.push(tempObj);\n                if (markedChoiceColor !== \"red\") {\n                    markedChoiceColor = ScenarioService.getChoiceColor(sysData);\n                }\n            }\n        }\n        dispatch(updateChoiceColor(markedChoiceColor));\n        dispatch(resortScenarioSystemCheckList(tempList));\n    }\n}\n\nconst resortScenarioSystemCheckList = tempList => dispatch => {\n    let scenarioSystemCheckList = [];\n    let greenList = [];\n    let redList = [];\n    tempList.forEach(element => {\n        if (element[\"sign\"] === \"green\") {\n            greenList.push(element);\n        } else {\n            redList.push(element);\n        }\n    });\n    scenarioSystemCheckList = greenList.concat(redList);\n    dispatch(updateSystemCheck(scenarioSystemCheckList));\n}\n\nexport const handleSystemInfo = sysInfoData => dispatch => {\n    const scenarioSystemInfoList = [];\n    if (sysInfoData && sysInfoData.length) {\n        sysInfoData.forEach(element => {\n            element[\"information\"].forEach(elementChild => {\n                const tempObj = {};\n                tempObj[\"key\"] = elementChild.informationDisplayTag;\n                tempObj[\"description\"] = elementChild.informationDisplayValue;\n                scenarioSystemInfoList.push(tempObj);\n            });\n        });\n    }\n    dispatch(updateSystemInfo(scenarioSystemInfoList));\n}\n\n//handles drop call scenario info object \nexport const handleDropCallSystemInfo = sysInfoData => dispatch => {\n    const scenarioSystemInfoList = [];\n    if (sysInfoData && sysInfoData.length) {\n        sysInfoData.forEach(element => {\n            const tempObj = {};\n            tempObj[\"key\"] = element.key;\n            tempObj[\"description\"] = element.description;\n            scenarioSystemInfoList.push(tempObj);\n        });\n    }\n    dispatch(updateSystemInfo(scenarioSystemInfoList));\n}\n\nexport const handleScenarioBackButtonClick = () => (dispatch, getState) => {\n    const state = getState();\n    dispatch(handleChoiceCrmCode());\n    dispatch(handleChoiceUpdateTaskCase());\n    const notesList = [...state.scenario.notesList];\n    const previousStepsList = [...state.scenario.previousStepsList];\n    const breadcrumbChoices = [...state.scenario.breadcrumbChoices];\n    notesList.pop();\n    breadcrumbChoices.pop();\n    const injectableNotes = notesList[notesList.length - 1] || \"\";\n    if (previousStepsList.length >= 1) {\n        const stepId = previousStepsList.pop();\n        dispatch(updateScenarioNotes(injectableNotes));\n        dispatch(updateScenarioNotesList(notesList));\n        dispatch(updateScenarioStepHistory(previousStepsList));\n        dispatch(updateScenarioBreadcrumb(breadcrumbChoices));\n        dispatch(goToPreviousManualStep(stepId));\n    }\n}\n\nexport const goToPreviousManualStep = stepId => (dispatch, getState) => {\n    const state = getState();\n    const scenarioTree = state.scenario.currentScenarioInfo[\"decisionTree\"];\n    const stepData = scenarioTree[stepId];\n    if (stepData) {\n        dispatch(executeManualStep(stepData));\n    } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DEFAULT_ERROR_MSG));\n    }\n}\n\nconst executeManualStep = stepData => dispatch => {\n    const description = stepData.description;\n    const choiceList = stepData.choiceList;\n    dispatch(updateCurrentStepId(stepData.stepId));\n    dispatch(updateScenarioDescription(description));\n    dispatch(updateScenarioChoice(choiceList));\n    dispatch(updateScenarioStepConfiguration(stepData));\n    dispatch(leapInfoHandler(stepData));\n}\n\nexport const updateScenarioStepConfiguration = stepData => dispatch => {\n    const payload = {\n        displayCalender: stepData.displayCalender\n    }\n    dispatch({\n        type: ScenarioActionType.UPDATE_SCENARIO_STEP_CONFIGURATION,\n        payload\n    });\n}\n\nexport const updateCurrentStepId = stepId => ({\n    type: ScenarioActionType.UPDATE_CURRENT_STEP_ID,\n    payload: stepId\n});\n\nexport const updateChoiceColor = value => ({\n    type: ScenarioActionType.UPDATE_SYSTEM_CHECK_COLOR,\n    payload: value\n});\n\nexport const updateSystemCheck = list => ({\n    type: ScenarioActionType.UPDATE_SYSTEM_CHECKS,\n    payload: list\n});\n\nexport const updateSystemInfo = list => ({\n    type: ScenarioActionType.UPDATE_SYSTEM_INFO,\n    payload: list\n});\n\nexport const updateScenarioBreadcrumb = list => ({\n    type: ScenarioActionType.UPDATE_BREADCRUMB,\n    payload: list\n});\n\nexport const updateScenarioDescription = desc => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_DESCRIPTION,\n    payload: desc\n});\n\nexport const updateScenarioChoice = list => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_CHOICE,\n    payload: list\n});\n\nexport const updateCRMCode = value => ({\n    type: ScenarioActionType.UPDATE_CRM_CODE,\n    payload: value\n});\n\nexport const updateTaskCaseName = value => ({\n    type: ScenarioActionType.UPDATE_TASK_CASE_NAME,\n    payload: value\n});\n\nexport const updateCRMButtonText = value => ({\n    type: ScenarioActionType.UPDATE_CRM_BUTTON_TEXT,\n    payload: value\n});\n\nexport const updateScenarioNotes = value => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES,\n    payload: value\n});\n\nexport const updateScenarioNotesForAutoRequest = value => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES_FOR_AUTO_REQUEST,\n    payload: value\n});\n\nexport const updateScenarioNotesList = list => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_NOTES_LIST,\n    payload: list\n});\n\nexport const editScenarioNotes = value => (dispatch, getState) => {\n    dispatch(updateScenarioNotes(value))\n    let notesList = getState().scenario.notesList\n    notesList[notesList.length - 1] = value\n    dispatch(updateScenarioNotesList(notesList))\n}\n\nexport const updateScenarioStepHistory = list => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_STEP_HISTORY,\n    payload: list\n});\n\nexport const resetScenarioValues = () => ({\n    type: ScenarioActionType.RESET_SCENARIO_VALUES\n});\n\nexport const updateStepChoiceSMSTemplate = value => ({\n    type: ScenarioActionType.UPDATE_SCENARIO_CHOICE_SMS_TEMPLATE,\n    payload: value\n});\n\nexport const updateScenarioLeapFlag = value => ({\n    type: ScenarioActionType.UPDATE_LEAP_ENABLE_FLAG,\n    payload: value\n});\n\nexport const scenarioSRHandler = () => (dispatch, getState) => {\n    const state = getState();\n    const customerInfo = state.customerInfo.customerInfo\n    const crmCode = state.scenario.crmCode\n    if (ScenarioService.checkForCrmCodeValidationForSR(crmCode, customerInfo)) {\n        let isSRAlreadyRaised = false;\n        let isFTRAlreadyRaised = false;\n        try {\n            isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n            isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n        } catch (e) {\n            //\n        }\n        if (isSRAlreadyRaised || isFTRAlreadyRaised) {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n        } else {\n            const reqData = {\n                transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n                subType: ''\n            }\n            const notes = state.scenario.scenarioNotes;\n            const crmCode = state.scenario.crmCode;\n            reqData.subType = ScenarioService.getSubtype(crmCode);\n            reqData.type = ScenarioService.getType(crmCode);\n            dispatch(fetchDFFRequest(reqData, notes, DisabledTaggingStatus.SCENARIO_SR_TAGGING));\n        }\n    }\n    else {\n        //incorrect tagging \n        dispatch(openAlertMessageDialog(AlertMessageDialogConstant.TAGGING_INCORRECT))\n    }\n}\n\nexport const scenarioTaskUpdateHandler = () => (dispatch, getState) => {\n    const state = getState();\n    const caseName = state.scenario.updateSrTaskCaseName\n    const lsiNumber = state.customerInfo.customerLSINumber\n    \n    const reqData = {\n        transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n        caseName,\n        lsiNumber\n    }\n\n    dispatch(fetchTaskFieldsRequest(reqData, '', ''));\n}\n\nexport const claimDFFHandler = () => (dispatch, getState) => {\n    const state = getState();\n    let isSRAlreadyRaised = false;\n    let isFTRAlreadyRaised = false;\n    // try {\n    //     isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    //     isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n    // } catch (e) {\n\n    // }\n    if (isSRAlreadyRaised || isFTRAlreadyRaised) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n    } else {\n        const reqData = {\n            transactionId: state.scenario.scenarioStatus[\"transactionId\"],\n            subType: 'CLAIM'\n        }\n        const notes = state.scenario.scenarioNotes;\n        dispatch(fetchClaimDFFRequest(reqData, notes, DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_TAGGING));\n    }\n}\n\nexport const scenarioFTRHandler = () => (dispatch, getState) => {\n    const state = getState();\n    const customerInfo = state.customerInfo.customerInfo\n    const crmCode = state.scenario.crmCode\n    if (ScenarioService.checkForCrmCodeValidationForFTR(crmCode, customerInfo)) {\n        const customerInfo = state.customerInfo && state.customerInfo.customerInfo;\n        if (SystemTypeService.isOtherSystem(customerInfo) || SystemTypeService.isLegacySystem(customerInfo)) {\n            dispatch(createFTRRequest());\n        } else {\n            dispatch(raiseFTRRequest());\n        }\n    }\n    else {\n        // incorrect tagging \n        dispatch(openAlertMessageDialog(AlertMessageDialogConstant.TAGGING_INCORRECT))\n    }\n}\n\nexport const raiseFTRRequest = () => (dispatch, getState) => {\n    const state = getState();\n    let prospectNumberCircle = null;\n    let isFTRAlreadyRaised = false;\n    let isSRAlreadyRaised = false;\n    try {\n        prospectNumberCircle = state.customerInfo && state.customerInfo.prospectCircle ? state.customerInfo.prospectCircle : null;\n        isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n        isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    } catch (e) {\n        //\n    }\n    if (isFTRAlreadyRaised || isSRAlreadyRaised) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n        const reqData = {\n            notes: ScenarioService.getNotesAsPerCharacterConstraint(state.scenario.scenarioNotes),\n            scenarioName: state.scenario.currentScenarioInfo.name,\n            smsTemplate: state.scenario.smsTemplate,\n            tagging: state.scenario.crmCode,\n            prospectNumberCircle: prospectNumberCircle,\n            transactionId: state.scenario.scenarioStatus.transactionId\n        }\n        dispatch(tagFTRRequest(reqData, DisabledTaggingStatus.SCENARIO_FTR_TAGGING));\n    }\n}\n\n\nexport const raiseInsuranceClaimFTRRequest = (resolution) => (dispatch, getState) => {\n    const state = getState();\n    let prospectNumberCircle = null;\n    let isFTRAlreadyRaised = false;\n    let isSRAlreadyRaised = false;\n    try {\n        prospectNumberCircle = state.customerInfo && state.customerInfo.prospectCircle ? state.customerInfo.prospectCircle : null;\n        // isFTRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_FTR_TAGGING] : false;\n        // isSRAlreadyRaised = state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] ? state.disabledTaggingInfo[DisabledTaggingStatus.SCENARIO_SR_TAGGING] : false;\n    } catch (e) {\n        //\n    }\n    if (isFTRAlreadyRaised || isSRAlreadyRaised) {\n        // dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n        const reqData = {\n            notes: ScenarioService.getNotesAsPerCharacterConstraint(state.scenario.scenarioNotes),\n            scenarioName: state.scenario.currentScenarioInfo.name,\n            smsTemplate: state.scenario.smsTemplate,\n            tagging: state.scenario.crmCode + '>Intimation Request>' + resolution,\n            prospectNumberCircle: prospectNumberCircle,\n            transactionId: state.scenario.scenarioStatus.transactionId\n        }\n        dispatch(tagFTRRequest(reqData, DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_FTR_TAGGING));\n    }\n}\nexport const disableScenarioSearch = () => ({\n    type: ScenarioActionType.DISABLE_SCENARIO_SEARCH\n});\n\nexport const enableScenarioSearch = () => ({\n    type: ScenarioActionType.ENABLE_SCENARIO_SEARCH\n});\n\nexport const handleFeatureLink = featureName => dispatch => {\n    switch (featureName) {\n        case 'billCompare': {\n            dispatch(switchHomeTab(TabConstant.HOME_BILL_COMPARE_TAB));\n            break;\n        }\n        default: {\n\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}