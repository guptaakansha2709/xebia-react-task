{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/home/sr-details/lsi-ping-status/lsi-ping-status.smart.js\";\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport styles from './lsi-ping-status.style';\nimport { Grid } from '@material-ui/core';\nimport { updateLsiPingStatusValue, fetchLsiPingStatusData, openSnackbarRequestForCopiedToClipboard } from '../../../../actions/lsi-ping-status.action';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport AppLoader from '../../../common/AppLoader';\nimport CopyIcon from \"../../../../assets/images/copy.svg\";\nimport EditIcon from '@material-ui/icons/Edit';\nimport Tooltips from '../../../common/tooltip/tooltip.dumb';\n\nvar LsiPingStatus =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LsiPingStatus, _Component);\n\n  function LsiPingStatus() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LsiPingStatus);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LsiPingStatus)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleChange = function (evt) {\n      _this.props.updateLsiPingStatusValue(evt.target.value);\n    };\n\n    return _this;\n  }\n\n  _createClass(LsiPingStatus, [{\n    key: \"onRefreshButtonClicked\",\n    value: function onRefreshButtonClicked(e) {\n      this.props.fetchLsiPingStatusData();\n    }\n  }, {\n    key: \"copyToClipboard\",\n    value: function copyToClipboard(e) {\n      var textAreaElement = document.createElement(\"textarea\");\n      document.body.appendChild(textAreaElement);\n      textAreaElement.setAttribute(\"id\", \"text_area_element_copy_clipboard__id\");\n      document.getElementById(\"text_area_element_copy_clipboard__id\").value = this.props.LsiPingStatusTabData;\n      textAreaElement.select();\n      document.execCommand(\"copy\");\n      document.body.removeChild(textAreaElement);\n      this.props.openSnackbarRequestForCopiedToClipboard();\n    }\n  }, {\n    key: \"onSendNoteButtonClicked\",\n    value: function onSendNoteButtonClicked(e) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          LsiPingStatusTabData = _this$props.LsiPingStatusTabData,\n          Loader = _this$props.Loader;\n      if (Loader) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(AppLoader, {\n        className: \"color-green\",\n        cardLoader: Loader,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));else return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n        className: \"position-relative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.head + (LsiPingStatusTabData ? ' hidden' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"To get the RTR logs or ping status \", React.createElement(\"span\", {\n        className: \"color-blue cursor-pointer\",\n        onClick: function onClick(e) {\n          _this2.onRefreshButtonClicked(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"click here\")), React.createElement(\"div\", {\n        className: classes.icons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Tooltips, {\n        tooltipText: \"Copy Ping Data\",\n        position: this.tooltipPosition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: CopyIcon,\n        className: classes.copyIconStyle,\n        onClick: function onClick(e) {\n          _this2.copyToClipboard(e);\n        },\n        alt: \"Copy To Clipboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })), React.createElement(Tooltips, {\n        tooltipText: \"Fetch Ping Status\",\n        position: this.tooltipPosition,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(RefreshIcon, {\n        className: classes.refreshIconContainer,\n        color: \"primary\",\n        onClick: function onClick(e) {\n          _this2.onRefreshButtonClicked(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })))), React.createElement(Grid, {\n        item: true,\n        xs: 11,\n        style: {\n          height: 350,\n          overflow: 'scroll'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        className: classes.formControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 11,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, LsiPingStatusTabData)))));\n    }\n  }]);\n\n  return LsiPingStatus;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    LsiPingStatusTabData: state.LsiPingStatusTabData.LsiPingStatusApiResponse,\n    Loader: state.LsiPingStatusTabData.LsiPingStatusTabLoader // createNoteForm: state.SRDetailsTabApiInfo.createNoteForm,\n    // noteDetailsCharacterLimit: state.SRDetailsTabApiInfo.noteDetailsCharacterLimit,\n    // noteDescriptionCharacterLimit: state.SRDetailsTabApiInfo.noteDescriptionCharacterLimit\n\n  };\n};\n\nvar mapDispatchToProps = {\n  updateLsiPingStatusValue: updateLsiPingStatusValue,\n  fetchLsiPingStatusData: fetchLsiPingStatusData,\n  openSnackbarRequestForCopiedToClipboard: openSnackbarRequestForCopiedToClipboard // resetCreateNoteForm,\n  // createNewNote\n\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LsiPingStatus));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/home/sr-details/lsi-ping-status/lsi-ping-status.smart.js"],"names":["React","Component","withStyles","connect","styles","Grid","updateLsiPingStatusValue","fetchLsiPingStatusData","openSnackbarRequestForCopiedToClipboard","RefreshIcon","AppLoader","EditIcon","Tooltips","LsiPingStatus","handleChange","evt","props","target","value","e","textAreaElement","document","createElement","body","appendChild","setAttribute","getElementById","LsiPingStatusTabData","select","execCommand","removeChild","classes","Loader","head","onRefreshButtonClicked","icons","tooltipPosition","CopyIcon","copyIconStyle","copyToClipboard","refreshIconContainer","height","overflow","formControl","mapStateToProps","state","LsiPingStatusApiResponse","LsiPingStatusTabLoader","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport styles from './lsi-ping-status.style';\nimport { Grid } from '@material-ui/core';\nimport { updateLsiPingStatusValue, fetchLsiPingStatusData, openSnackbarRequestForCopiedToClipboard } from '../../../../actions/lsi-ping-status.action';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport AppLoader from '../../../common/AppLoader';\nimport CopyIcon from '../../../../assets/images/copy.svg';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Tooltips from '../../../common/tooltip/tooltip.dumb';\n\nclass LsiPingStatus extends Component {\n\n    handleChange = (evt) => {\n        this.props.updateLsiPingStatusValue(evt.target.value)\n    }\n\n    onRefreshButtonClicked(e) {\n        this.props.fetchLsiPingStatusData();\n    }\n\n    copyToClipboard(e) {\n        let textAreaElement = document.createElement(\"textarea\");\n\n        document.body.appendChild(textAreaElement);\n        textAreaElement.setAttribute(\"id\", \"text_area_element_copy_clipboard__id\");\n\n        document.getElementById(\"text_area_element_copy_clipboard__id\").value = this.props.LsiPingStatusTabData;\n        textAreaElement.select();\n        document.execCommand(\"copy\");\n        document.body.removeChild(textAreaElement);\n        this.props.openSnackbarRequestForCopiedToClipboard()\n    }\n\n    onSendNoteButtonClicked(e) {\n    }\n\n    render() {\n        const { classes, LsiPingStatusTabData, Loader } = this.props;\n\n        if (Loader)\n            return <div><AppLoader className=\"color-green\" cardLoader={Loader} /></div>\n        else\n            return (\n                <>\n                    <div className=\"position-relative\">\n                        <div className={classes.head + (LsiPingStatusTabData ? ' hidden' : '')}>To get the RTR logs or ping status <span className={\"color-blue cursor-pointer\"} onClick={(e) => { this.onRefreshButtonClicked(e) }}>click here</span></div>\n                        <div className={classes.icons}>\n                            <Tooltips tooltipText={\"Copy Ping Data\"} position={this.tooltipPosition}>\n                                <img src={CopyIcon} className={classes.copyIconStyle} onClick={(e) => { this.copyToClipboard(e) }} alt=\"Copy To Clipboard\" />\n                            </Tooltips>\n                            <Tooltips tooltipText={\"Fetch Ping Status\"} position={this.tooltipPosition}>\n                                <RefreshIcon className={classes.refreshIconContainer} color=\"primary\" onClick={(e) => { this.onRefreshButtonClicked(e) }} />\n                            </Tooltips>\n                            {/* <Tooltips tooltipText={\"Send Ping Data in SR Notes\"} position={this.tooltipPosition}>\n                            <EditIcon className={\"color-blue cursor-pointer \" + classes.editIcon} onClick={ (e) => {this.onSendNoteButtonClicked(e)}}></EditIcon> \n                        </Tooltips> */}\n                        </div>\n                    </div>\n\n\n                    <Grid item xs={11} style={{ height: 350, overflow: 'scroll' }}>\n                        <Grid container className={classes.formControl}>\n                            <Grid item xs={11}>\n                                <pre>{LsiPingStatusTabData}</pre>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        LsiPingStatusTabData: state.LsiPingStatusTabData.LsiPingStatusApiResponse,\n        Loader: state.LsiPingStatusTabData.LsiPingStatusTabLoader\n        // createNoteForm: state.SRDetailsTabApiInfo.createNoteForm,\n        // noteDetailsCharacterLimit: state.SRDetailsTabApiInfo.noteDetailsCharacterLimit,\n        // noteDescriptionCharacterLimit: state.SRDetailsTabApiInfo.noteDescriptionCharacterLimit\n    };\n};\n\nconst mapDispatchToProps = {\n    updateLsiPingStatusValue,\n    fetchLsiPingStatusData,\n    openSnackbarRequestForCopiedToClipboard\n    // resetCreateNoteForm,\n    // createNewNote\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LsiPingStatus));"]},"metadata":{},"sourceType":"module"}