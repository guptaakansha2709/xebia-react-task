{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/tooltip/tooltip.dumb.js\";\nimport React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport styles from './tooltip.style';\n\nvar Tooltips =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tooltips, _React$Component);\n\n  function Tooltips() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tooltips);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tooltips)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      arrowRef: null\n    };\n\n    _this.handleArrowRef = function (node) {\n      _this.setState({\n        arrowRef: node\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Tooltips, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          tooltipText = _this$props.tooltipText,\n          position = _this$props.position;\n      var placement = position || 'bottom';\n      return React.createElement(Tooltip, {\n        placement: placement,\n        title: React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24\n          },\n          __self: this\n        }, tooltipText, React.createElement(\"span\", {\n          className: classes.arrow,\n          ref: this.handleArrowRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        })),\n        classes: {\n          tooltip: classes.bootstrapTooltip,\n          popper: classes.arrowPopper,\n          tooltipPlacementLeft: classes.bootstrapPlacementLeft,\n          tooltipPlacementRight: classes.bootstrapPlacementRight,\n          tooltipPlacementTop: classes.bootstrapPlacementTop,\n          tooltipPlacementBottom: classes.bootstrapPlacementBottom\n        },\n        PopperProps: {\n          popperOptions: {\n            modifiers: {\n              arrow: {\n                enabled: Boolean(this.state.arrowRef),\n                element: this.state.arrowRef\n              }\n            }\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return Tooltips;\n}(React.Component);\n\nexport default withStyles(styles)(Tooltips);","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/tooltip/tooltip.dumb.js"],"names":["React","withStyles","Tooltip","styles","Tooltips","state","arrowRef","handleArrowRef","node","setState","props","classes","tooltipText","position","placement","arrow","tooltip","bootstrapTooltip","popper","arrowPopper","tooltipPlacementLeft","bootstrapPlacementLeft","tooltipPlacementRight","bootstrapPlacementRight","tooltipPlacementTop","bootstrapPlacementTop","tooltipPlacementBottom","bootstrapPlacementBottom","popperOptions","modifiers","enabled","Boolean","element","children","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;UAIRC,c,GAAiB,UAAAC,IAAI,EAAI;AACvB,YAAKC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAEE;AADE,OAAd;AAGD,K;;;;;;;6BAEQ;AAAA,wBACoC,KAAKE,KADzC;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,WADV,eACUA,WADV;AAAA,UACuBC,QADvB,eACuBA,QADvB;AAEP,UAAMC,SAAS,GAAGD,QAAQ,IAAI,QAA9B;AACA,aACE,oBAAC,OAAD;AACE,QAAA,SAAS,EAAEC,SADb;AAEE,QAAA,KAAK,EACH,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGF,WADH,EAEE;AAAM,UAAA,SAAS,EAAED,OAAO,CAACI,KAAzB;AAAgC,UAAA,GAAG,EAAE,KAAKR,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CAHJ;AAQE,QAAA,OAAO,EAAE;AACPS,UAAAA,OAAO,EAAEL,OAAO,CAACM,gBADV;AAEPC,UAAAA,MAAM,EAAEP,OAAO,CAACQ,WAFT;AAGPC,UAAAA,oBAAoB,EAAET,OAAO,CAACU,sBAHvB;AAIPC,UAAAA,qBAAqB,EAAEX,OAAO,CAACY,uBAJxB;AAKPC,UAAAA,mBAAmB,EAAEb,OAAO,CAACc,qBALtB;AAMPC,UAAAA,sBAAsB,EAAEf,OAAO,CAACgB;AANzB,SARX;AAgBE,QAAA,WAAW,EAAE;AACXC,UAAAA,aAAa,EAAE;AACbC,YAAAA,SAAS,EAAE;AACTd,cAAAA,KAAK,EAAE;AACLe,gBAAAA,OAAO,EAAEC,OAAO,CAAC,KAAK1B,KAAL,CAAWC,QAAZ,CADX;AAEL0B,gBAAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWC;AAFf;AADE;AADE;AADJ,SAhBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA2BG,KAAKI,KAAL,CAAWuB,QA3Bd,CADF;AA+BD;;;;EA7CoBjC,KAAK,CAACkC,S;;AAgD7B,eAAejC,UAAU,CAACE,MAAD,CAAV,CAAmBC,QAAnB,CAAf","sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport styles from './tooltip.style';\n\nclass Tooltips extends React.Component {\n  state = {\n    arrowRef: null,\n  };\n\n  handleArrowRef = node => {\n    this.setState({\n      arrowRef: node,\n    });\n  };\n\n  render() {\n    const { classes, tooltipText, position } = this.props;\n    const placement = position || 'bottom';\n    return (\n      <Tooltip\n        placement={placement}\n        title={\n          <React.Fragment>\n            {tooltipText}\n            <span className={classes.arrow} ref={this.handleArrowRef} />\n          </React.Fragment>\n        }\n        classes={{\n          tooltip: classes.bootstrapTooltip,\n          popper: classes.arrowPopper,\n          tooltipPlacementLeft: classes.bootstrapPlacementLeft,\n          tooltipPlacementRight: classes.bootstrapPlacementRight,\n          tooltipPlacementTop: classes.bootstrapPlacementTop,\n          tooltipPlacementBottom: classes.bootstrapPlacementBottom,\n        }}\n        PopperProps={{\n          popperOptions: {\n            modifiers: {\n              arrow: {\n                enabled: Boolean(this.state.arrowRef),\n                element: this.state.arrowRef,\n              },\n            },\n          },\n        }}\n      >\n        {this.props.children}\n      </Tooltip>\n    );\n  }\n}\n\nexport default withStyles(styles)(Tooltips);"]},"metadata":{},"sourceType":"module"}