{"ast":null,"code":"import { SmsDialogActionType } from \"../actiontype/sms-dialog.actiontype\";\nimport SmsDialogService from '../services/sms-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { closeSmsDialog } from \"./dialog.action\";\nimport SMSCategory from \"../constants/sms-category.enum\";\nvar snackbarMessage = {};\nexport var searchLocationDialogData = function searchLocationDialogData() {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch(clearSelectedLocations());\n    dispatch(searchLocationApiLoading());\n    dispatch(showLoader());\n    var searchQuery = state.smsDialogInfo.updatedLocationSearchQuery;\n\n    if (!searchQuery || searchQuery && searchQuery.trim() === '') {\n      snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_LOCATION_SEARCH_QUERY_ENTERED;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }\n\n    SmsDialogService.fetchLocationApi(state.smsDialogInfo.updatedLocationSearchQuery).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(searchLocationApiSuccess(response.data.result));\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(searchLocationApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nvar clearSelectedLocations = function clearSelectedLocations() {\n  return {\n    type: SmsDialogActionType.RESET_SELECTED_LOCATIONS,\n    payload: null\n  };\n};\n\nexport var addLocation = function addLocation(location) {\n  return {\n    type: SmsDialogActionType.ADD_LOCATION,\n    payload: location\n  };\n};\nexport var removeLocation = function removeLocation(location) {\n  return {\n    type: SmsDialogActionType.REMOVE_LOCATION,\n    payload: location\n  };\n};\nexport var closeAndResetSMSDialog = function closeAndResetSMSDialog() {\n  return function (dispatch) {\n    dispatch(closeSmsDialog());\n    dispatch(resetSMSDialog());\n  };\n};\n\nvar resetSMSDialog = function resetSMSDialog() {\n  return {\n    type: SmsDialogActionType.RESET_SMS_DIALOG,\n    payload: null\n  };\n};\n\nexport var submitSmsDialogdata = function submitSmsDialogdata() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.smsDialogInfo.selectedSMSCategory === '') {\n      snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_CATEGORY_SELECTED_ERROR;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n      return;\n    } else if (state.smsDialogInfo.selectedSMSCategory === SMSCategory.AIRTEL_STORE) {\n      if (state.smsDialogInfo.selectedLocations.length === 0) {\n        snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_LOCATIONS_SELECTED_ERROR;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n      }\n\n      dispatch(submitAirtelStoreSMSData());\n    } else if (state.smsDialogInfo.selectedSMSCategory === SMSCategory.SELF_CARE) {\n      if (state.smsDialogInfo.selectedSelfCareMsgs.length === 0) {\n        snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_SELF_CARE_MSG_SELECTED_ERROR;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n      }\n\n      dispatch(submitSelfCareMessagesDialogdata());\n    }\n  };\n};\nexport var submitAirtelStoreSMSData = function submitAirtelStoreSMSData() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var scenarioName = state.scenario.currentScenarioInfo.name;\n    dispatch(submitSmsDialogApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.submitSmsDialogApi(state.smsDialogInfo.selectedLocations, scenarioName).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(submitSmsDialogApiSuccess(response.data.result));\n\n        if (response.data.result) {\n          snackbarMessage = response.data.result;\n        } else {\n          snackbarMessage = SnackbarMessages.SMS_SUCCESS_MESSAGE;\n        }\n\n        dispatch(closeAndResetSMSDialog());\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(submitSmsDialogApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\nexport var selectSMSCategory = function selectSMSCategory(smsCategory) {\n  return {\n    type: SmsDialogActionType.SELECT_SMS_CATEGORY,\n    payload: smsCategory\n  };\n};\nexport var updateLocationSearchQuery = function updateLocationSearchQuery(locationSearchQuery) {\n  return {\n    type: SmsDialogActionType.UPDATE_LOCATION_SEARCH_QUERY,\n    payload: locationSearchQuery\n  };\n};\n\nfunction searchLocationApiLoading() {\n  return {\n    type: SmsDialogActionType.SEARCH_LOCATION_REQUEST\n  };\n}\n\nfunction searchLocationApiSuccess(response) {\n  return {\n    type: SmsDialogActionType.SEARCH_LOCATION_SUCCESS,\n    payload: response\n  };\n}\n\nfunction searchLocationApiFailure(error) {\n  return {\n    type: SmsDialogActionType.SEARCH_LOCATION_FAILURE,\n    payload: error\n  };\n}\n\nfunction submitSmsDialogApiLoading() {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_DIALOG_REQUEST\n  };\n}\n\nfunction submitSmsDialogApiSuccess(response) {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_DIALOG_SUCCESS,\n    payload: response\n  };\n}\n\nfunction submitSmsDialogApiFailure(error) {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_DIALOG_FAILURE,\n    payload: error\n  };\n}\n\nexport var submitSelfCareMessagesDialogdata = function submitSelfCareMessagesDialogdata() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var scenarioName = state.scenario.currentScenarioInfo.name;\n    dispatch(submitSmsSelfCareDialogApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.submitSmsSelfCareMsgsApi(state.smsDialogInfo.selectedSelfCareMsgs, scenarioName).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(submitSmsSelfCareDialogApiSuccess(response.data.result));\n\n        if (response.data.result) {\n          snackbarMessage = response.data.result;\n        } else {\n          snackbarMessage = SnackbarMessages.SMS_SUCCESS_MESSAGE;\n        }\n\n        dispatch(closeAndResetSMSDialog());\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(submitSmsSelfCareDialogApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nfunction submitSmsSelfCareDialogApiLoading() {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_REQUEST\n  };\n}\n\nfunction submitSmsSelfCareDialogApiSuccess(response) {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_SUCCESS,\n    payload: response\n  };\n}\n\nfunction submitSmsSelfCareDialogApiFailure(error) {\n  return {\n    type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_FAILURE,\n    payload: error\n  };\n}\n\nexport var getSelfCareMessages = function getSelfCareMessages(scenarioName) {\n  return function (dispatch, getState) {\n    // const state = getState();\n    // const scenarioName = state.scenario.currentScenarioInfo.name;\n    dispatch(selfCareMessagesApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.fetchSelfCareMessagesApi(scenarioName).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(selfCareMessagesApiSuccess(response.data.result));\n      } else {\n        snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_SELF_CARE_MESSAGES;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n      }\n    }, function (error) {\n      dispatch(selfCareMessagesApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nfunction selfCareMessagesApiLoading() {\n  return {\n    type: SmsDialogActionType.SMS_SELF_CARE_MSGS_REQUEST\n  };\n}\n\nfunction selfCareMessagesApiSuccess(response) {\n  return {\n    type: SmsDialogActionType.SMS_SELF_CARE_MSGS_SUCCESS,\n    payload: response\n  };\n}\n\nfunction selfCareMessagesApiFailure(error) {\n  return {\n    type: SmsDialogActionType.SMS_SELF_CARE_MSGS_FAILURE,\n    payload: error\n  };\n}\n\nexport var addSelfCareMsg = function addSelfCareMsg(selfcareMsg) {\n  return {\n    type: SmsDialogActionType.ADD_SELF_CARE_MSG,\n    payload: selfcareMsg\n  };\n};\nexport var removeSelfCareMsg = function removeSelfCareMsg(selfcareMsg) {\n  return {\n    type: SmsDialogActionType.REMOVE_SELF_CARE_MSG,\n    payload: selfcareMsg\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/sms-dialog.action.js"],"names":["SmsDialogActionType","SmsDialogService","openSnackbarRequest","showLoader","hideLoader","SnackbarMessages","closeSmsDialog","SMSCategory","snackbarMessage","searchLocationDialogData","dispatch","getState","state","clearSelectedLocations","searchLocationApiLoading","searchQuery","smsDialogInfo","updatedLocationSearchQuery","trim","SMS_DIALOG_NO_LOCATION_SEARCH_QUERY_ENTERED","fetchLocationApi","then","response","data","result","searchLocationApiSuccess","DEFAULT_ERROR_MSG","error","searchLocationApiFailure","type","RESET_SELECTED_LOCATIONS","payload","addLocation","location","ADD_LOCATION","removeLocation","REMOVE_LOCATION","closeAndResetSMSDialog","resetSMSDialog","RESET_SMS_DIALOG","submitSmsDialogdata","selectedSMSCategory","SMS_DIALOG_NO_CATEGORY_SELECTED_ERROR","AIRTEL_STORE","selectedLocations","length","SMS_DIALOG_NO_LOCATIONS_SELECTED_ERROR","submitAirtelStoreSMSData","SELF_CARE","selectedSelfCareMsgs","SMS_DIALOG_NO_SELF_CARE_MSG_SELECTED_ERROR","submitSelfCareMessagesDialogdata","scenarioName","scenario","currentScenarioInfo","name","submitSmsDialogApiLoading","submitSmsDialogApi","submitSmsDialogApiSuccess","SMS_SUCCESS_MESSAGE","submitSmsDialogApiFailure","selectSMSCategory","smsCategory","SELECT_SMS_CATEGORY","updateLocationSearchQuery","locationSearchQuery","UPDATE_LOCATION_SEARCH_QUERY","SEARCH_LOCATION_REQUEST","SEARCH_LOCATION_SUCCESS","SEARCH_LOCATION_FAILURE","SUBMIT_SMS_DIALOG_REQUEST","SUBMIT_SMS_DIALOG_SUCCESS","SUBMIT_SMS_DIALOG_FAILURE","submitSmsSelfCareDialogApiLoading","submitSmsSelfCareMsgsApi","submitSmsSelfCareDialogApiSuccess","submitSmsSelfCareDialogApiFailure","SUBMIT_SMS_SELFCARE_MSGS_REQUEST","SUBMIT_SMS_SELFCARE_MSGS_SUCCESS","SUBMIT_SMS_SELFCARE_MSGS_FAILURE","getSelfCareMessages","selfCareMessagesApiLoading","fetchSelfCareMessagesApi","selfCareMessagesApiSuccess","SMS_DIALOG_NO_SELF_CARE_MESSAGES","selfCareMessagesApiFailure","SMS_SELF_CARE_MSGS_REQUEST","SMS_SELF_CARE_MSGS_SUCCESS","SMS_SELF_CARE_MSGS_FAILURE","addSelfCareMsg","selfcareMsg","ADD_SELF_CARE_MSG","removeSelfCareMsg","REMOVE_SELF_CARE_MSG"],"mappings":"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","sourcesContent":["import { SmsDialogActionType } from \"../actiontype/sms-dialog.actiontype\";\nimport SmsDialogService from '../services/sms-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { closeSmsDialog } from \"./dialog.action\";\nimport SMSCategory from \"../constants/sms-category.enum\";\n\nlet snackbarMessage = {}\nexport const searchLocationDialogData = () => (dispatch, getState) => {\n    const state = getState();\n    dispatch(clearSelectedLocations());\n    dispatch(searchLocationApiLoading());\n    dispatch(showLoader());\n    const searchQuery = state.smsDialogInfo.updatedLocationSearchQuery;\n    if (!searchQuery || (searchQuery && searchQuery.trim() === '')) {\n        snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_LOCATION_SEARCH_QUERY_ENTERED;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n    }\n    SmsDialogService.fetchLocationApi(state.smsDialogInfo.updatedLocationSearchQuery).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                dispatch(searchLocationApiSuccess(response.data.result));\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(searchLocationApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\n\nconst clearSelectedLocations = () => (\n    {\n        type: SmsDialogActionType.RESET_SELECTED_LOCATIONS,\n        payload: null\n    }\n)\n\nexport const addLocation = location => (\n    {\n        type: SmsDialogActionType.ADD_LOCATION,\n        payload: location\n    }\n)\n\nexport const removeLocation = location => (\n    {\n        type: SmsDialogActionType.REMOVE_LOCATION,\n        payload: location\n    }\n)\n\nexport const closeAndResetSMSDialog = () => dispatch => {\n    dispatch(closeSmsDialog());\n    dispatch(resetSMSDialog());\n}\n\nconst resetSMSDialog = () => (\n    {\n        type: SmsDialogActionType.RESET_SMS_DIALOG,\n        payload: null\n    }\n)\n\n\nexport const submitSmsDialogdata = () => (dispatch, getState) => {\n    const state = getState();\n\n    if (state.smsDialogInfo.selectedSMSCategory === '') {\n        snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_CATEGORY_SELECTED_ERROR\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n    }\n\n    else if (state.smsDialogInfo.selectedSMSCategory === SMSCategory.AIRTEL_STORE) {\n        if (state.smsDialogInfo.selectedLocations.length === 0) {\n            snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_LOCATIONS_SELECTED_ERROR\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n            return;\n        }\n        dispatch(submitAirtelStoreSMSData());\n    }\n    else if (state.smsDialogInfo.selectedSMSCategory === SMSCategory.SELF_CARE) {\n        if (state.smsDialogInfo.selectedSelfCareMsgs.length === 0) {\n            snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_SELF_CARE_MSG_SELECTED_ERROR\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n            return;\n        }\n        dispatch(submitSelfCareMessagesDialogdata());\n    }\n\n}\n\nexport const submitAirtelStoreSMSData = () => (dispatch, getState) => {\n    const state = getState();\n    const scenarioName = state.scenario.currentScenarioInfo.name;\n    dispatch(submitSmsDialogApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.submitSmsDialogApi(state.smsDialogInfo.selectedLocations, scenarioName).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                dispatch(submitSmsDialogApiSuccess(response.data.result));\n                if (response.data.result) {\n                    snackbarMessage = response.data.result;\n                }\n                else {\n                    snackbarMessage = SnackbarMessages.SMS_SUCCESS_MESSAGE;\n                }\n                dispatch(closeAndResetSMSDialog());\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(submitSmsDialogApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\n\nexport const selectSMSCategory = smsCategory => ({\n    type: SmsDialogActionType.SELECT_SMS_CATEGORY,\n    payload: smsCategory\n})\n\nexport const updateLocationSearchQuery = locationSearchQuery => ({\n    type: SmsDialogActionType.UPDATE_LOCATION_SEARCH_QUERY,\n    payload: locationSearchQuery\n})\n\n\nfunction searchLocationApiLoading() { return { type: SmsDialogActionType.SEARCH_LOCATION_REQUEST } }\nfunction searchLocationApiSuccess(response) { return { type: SmsDialogActionType.SEARCH_LOCATION_SUCCESS, payload: response } }\nfunction searchLocationApiFailure(error) { return { type: SmsDialogActionType.SEARCH_LOCATION_FAILURE, payload: error } }\nfunction submitSmsDialogApiLoading() { return { type: SmsDialogActionType.SUBMIT_SMS_DIALOG_REQUEST } }\nfunction submitSmsDialogApiSuccess(response) { return { type: SmsDialogActionType.SUBMIT_SMS_DIALOG_SUCCESS, payload: response } }\nfunction submitSmsDialogApiFailure(error) { return { type: SmsDialogActionType.SUBMIT_SMS_DIALOG_FAILURE, payload: error } }\n\nexport const submitSelfCareMessagesDialogdata = () => (dispatch, getState) => {\n    const state = getState();\n    const scenarioName = state.scenario.currentScenarioInfo.name;\n\n    dispatch(submitSmsSelfCareDialogApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.submitSmsSelfCareMsgsApi(state.smsDialogInfo.selectedSelfCareMsgs, scenarioName).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                dispatch(submitSmsSelfCareDialogApiSuccess(response.data.result));\n                if (response.data.result) {\n                    snackbarMessage = response.data.result;\n                }\n                else {\n                    snackbarMessage = SnackbarMessages.SMS_SUCCESS_MESSAGE;\n                }\n                dispatch(closeAndResetSMSDialog());\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(submitSmsSelfCareDialogApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\nfunction submitSmsSelfCareDialogApiLoading() { return { type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_REQUEST } }\nfunction submitSmsSelfCareDialogApiSuccess(response) { return { type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_SUCCESS, payload: response } }\nfunction submitSmsSelfCareDialogApiFailure(error) { return { type: SmsDialogActionType.SUBMIT_SMS_SELFCARE_MSGS_FAILURE, payload: error } }\n\nexport const getSelfCareMessages = (scenarioName) => (dispatch, getState) => {\n    // const state = getState();\n    // const scenarioName = state.scenario.currentScenarioInfo.name;\n    dispatch(selfCareMessagesApiLoading());\n    dispatch(showLoader());\n    SmsDialogService.fetchSelfCareMessagesApi(scenarioName).then(\n        response => {\n            dispatch(hideLoader());\n\n            if (response && response.data && response.data.result) {\n                dispatch(selfCareMessagesApiSuccess(response.data.result));\n            }\n            else {\n                snackbarMessage = SnackbarMessages.SMS_DIALOG_NO_SELF_CARE_MESSAGES;\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n            }\n        },\n        error => {\n            dispatch(selfCareMessagesApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\nfunction selfCareMessagesApiLoading() { return { type: SmsDialogActionType.SMS_SELF_CARE_MSGS_REQUEST } }\nfunction selfCareMessagesApiSuccess(response) { return { type: SmsDialogActionType.SMS_SELF_CARE_MSGS_SUCCESS, payload: response } }\nfunction selfCareMessagesApiFailure(error) { return { type: SmsDialogActionType.SMS_SELF_CARE_MSGS_FAILURE, payload: error } }\n\n\nexport const addSelfCareMsg = selfcareMsg => (\n    {\n        type: SmsDialogActionType.ADD_SELF_CARE_MSG,\n        payload: selfcareMsg\n    }\n)\n\nexport const removeSelfCareMsg = selfcareMsg => (\n    {\n        type: SmsDialogActionType.REMOVE_SELF_CARE_MSG,\n        payload: selfcareMsg\n    }\n)\n"]},"metadata":{},"sourceType":"module"}