{"ast":null,"code":"import { LoginActionType } from \"../actiontype/login.actiontype\";\nimport LoginService from '../services/login.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from \"../services/cookie.service\";\nimport { authorizeUser, unauthorizeUser } from '../actions/authorization.actions';\nimport { resetState } from \"../actions/common.action\";\nimport ApiService from '../services/api.service';\nvar snackbarMessage = {};\nexport var fetchLoginData = function fetchLoginData(loginObj) {\n  return function (dispatch) {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n  };\n};\nexport var handleLogout = function handleLogout() {\n  return function (dispatch) {\n    dispatch(unauthorizeUser());\n    dispatch(resetState());\n    var token = CookieManagerService.getItem('AUTH_DETAILS');\n\n    if (!token) {\n      return;\n    }\n\n    ApiService.userLogout().then(function (response) {\n      snackbarMessage = SnackbarMessages.LOGOUT_SUCCESS;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }, function (error) {\n      if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n        if (error['response']['data'][\"error\"] === \"invalid_token\") {\n          snackbarMessage = \"Session Timed Out\";\n        } else {\n          snackbarMessage = error['response']['data']['error_description'];\n        }\n      } else {\n        snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n    CookieManagerService.clearCookie('AUTH_DETAILS');\n  };\n};\n\nfunction loginApiLoading() {\n  return {\n    type: LoginActionType.LOGIN_REQUEST\n  };\n}\n\nexport function loginApiSuccess(response) {\n  return {\n    type: LoginActionType.LOGIN_SUCCESS,\n    payload: response.data\n  };\n}\nexport function loginApiFailure(error) {\n  return {\n    type: LoginActionType.LOGIN_FAILURE,\n    payload: error\n  };\n}\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    dispatch({\n      type: LoginActionType.LOGOUT\n    });\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/login.action.js"],"names":["LoginActionType","LoginService","openSnackbarRequest","SnackbarMessages","CookieManagerService","authorizeUser","unauthorizeUser","resetState","ApiService","snackbarMessage","fetchLoginData","loginObj","dispatch","loginApiLoading","handleLogout","token","getItem","userLogout","then","response","LOGOUT_SUCCESS","error","LOGIN_FAILURE","clearCookie","type","LOGIN_REQUEST","loginApiSuccess","LOGIN_SUCCESS","payload","data","loginApiFailure","logoutUser","LOGOUT"],"mappings":"AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,kCAA/C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,IAAIC,eAAe,GAAG,EAAtB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAClDA,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACAK,IAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR;AAEH,GAJqC;AAAA,CAA/B;AAKP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAM,UAAAF,QAAQ,EAAI;AAC1CA,IAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACAM,IAAAA,QAAQ,CAACL,UAAU,EAAX,CAAR;AACA,QAAMQ,KAAK,GAAGX,oBAAoB,CAACY,OAArB,CAA6B,cAA7B,CAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACR;AACH;;AAGDP,IAAAA,UAAU,CAACS,UAAX,GAAwBC,IAAxB,CACI,UAAAC,QAAQ,EAAI;AACRV,MAAAA,eAAe,GAAGN,gBAAgB,CAACiB,cAAnC;AACAR,MAAAA,QAAQ,CAACV,mBAAmB,CAAC,IAAD,EAAOO,eAAP,CAApB,CAAR;AACH,KAJL,EAKI,UAAAY,KAAK,EAAI;AACL,UAAIA,KAAK,IAAIA,KAAK,CAAC,UAAD,CAAd,IAA8BA,KAAK,CAAC,UAAD,CAAL,CAAkB,MAAlB,CAA9B,IAA2DA,KAAK,CAAC,UAAD,CAAL,CAAkB,MAAlB,EAA0B,mBAA1B,CAA/D,EAA+G;AAC3G,YAAIA,KAAK,CAAC,UAAD,CAAL,CAAkB,MAAlB,EAA0B,OAA1B,MAAuC,eAA3C,EAA4D;AACxDZ,UAAAA,eAAe,GAAG,mBAAlB;AACH,SAFD,MAEO;AACHA,UAAAA,eAAe,GAAGY,KAAK,CAAC,UAAD,CAAL,CAAkB,MAAlB,EAA0B,mBAA1B,CAAlB;AACH;AACJ,OAND,MAOK;AACDZ,QAAAA,eAAe,GAAGN,gBAAgB,CAACmB,aAAnC;AACH;;AACDV,MAAAA,QAAQ,CAACV,mBAAmB,CAAC,IAAD,EAAOO,eAAP,CAApB,CAAR;AACH,KAjBL;AAmBAL,IAAAA,oBAAoB,CAACmB,WAArB,CAAiC,cAAjC;AACH,GA7B2B;AAAA,CAArB;;AA+BP,SAASV,eAAT,GAA2B;AACvB,SAAO;AACHW,IAAAA,IAAI,EAAExB,eAAe,CAACyB;AADnB,GAAP;AAGH;;AACD,OAAO,SAASC,eAAT,CAAyBP,QAAzB,EAAmC;AACtC,SAAO;AACHK,IAAAA,IAAI,EAAExB,eAAe,CAAC2B,aADnB;AAEHC,IAAAA,OAAO,EAAET,QAAQ,CAACU;AAFf,GAAP;AAIH;AACD,OAAO,SAASC,eAAT,CAAyBT,KAAzB,EAAgC;AACnC,SAAO;AACHG,IAAAA,IAAI,EAAExB,eAAe,CAACsB,aADnB;AAEHM,IAAAA,OAAO,EAAEP;AAFN,GAAP;AAIH;AAGD,OAAO,IAAMU,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAnB,QAAQ,EAAI;AACxCA,IAAAA,QAAQ,CAAC;AACLY,MAAAA,IAAI,EAAExB,eAAe,CAACgC;AADjB,KAAD,CAAR;AAGH,GAJyB;AAAA,CAAnB","sourcesContent":["import { LoginActionType } from \"../actiontype/login.actiontype\";\nimport LoginService from '../services/login.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from \"../services/cookie.service\"\nimport { authorizeUser, unauthorizeUser } from '../actions/authorization.actions'\nimport { resetState } from \"../actions/common.action\";\nimport ApiService from '../services/api.service';\n\nlet snackbarMessage = {}\n\nexport const fetchLoginData = loginObj => dispatch => {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n\n}\nexport const handleLogout = () => dispatch => {\n    dispatch(unauthorizeUser());\n    dispatch(resetState());\n    const token = CookieManagerService.getItem('AUTH_DETAILS');\n    if (!token) {\n        return;\n    }\n\n\n    ApiService.userLogout().then(\n        response => {\n            snackbarMessage = SnackbarMessages.LOGOUT_SUCCESS;\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        },\n        error => {\n            if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n                if (error['response']['data'][\"error\"] === \"invalid_token\") {\n                    snackbarMessage = \"Session Timed Out\";\n                } else {\n                    snackbarMessage = error['response']['data']['error_description'];\n                }\n            }\n            else {\n                snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n    CookieManagerService.clearCookie('AUTH_DETAILS')\n}\n\nfunction loginApiLoading() {\n    return {\n        type: LoginActionType.LOGIN_REQUEST\n    }\n}\nexport function loginApiSuccess(response) {\n    return {\n        type: LoginActionType.LOGIN_SUCCESS,\n        payload: response.data\n    }\n}\nexport function loginApiFailure(error) {\n    return {\n        type: LoginActionType.LOGIN_FAILURE,\n        payload: error\n    }\n}\n\n\nexport const logoutUser = () => dispatch => {\n    dispatch({\n        type: LoginActionType.LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}