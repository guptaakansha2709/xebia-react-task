{"ast":null,"code":"import _objectWithoutProperties from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/scenario/leap/leap-auto-complete/leap-auto-complete.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './leap-auto-complete.style';\nimport ArrowDropDown from '@material-ui/icons/ArrowDropDown';\nimport { Button, List, ListItem, ListItemText, Divider, TableRow, TableCell, Table, TableHead, TableBody, Radio } from '@material-ui/core';\nimport { fetchLeapDetailsRequest as _fetchLeapDetailsRequest, verifyCustomerLocation as _verifyCustomerLocation, onFocusLeapAddressInputFieldHandler as _onFocusLeapAddressInputFieldHandler, generateMapMyIndiaToken as _generateMapMyIndiaToken, resetLeap as _resetLeap, selectLeapNetworkDataHandler as _selectLeapNetworkDataHandler } from '../../../../actions/leap.action';\nimport { updateCRMCode as _updateCRMCode } from '../../../../actions/scenario.action';\nimport AutoComplete from '../../../../components/common/auto-complete/auto-complete.dumb';\nimport { debounce } from 'lodash';\nimport MapMyIndiaService from '../../../../services/map-my-india.service';\nimport deburr from 'lodash/deburr';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { openSnackbarRequest as _openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport Config from '../../../../config/config';\nimport { AppConstant } from '../../../../constants/app.constant';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\n\nvar LeapAutoComplete =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LeapAutoComplete, _Component);\n\n  function LeapAutoComplete(props) {\n    var _this;\n\n    _classCallCheck(this, LeapAutoComplete);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LeapAutoComplete).call(this, props));\n    _this.correspondenceAddress = \"\";\n\n    _this.onChangeLeapAddress = function (name) {\n      return function (event, _ref) {\n        var newValue = _ref.newValue,\n            method = _ref.method;\n\n        if (newValue !== undefined) {\n          _this.props.resetLeap(null);\n\n          _this.setState({\n            leapAddress: newValue,\n            leapAddressList: []\n          });\n        }\n      };\n    };\n\n    _this.useMapMyIndiaAutocomplete = function (name) {\n      return function (event, _ref2) {\n        var newValue = _ref2.newValue,\n            method = _ref2.method;\n\n        if (newValue !== undefined) {\n          _this.props.resetLeap(null);\n\n          _this.setState({\n            leapAddress: newValue,\n            leapAddressList: []\n          });\n\n          if (method === 'type') {\n            _this.mapMyIndiaTokenRequest();\n          }\n        }\n      };\n    };\n\n    _this.useGoogleMapAutocomplete = function (name) {\n      return function (event, _ref3) {\n        var newValue = _ref3.newValue,\n            method = _ref3.method;\n\n        if (newValue !== undefined) {\n          _this.props.resetLeap(null);\n\n          _this.setState({\n            leapAddress: newValue,\n            leapAddressList: []\n          });\n\n          if (method === 'type') {\n            _this.googleMapsAutocompleteRequest();\n          }\n        }\n      };\n    };\n\n    _this.googleMapsAutocompleteRequest = debounce(function () {\n      var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var googleAutocomplete = new window.google.maps.places.Autocomplete(document.getElementById('googleAutoCompleteForLeap'), {\n        types: ['geocode'],\n        componentRestrictions: {\n          country: 'in'\n        }\n      });\n      window.google.maps.event.addListener(googleAutocomplete, 'place_changed', function () {\n        var place = googleAutocomplete.getPlace();\n        var leapAddress = self.state.leapAddress;\n        leapAddress = place && place.formatted_address ? place.formatted_address : leapAddress;\n        self.setState({\n          leapAddress: leapAddress\n        });\n        self.props.resetLeap(null);\n      });\n    }, 500);\n    _this.mapMyIndiaFindLoactionRequest = debounce(function () {\n      if (_this.state.leapAddress) {\n        MapMyIndiaService.searchPlace(_this.state.leapAddress).then(function (response) {\n          if (response && response.data && response.data.suggestedLocations && response.data.suggestedLocations.length) {\n            var locations = response.data.suggestedLocations;\n\n            for (var j = 0; j < locations.length; j++) {\n              locations[j][\"name\"] = locations[j][\"placeName\"] + \", \" + locations[j][\"placeAddress\"];\n            }\n\n            _this.setState({\n              leapAddressList: locations\n            });\n          }\n        }, function (error) {\n          _this.props.openSnackbarRequest(error);\n        });\n      }\n    }, 500);\n\n    _this.handleSuggestionsFetchRequested = function (_ref4) {\n      var value = _ref4.value;\n      var inputValue = deburr(value.trim()).toLowerCase();\n      var inputLength = inputValue.length;\n      return inputLength === 0 ? [] : _this.props.suggestions;\n    };\n\n    _this.handleSuggestionsClearRequested = function () {// this.setState({suggestions: []});\n    };\n\n    _this.selectNetworkData = function (item, id) {\n      _this.props.selectLeapNetworkDataHandler(item, id);\n    };\n\n    var customerInfo = props.customerInfo;\n    _this.correspondenceAddress = customerInfo && customerInfo.address && customerInfo.address.correspondence ? customerInfo.address.correspondence : \"\";\n    _this.state = {\n      showAddressList: false,\n      leapAddress: _this.correspondenceAddress,\n      isAddressFieldDisabled: true,\n      leapAddressList: []\n    };\n    _this.toggleList = _this.toggleList.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmitLeapAddress = _this.onSubmitLeapAddress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onVerifyLeapAddress = _this.onVerifyLeapAddress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onFocusLeapAddressInputField = _this.onFocusLeapAddressInputField.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderSuggestion = _this.renderSuggestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getSuggestionValue = _this.getSuggestionValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSuggestionsFetchRequested = _this.handleSuggestionsFetchRequested.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.renderInputComponent = _this.renderInputComponent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSuggestionSelected = _this.onSuggestionSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.isChecked = _this.isChecked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LeapAutoComplete, [{\n    key: \"toggleList\",\n    value: function toggleList() {\n      var showAddressList = this.state.showAddressList;\n      this.setState({\n        showAddressList: !showAddressList\n      });\n    }\n  }, {\n    key: \"onAddressSelection\",\n    value: function onAddressSelection(val) {\n      if (val !== this.state.leapAddress) {\n        this.props.resetLeap(null);\n      }\n\n      if (val !== 'Other') {\n        this.setState({\n          leapAddress: val,\n          isAddressFieldDisabled: true\n        });\n      } else {\n        this.setState({\n          leapAddress: '',\n          isAddressFieldDisabled: false\n        });\n      }\n\n      this.toggleList();\n    }\n  }, {\n    key: \"onSubmitLeapAddress\",\n    value: function onSubmitLeapAddress() {\n      var leapAddress = this.state.leapAddress;\n\n      if (leapAddress) {\n        this.props.fetchLeapDetailsRequest(leapAddress);\n      } else {\n        this.props.openSnackbarRequest(null, SnackbarMessages.PROBLEMATIC_ADDRESS_NOT_FOUND);\n      }\n    }\n  }, {\n    key: \"onVerifyLeapAddress\",\n    value: function onVerifyLeapAddress() {\n      var leapAddress = this.state.leapAddress;\n\n      if (leapAddress) {\n        this.props.verifyCustomerLocation(leapAddress);\n      } else {\n        this.props.openSnackbarRequest(null, SnackbarMessages.PROBLEMATIC_ADDRESS_NOT_FOUND);\n      }\n    }\n  }, {\n    key: \"getLeapAutoCompleteHandler\",\n    value: function getLeapAutoCompleteHandler() {\n      switch (Config.leapAutocompleteOrigin) {\n        case AppConstant.MAP_MY_INDIA:\n          return this.useMapMyIndiaAutocomplete;\n\n        case AppConstant.GOOGLE_MAP:\n          return this.useGoogleMapAutocomplete;\n\n        default:\n          return this.onChangeLeapAddress;\n      }\n    }\n  }, {\n    key: \"mapMyIndiaTokenRequest\",\n    value: function mapMyIndiaTokenRequest() {\n      var _this2 = this;\n\n      this.props.generateMapMyIndiaToken().then(function () {\n        _this2.mapMyIndiaFindLoactionRequest();\n      }).catch(function (err) {\n        _this2.props.openSnackbarRequest(err);\n      });\n    }\n  }, {\n    key: \"onFocusLeapAddressInputField\",\n    value: function onFocusLeapAddressInputField() {\n      this.props.onFocusLeapAddressInputFieldHandler();\n    }\n  }, {\n    key: \"renderInputComponent\",\n    value: function renderInputComponent(inputProps) {\n      var classes = inputProps.classes,\n          _inputProps$inputRef = inputProps.inputRef,\n          _inputRef = _inputProps$inputRef === void 0 ? function () {} : _inputProps$inputRef,\n          ref = inputProps.ref,\n          other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n      return React.createElement(TextField, Object.assign({\n        fullWidth: true,\n        InputProps: {\n          inputRef: function inputRef(node) {\n            ref(node);\n\n            _inputRef(node);\n          },\n          classes: {\n            input: classes.input\n          }\n        }\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderSuggestion\",\n    value: function renderSuggestion(suggestion, _ref5) {\n      var query = _ref5.query,\n          isHighlighted = _ref5.isHighlighted;\n      var matches = match(suggestion.name, query);\n      var parts = parse(suggestion.name, matches);\n      return React.createElement(MenuItem, {\n        selected: isHighlighted,\n        component: \"div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, parts.map(function (part, index) {\n        return part.highlight ? React.createElement(\"span\", {\n          key: String(index),\n          style: {\n            fontWeight: 600\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208\n          },\n          __self: this\n        }, part.text) : React.createElement(\"strong\", {\n          key: String(index),\n          style: {\n            fontWeight: 300\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }, part.text);\n      })));\n    }\n  }, {\n    key: \"getSuggestionValue\",\n    value: function getSuggestionValue(suggestion) {\n      return suggestion[this.props.key];\n    }\n  }, {\n    key: \"onSuggestionSelected\",\n    value: function onSuggestionSelected(event, _ref6) {\n      var suggestion = _ref6.suggestion;\n      this.setState({\n        leapAddress: suggestion.name\n      });\n      this.props.resetLeap(null);\n    }\n  }, {\n    key: \"isChecked\",\n    value: function isChecked(key) {\n      var leapTableRowChecked = this.props.leapTableRowChecked;\n\n      if (leapTableRowChecked && leapTableRowChecked[key]) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          leapInfo = _this$props.leapInfo,\n          leapNetworkData = _this$props.leapNetworkData,\n          disableLeapTableCheckbox = _this$props.disableLeapTableCheckbox,\n          addressVerified = _this$props.addressVerified;\n      var _this$state = this.state,\n          leapAddress = _this$state.leapAddress,\n          isAddressFieldDisabled = _this$state.isAddressFieldDisabled,\n          leapAddressList = _this$state.leapAddressList,\n          showAddressList = _this$state.showAddressList;\n      var cdrType = leapInfo && leapInfo.cdrType ? leapInfo.cdrType.toLowerCase() : \"\";\n      var onLeapAddressChange = this.getLeapAutoCompleteHandler();\n      var leapAutocompleteInputProps = {\n        classes: classes,\n        label: \"Enter Problematic Address\",\n        value: leapAddress,\n        id: \"googleAutoCompleteForLeap\",\n        onChange: onLeapAddressChange(),\n        onFocus: this.onFocusLeapAddressInputField,\n        disabled: isAddressFieldDisabled\n      };\n      var autosuggestProps = {\n        renderInputComponent: this.renderInputComponent,\n        suggestions: leapAddressList,\n        onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n        getSuggestionValue: this.getSuggestionValue,\n        renderSuggestion: this.renderSuggestion,\n        onSuggestionSelected: this.onSuggestionSelected\n      };\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"position-relative pl-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.textField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(AutoComplete, {\n        inputProps: leapAutocompleteInputProps,\n        value: leapAddress,\n        autosuggestProps: autosuggestProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      })), React.createElement(ArrowDropDown, {\n        className: classes.arrow + \" color-blue\",\n        onClick: this.toggleList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(Button, {\n        className: classes.choiceBtn + (leapNetworkData.length && !addressVerified ? '' : ' hidden'),\n        onClick: this.onVerifyLeapAddress,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        className: classes.choiceBtn + (leapNetworkData.length && addressVerified && !disableLeapTableCheckbox ? '' : ' hidden'),\n        disabled: true,\n        variant: \"contained\",\n        size: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, \"Not Matched\"), React.createElement(Button, {\n        className: classes.choiceBtn + (leapNetworkData.length && addressVerified && disableLeapTableCheckbox ? '' : ' hidden'),\n        disabled: true,\n        variant: \"contained\",\n        size: \"medium\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, \"Matched\"), React.createElement(Button, {\n        className: classes.choiceBtn + (!leapNetworkData.length ? '' : ' hidden'),\n        onClick: this.onSubmitLeapAddress,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(List, {\n        component: \"nav\",\n        className: classes.list + (showAddressList ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(ListItem, {\n        button: true,\n        onClick: function onClick() {\n          return _this3.onAddressSelection(_this3.correspondenceAddress);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: this.correspondenceAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      })), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }), React.createElement(ListItem, {\n        button: true,\n        divider: true,\n        onClick: function onClick() {\n          return _this3.onAddressSelection('Other');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(ListItemText, {\n        primary: \"Other\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: !leapNetworkData.length ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"pl-20 pb-10\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, \"No Usage Found. Please enter customer address and click on Submit button.\")), React.createElement(\"div\", {\n        className: leapNetworkData.length ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table + (cdrType === 'data' ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), React.createElement(TableCell, {\n        className: \"color-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, \"Sites\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, \"4G\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, \"3G\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, \"2G\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322\n        },\n        __self: this\n      }, leapNetworkData.map(function (row, index) {\n        return React.createElement(React.Fragment, {\n          key: 'data' + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324\n          },\n          __self: this\n        }, React.createElement(TableRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326\n          },\n          __self: this\n        }, React.createElement(Radio, {\n          color: \"primary\",\n          checked: _this3.isChecked('leap_data_' + row.area),\n          onClick: function onClick() {\n            return _this3.selectNetworkData(row, 'leap_data_' + row.area);\n          },\n          disabled: disableLeapTableCheckbox || !row.address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, row.address), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330\n          },\n          __self: this\n        }, row.data4g || \"NA\"), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331\n          },\n          __self: this\n        }, row.data3g || \"NA\"), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332\n          },\n          __self: this\n        }, row.data2g || \"NA\")));\n      }))), React.createElement(Table, {\n        className: cdrType === 'voice' ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }), React.createElement(TableCell, {\n        className: \"color-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, \"Sites\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"Incoming Calls\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, \"Outgoing Calls\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, \"Call Drops\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, leapNetworkData.map(function (row, index) {\n        return React.createElement(React.Fragment, {\n          key: 'voice' + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 351\n          },\n          __self: this\n        }, React.createElement(TableRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          padding: \"checkbox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }, React.createElement(Radio, {\n          color: \"primary\",\n          checked: _this3.isChecked('leap_data_' + row.area),\n          onClick: function onClick() {\n            return _this3.selectNetworkData(row, 'leap_data_' + row.area);\n          },\n          disabled: disableLeapTableCheckbox || !row.address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 356\n          },\n          __self: this\n        }, row.address), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357\n          },\n          __self: this\n        }, row[\"incomingCalls\"] || \"NA\"), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358\n          },\n          __self: this\n        }, row[\"outgoingCalls\"] || \"NA\"), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359\n          },\n          __self: this\n        }, row[\"callDrops\"] || \"NA\")));\n      }))), React.createElement(\"div\", {\n        className: classes.btnContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: classes.choiceBtn,\n        disabled: !addressVerified,\n        onClick: this.onSubmitLeapAddress,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, \"Submit\"))));\n    }\n  }]);\n\n  return LeapAutoComplete;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customerInfo: state.customerInfo.customerInfo,\n    leapDetails: state.leap.leapDetails,\n    leapNetworkData: state.leap.leapNetworkData,\n    leapInfo: state.leap.leapInfo,\n    verifiedLeapAddress: state.leap.verifiedLeapAddress,\n    leapTableRowChecked: state.leap.leapTableRowChecked,\n    disableLeapTableCheckbox: state.leap.disableLeapTableCheckbox,\n    addressVerified: state.leap.addressVerified\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchLeapDetailsRequest: function fetchLeapDetailsRequest(address) {\n      return dispatch(_fetchLeapDetailsRequest(address));\n    },\n    updateCRMCode: function updateCRMCode(value) {\n      return dispatch(_updateCRMCode(value));\n    },\n    verifyCustomerLocation: function verifyCustomerLocation(address) {\n      return dispatch(_verifyCustomerLocation(address));\n    },\n    onFocusLeapAddressInputFieldHandler: function onFocusLeapAddressInputFieldHandler() {\n      return dispatch(_onFocusLeapAddressInputFieldHandler());\n    },\n    openSnackbarRequest: function openSnackbarRequest(data, msg) {\n      return dispatch(_openSnackbarRequest(data, msg));\n    },\n    generateMapMyIndiaToken: function generateMapMyIndiaToken() {\n      return dispatch(_generateMapMyIndiaToken());\n    },\n    resetLeap: function resetLeap() {\n      return dispatch(_resetLeap());\n    },\n    selectLeapNetworkDataHandler: function selectLeapNetworkDataHandler(item, id) {\n      return dispatch(_selectLeapNetworkDataHandler(item, id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LeapAutoComplete));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/scenario/leap/leap-auto-complete/leap-auto-complete.smart.js"],"names":["React","Component","connect","withStyles","styles","ArrowDropDown","Button","List","ListItem","ListItemText","Divider","TableRow","TableCell","Table","TableHead","TableBody","Radio","fetchLeapDetailsRequest","verifyCustomerLocation","onFocusLeapAddressInputFieldHandler","generateMapMyIndiaToken","resetLeap","selectLeapNetworkDataHandler","updateCRMCode","AutoComplete","debounce","MapMyIndiaService","deburr","match","parse","TextField","MenuItem","openSnackbarRequest","Config","AppConstant","SnackbarMessages","LeapAutoComplete","props","correspondenceAddress","onChangeLeapAddress","name","event","newValue","method","undefined","setState","leapAddress","leapAddressList","useMapMyIndiaAutocomplete","mapMyIndiaTokenRequest","useGoogleMapAutocomplete","googleMapsAutocompleteRequest","self","googleAutocomplete","window","google","maps","places","Autocomplete","document","getElementById","types","componentRestrictions","country","addListener","place","getPlace","state","formatted_address","mapMyIndiaFindLoactionRequest","searchPlace","then","response","data","suggestedLocations","length","locations","j","error","handleSuggestionsFetchRequested","value","inputValue","trim","toLowerCase","inputLength","suggestions","handleSuggestionsClearRequested","selectNetworkData","item","id","customerInfo","address","correspondence","showAddressList","isAddressFieldDisabled","toggleList","bind","onSubmitLeapAddress","onVerifyLeapAddress","onFocusLeapAddressInputField","renderSuggestion","getSuggestionValue","renderInputComponent","onSuggestionSelected","isChecked","val","PROBLEMATIC_ADDRESS_NOT_FOUND","leapAutocompleteOrigin","MAP_MY_INDIA","GOOGLE_MAP","catch","err","inputProps","classes","inputRef","ref","other","node","input","suggestion","query","isHighlighted","matches","parts","map","part","index","highlight","String","fontWeight","text","key","leapTableRowChecked","leapInfo","leapNetworkData","disableLeapTableCheckbox","addressVerified","cdrType","onLeapAddressChange","getLeapAutoCompleteHandler","leapAutocompleteInputProps","label","onChange","onFocus","disabled","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","textField","arrow","choiceBtn","list","onAddressSelection","table","row","area","data4g","data3g","data2g","btnContainer","mapStateToProps","leapDetails","leap","verifiedLeapAddress","mapDispatchToProps","dispatch","msg"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,YAAjC,EAA+CC,OAA/C,EAAwDC,QAAxD,EAAkEC,SAAlE,EAA6EC,KAA7E,EAAoFC,SAApF,EAA+FC,SAA/F,EAA0GC,KAA1G,QAAuH,mBAAvH;AACA,SAASC,uBAAuB,IAAvBA,wBAAT,EAAkCC,sBAAsB,IAAtBA,uBAAlC,EAA0DC,mCAAmC,IAAnCA,oCAA1D,EAA+FC,uBAAuB,IAAvBA,wBAA/F,EAAwHC,SAAS,IAATA,UAAxH,EAAmIC,4BAA4B,IAA5BA,6BAAnI,QAAuK,iCAAvK;AACA,SAASC,aAAa,IAAbA,cAAT,QAA8B,qCAA9B;AACA,OAAOC,YAAP,MAAyB,gEAAzB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,mBAAmB,IAAnBA,oBAAT,QAAoC,qCAApC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,gBAAT,QAAiC,yCAAjC;;IAEMC,gB;;;;;AAGF,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,0FAAMA,KAAN;AADe,UADnBC,qBACmB,GADK,EACL;;AAAA,UAyDnBC,mBAzDmB,GAyDG,UAAAC,IAAI;AAAA,aAAI,UAACC,KAAD,QAAiC;AAAA,YAAvBC,QAAuB,QAAvBA,QAAuB;AAAA,YAAbC,MAAa,QAAbA,MAAa;;AAC3D,YAAGD,QAAQ,KAAKE,SAAhB,EAA2B;AACvB,gBAAKP,KAAL,CAAWhB,SAAX,CAAqB,IAArB;;AACA,gBAAKwB,QAAL,CAAc;AAACC,YAAAA,WAAW,EAAEJ,QAAd;AAAwBK,YAAAA,eAAe,EAAE;AAAzC,WAAd;AACH;AACJ,OALyB;AAAA,KAzDP;;AAAA,UA2EnBC,yBA3EmB,GA2ES,UAAAR,IAAI;AAAA,aAAI,UAACC,KAAD,SAAiC;AAAA,YAAvBC,QAAuB,SAAvBA,QAAuB;AAAA,YAAbC,MAAa,SAAbA,MAAa;;AACjE,YAAGD,QAAQ,KAAKE,SAAhB,EAA2B;AACvB,gBAAKP,KAAL,CAAWhB,SAAX,CAAqB,IAArB;;AACA,gBAAKwB,QAAL,CAAc;AAACC,YAAAA,WAAW,EAAEJ,QAAd;AAAwBK,YAAAA,eAAe,EAAE;AAAzC,WAAd;;AACA,cAAGJ,MAAM,KAAK,MAAd,EAAsB;AAClB,kBAAKM,sBAAL;AACH;AACJ;AACJ,OAR+B;AAAA,KA3Eb;;AAAA,UAqFnBC,wBArFmB,GAqFQ,UAAAV,IAAI;AAAA,aAAI,UAACC,KAAD,SAAiC;AAAA,YAAvBC,QAAuB,SAAvBA,QAAuB;AAAA,YAAbC,MAAa,SAAbA,MAAa;;AAChE,YAAGD,QAAQ,KAAKE,SAAhB,EAA2B;AACvB,gBAAKP,KAAL,CAAWhB,SAAX,CAAqB,IAArB;;AACA,gBAAKwB,QAAL,CAAc;AAACC,YAAAA,WAAW,EAAEJ,QAAd;AAAwBK,YAAAA,eAAe,EAAE;AAAzC,WAAd;;AACA,cAAGJ,MAAM,KAAK,MAAd,EAAsB;AAClB,kBAAKQ,6BAAL;AACH;AACJ;AACJ,OAR8B;AAAA,KArFZ;;AAAA,UAuGnBA,6BAvGmB,GAuGa1B,QAAQ,CAAC,YAAM;AAC3C,UAAM2B,IAAI,wDAAV;;AACA,UAAMC,kBAAkB,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAnB,CAA0BC,YAA9B,CACtBC,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,CADsB,EAEvB;AACIC,QAAAA,KAAK,EAAE,CAAC,SAAD,CADX;AAEIC,QAAAA,qBAAqB,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAF3B,OAFuB,CAA3B;AAOAT,MAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBf,KAAnB,CAAyBuB,WAAzB,CAAqCX,kBAArC,EAAyD,eAAzD,EAA0E,YAAY;AAClF,YAAMY,KAAK,GAAGZ,kBAAkB,CAACa,QAAnB,EAAd;AADkF,YAE5EpB,WAF4E,GAE3DM,IAAI,CAACe,KAFsD,CAE5ErB,WAF4E;AAGlFA,QAAAA,WAAW,GAAGmB,KAAK,IAAIA,KAAK,CAACG,iBAAf,GAAmCH,KAAK,CAACG,iBAAzC,GAA6DtB,WAA3E;AACAM,QAAAA,IAAI,CAACP,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAXA;AAAD,SAAd;AACAM,QAAAA,IAAI,CAACf,KAAL,CAAWhB,SAAX,CAAqB,IAArB;AACH,OAND;AAOH,KAhBuC,EAgBrC,GAhBqC,CAvGrB;AAAA,UAyHnBgD,6BAzHmB,GAyHa5C,QAAQ,CAAC,YAAM;AAC3C,UAAG,MAAK0C,KAAL,CAAWrB,WAAd,EAA2B;AACzBpB,QAAAA,iBAAiB,CAAC4C,WAAlB,CAA8B,MAAKH,KAAL,CAAWrB,WAAzC,EAAsDyB,IAAtD,CACE,UAAAC,QAAQ,EAAI;AACR,cAAGA,QAAQ,IAAIA,QAAQ,CAACC,IAArB,IAA6BD,QAAQ,CAACC,IAAT,CAAcC,kBAA3C,IAAiEF,QAAQ,CAACC,IAAT,CAAcC,kBAAd,CAAiCC,MAArG,EAA6G;AACzG,gBAAMC,SAAS,GAAGJ,QAAQ,CAACC,IAAT,CAAcC,kBAAhC;;AACA,iBAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,SAAS,CAACD,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACtCD,cAAAA,SAAS,CAACC,CAAD,CAAT,CAAa,MAAb,IAAuBD,SAAS,CAACC,CAAD,CAAT,CAAa,WAAb,IAA4B,IAA5B,GAAmCD,SAAS,CAACC,CAAD,CAAT,CAAa,cAAb,CAA1D;AACH;;AACD,kBAAKhC,QAAL,CAAc;AAACE,cAAAA,eAAe,EAAE6B;AAAlB,aAAd;AACH;AACJ,SATH,EAUE,UAAAE,KAAK,EAAI;AACL,gBAAKzC,KAAL,CAAWL,mBAAX,CAA+B8C,KAA/B;AACH,SAZH;AAcD;AACJ,KAjBuC,EAiBrC,GAjBqC,CAzHrB;;AAAA,UAgJnBC,+BAhJmB,GAgJe,iBAAe;AAAA,UAAZC,KAAY,SAAZA,KAAY;AAC7C,UAAMC,UAAU,GAAGtD,MAAM,CAACqD,KAAK,CAACE,IAAN,EAAD,CAAN,CAAqBC,WAArB,EAAnB;AACA,UAAMC,WAAW,GAAGH,UAAU,CAACN,MAA/B;AACA,aAAOS,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyB,MAAK/C,KAAL,CAAWgD,WAA3C;AACD,KApJgB;;AAAA,UAsJjBC,+BAtJiB,GAsJiB,YAAM,CACtC;AACD,KAxJgB;;AAAA,UAsNnBC,iBAtNmB,GAsNC,UAACC,IAAD,EAAOC,EAAP,EAAc;AAC9B,YAAKpD,KAAL,CAAWf,4BAAX,CAAwCkE,IAAxC,EAA8CC,EAA9C;AACH,KAxNkB;;AAAA,QAEPC,YAFO,GAEUrD,KAFV,CAEPqD,YAFO;AAGf,UAAKpD,qBAAL,GAA6BoD,YAAY,IAAIA,YAAY,CAACC,OAA7B,IAAwCD,YAAY,CAACC,OAAb,CAAqBC,cAA7D,GAA8EF,YAAY,CAACC,OAAb,CAAqBC,cAAnG,GAAoH,EAAjJ;AACA,UAAKzB,KAAL,GAAa;AACT0B,MAAAA,eAAe,EAAE,KADR;AAET/C,MAAAA,WAAW,EAAE,MAAKR,qBAFT;AAGTwD,MAAAA,sBAAsB,EAAE,IAHf;AAIT/C,MAAAA,eAAe,EAAE;AAJR,KAAb;AAMA,UAAKgD,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBD,IAAzB,uDAA3B;AACA,UAAKE,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBF,IAAzB,uDAA3B;AACA,UAAKG,4BAAL,GAAoC,MAAKA,4BAAL,CAAkCH,IAAlC,uDAApC;AACA,UAAKI,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBJ,IAAtB,uDAAxB;AACA,UAAKK,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBL,IAAxB,uDAA1B;AACA,UAAKjB,+BAAL,GAAuC,MAAKA,+BAAL,CAAqCiB,IAArC,uDAAvC;AACA,UAAKM,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BN,IAA1B,uDAA5B;AACA,UAAKO,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BP,IAA1B,uDAA5B;AACA,UAAKQ,SAAL,GAAiB,MAAKA,SAAL,CAAeR,IAAf,uDAAjB;AAnBe;AAoBlB;;;;iCAEY;AAAA,UACDH,eADC,GACmB,KAAK1B,KADxB,CACD0B,eADC;AAET,WAAKhD,QAAL,CAAc;AAACgD,QAAAA,eAAe,EAAE,CAACA;AAAnB,OAAd;AACH;;;uCAEkBY,G,EAAK;AACpB,UAAGA,GAAG,KAAK,KAAKtC,KAAL,CAAWrB,WAAtB,EAAmC;AAC/B,aAAKT,KAAL,CAAWhB,SAAX,CAAqB,IAArB;AACH;;AACD,UAAGoF,GAAG,KAAK,OAAX,EAAoB;AAChB,aAAK5D,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAE2D,GAAd;AAAmBX,UAAAA,sBAAsB,EAAE;AAA3C,SAAd;AACH,OAFD,MAEO;AACH,aAAKjD,QAAL,CAAc;AAACC,UAAAA,WAAW,EAAE,EAAd;AAAkBgD,UAAAA,sBAAsB,EAAE;AAA1C,SAAd;AACH;;AACD,WAAKC,UAAL;AACH;;;0CAEqB;AAAA,UACVjD,WADU,GACM,KAAKqB,KADX,CACVrB,WADU;;AAElB,UAAGA,WAAH,EAAgB;AACZ,aAAKT,KAAL,CAAWpB,uBAAX,CAAmC6B,WAAnC;AACH,OAFD,MAEO;AACH,aAAKT,KAAL,CAAWL,mBAAX,CAA+B,IAA/B,EAAqCG,gBAAgB,CAACuE,6BAAtD;AACH;AACJ;;;0CAEqB;AAAA,UACV5D,WADU,GACM,KAAKqB,KADX,CACVrB,WADU;;AAElB,UAAGA,WAAH,EAAgB;AACZ,aAAKT,KAAL,CAAWnB,sBAAX,CAAkC4B,WAAlC;AACH,OAFD,MAEO;AACH,aAAKT,KAAL,CAAWL,mBAAX,CAA+B,IAA/B,EAAqCG,gBAAgB,CAACuE,6BAAtD;AACH;AACJ;;;iDAS4B;AACzB,cAAOzE,MAAM,CAAC0E,sBAAd;AACI,aAAKzE,WAAW,CAAC0E,YAAjB;AACI,iBAAO,KAAK5D,yBAAZ;;AACJ,aAAKd,WAAW,CAAC2E,UAAjB;AACI,iBAAO,KAAK3D,wBAAZ;;AACJ;AACI,iBAAO,KAAKX,mBAAZ;AANR;AAQH;;;6CAsBwB;AAAA;;AACrB,WAAKF,KAAL,CAAWjB,uBAAX,GAAqCmD,IAArC,CAA0C,YAAM;AAC5C,QAAA,MAAI,CAACF,6BAAL;AACH,OAFD,EAEGyC,KAFH,CAES,UAAAC,GAAG,EAAI;AACZ,QAAA,MAAI,CAAC1E,KAAL,CAAWL,mBAAX,CAA+B+E,GAA/B;AACH,OAJD;AAKH;;;mDAuC8B;AAC3B,WAAK1E,KAAL,CAAWlB,mCAAX;AACH;;;yCAYsB6F,U,EAAY;AAAA,UACvBC,OADuB,GACyBD,UADzB,CACvBC,OADuB;AAAA,iCACyBD,UADzB,CACdE,QADc;AAAA,UACdA,SADc,qCACH,YAAM,CAAE,CADL;AAAA,UACOC,GADP,GACyBH,UADzB,CACOG,GADP;AAAA,UACeC,KADf,4BACyBJ,UADzB;;AAG/B,aACE,oBAAC,SAAD;AACE,QAAA,SAAS,MADX;AAEE,QAAA,UAAU,EAAE;AACVE,UAAAA,QAAQ,EAAE,kBAAAG,IAAI,EAAI;AAChBF,YAAAA,GAAG,CAACE,IAAD,CAAH;;AACAH,YAAAA,SAAQ,CAACG,IAAD,CAAR;AACD,WAJS;AAKVJ,UAAAA,OAAO,EAAE;AACPK,YAAAA,KAAK,EAAEL,OAAO,CAACK;AADR;AALC;AAFd,SAWMF,KAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAeD;;;qCAEgBG,U,SAAsC;AAAA,UAAxBC,KAAwB,SAAxBA,KAAwB;AAAA,UAAjBC,aAAiB,SAAjBA,aAAiB;AACrD,UAAMC,OAAO,GAAG9F,KAAK,CAAC2F,UAAU,CAAC/E,IAAZ,EAAkBgF,KAAlB,CAArB;AACA,UAAMG,KAAK,GAAG9F,KAAK,CAAC0F,UAAU,CAAC/E,IAAZ,EAAkBkF,OAAlB,CAAnB;AAEA,aACE,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAED,aAApB;AAAmC,QAAA,SAAS,EAAC,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGE,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC1B,eAAOD,IAAI,CAACE,SAAL,GACL;AAAM,UAAA,GAAG,EAAEC,MAAM,CAACF,KAAD,CAAjB;AAA0B,UAAA,KAAK,EAAE;AAAEG,YAAAA,UAAU,EAAE;AAAd,WAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGJ,IAAI,CAACK,IADR,CADK,GAKL;AAAQ,UAAA,GAAG,EAAEF,MAAM,CAACF,KAAD,CAAnB;AAA4B,UAAA,KAAK,EAAE;AAAEG,YAAAA,UAAU,EAAE;AAAd,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGJ,IAAI,CAACK,IADR,CALF;AASD,OAVA,CADH,CADF,CADF;AAiBD;;;uCAEkBX,U,EAAY;AAC7B,aAAOA,UAAU,CAAC,KAAKlF,KAAL,CAAW8F,GAAZ,CAAjB;AACD;;;yCAEkB1F,K,SAAuB;AAAA,UAAd8E,UAAc,SAAdA,UAAc;AACxC,WAAK1E,QAAL,CAAc;AAACC,QAAAA,WAAW,EAAEyE,UAAU,CAAC/E;AAAzB,OAAd;AACA,WAAKH,KAAL,CAAWhB,SAAX,CAAqB,IAArB;AACH;;;8BAES8G,G,EAAK;AAAA,UACHC,mBADG,GACqB,KAAK/F,KAD1B,CACH+F,mBADG;;AAEX,UAAGA,mBAAmB,IAAIA,mBAAmB,CAACD,GAAD,CAA7C,EAAoD;AAChD,eAAO,IAAP;AACH;;AACD,aAAO,KAAP;AACH;;;6BAMM;AAAA;;AAAA,wBACqF,KAAK9F,KAD1F;AAAA,UACG4E,OADH,eACGA,OADH;AAAA,UACYoB,QADZ,eACYA,QADZ;AAAA,UACsBC,eADtB,eACsBA,eADtB;AAAA,UACuCC,wBADvC,eACuCA,wBADvC;AAAA,UACiEC,eADjE,eACiEA,eADjE;AAAA,wBAE6E,KAAKrE,KAFlF;AAAA,UAEGrB,WAFH,eAEGA,WAFH;AAAA,UAEgBgD,sBAFhB,eAEgBA,sBAFhB;AAAA,UAEwC/C,eAFxC,eAEwCA,eAFxC;AAAA,UAEyD8C,eAFzD,eAEyDA,eAFzD;AAGL,UAAM4C,OAAO,GAAGJ,QAAQ,IAAIA,QAAQ,CAACI,OAArB,GAA+BJ,QAAQ,CAACI,OAAT,CAAiBtD,WAAjB,EAA/B,GAAgE,EAAhF;AACA,UAAMuD,mBAAmB,GAAG,KAAKC,0BAAL,EAA5B;AACA,UAAMC,0BAA0B,GAAG;AACjC3B,QAAAA,OAAO,EAAPA,OADiC;AAEjC4B,QAAAA,KAAK,EAAE,2BAF0B;AAGjC7D,QAAAA,KAAK,EAAElC,WAH0B;AAIjC2C,QAAAA,EAAE,EAAE,2BAJ6B;AAKjCqD,QAAAA,QAAQ,EAAEJ,mBAAmB,EALI;AAMjCK,QAAAA,OAAO,EAAE,KAAK5C,4BANmB;AAOjC6C,QAAAA,QAAQ,EAAElD;AAPuB,OAAnC;AASA,UAAMmD,gBAAgB,GAAG;AACvB3C,QAAAA,oBAAoB,EAAE,KAAKA,oBADJ;AAEvBjB,QAAAA,WAAW,EAAEtC,eAFU;AAGvBmG,QAAAA,2BAA2B,EAAE,KAAKnE,+BAHX;AAIvBoE,QAAAA,2BAA2B,EAAE,KAAK7D,+BAJX;AAKvBe,QAAAA,kBAAkB,EAAE,KAAKA,kBALF;AAMvBD,QAAAA,gBAAgB,EAAE,KAAKA,gBANA;AAOvBG,QAAAA,oBAAoB,EAAE,KAAKA;AAPJ,OAAzB;AAUF,aACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAEU,OAAO,CAACmC,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,UAAU,EAAER,0BAA1B;AAAsD,QAAA,KAAK,EAAE9F,WAA7D;AAA0E,QAAA,gBAAgB,EAAEmG,gBAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAOI,oBAAC,aAAD;AAAe,QAAA,SAAS,EAAEhC,OAAO,CAACoC,KAAR,GAAgB,aAA1C;AAAyD,QAAA,OAAO,EAAE,KAAKtD,UAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,EAUI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEkB,OAAO,CAACqC,SAAR,IAAqBhB,eAAe,CAAC3D,MAAhB,IAA0B,CAAC6D,eAA3B,GAA6C,EAA7C,GAAkD,SAAvE,CAAnB;AAAsG,QAAA,OAAO,EAAE,KAAKtC,mBAApH;AAAyI,QAAA,OAAO,EAAC,WAAjJ;AAA6J,QAAA,IAAI,EAAC,QAAlK;AAA2K,QAAA,KAAK,EAAC,SAAjL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,EAcI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEe,OAAO,CAACqC,SAAR,IAAqBhB,eAAe,CAAC3D,MAAhB,IAA0B6D,eAA1B,IAA6C,CAACD,wBAA9C,GAAyE,EAAzE,GAA8E,SAAnG,CAAnB;AAAkI,QAAA,QAAQ,MAA1I;AAA2I,QAAA,OAAO,EAAC,WAAnJ;AAA+J,QAAA,IAAI,EAAC,QAApK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAdJ,EAkBI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEtB,OAAO,CAACqC,SAAR,IAAqBhB,eAAe,CAAC3D,MAAhB,IAA0B6D,eAA1B,IAA6CD,wBAA7C,GAAwE,EAAxE,GAA6E,SAAlG,CAAnB;AAAiI,QAAA,QAAQ,MAAzI;AAA0I,QAAA,OAAO,EAAC,WAAlJ;AAA8J,QAAA,IAAI,EAAC,QAAnK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAlBJ,EAsBI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAEtB,OAAO,CAACqC,SAAR,IAAqB,CAAChB,eAAe,CAAC3D,MAAjB,GAA0B,EAA1B,GAA+B,SAApD,CAAnB;AAAmF,QAAA,OAAO,EAAE,KAAKsB,mBAAjG;AAAsH,QAAA,OAAO,EAAC,WAA9H;AAA0I,QAAA,IAAI,EAAC,QAA/I;AAAwJ,QAAA,KAAK,EAAC,SAA9J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAtBJ,EA0BI,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAsB,QAAA,SAAS,EAAEgB,OAAO,CAACsC,IAAR,IAAgB1D,eAAe,GAAG,EAAH,GAAQ,SAAvC,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAiB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAAC2D,kBAAL,CAAwB,MAAI,CAAClH,qBAA7B,CAAN;AAAA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAE,KAAKA,qBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAII,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI,oBAAC,QAAD;AAAU,QAAA,MAAM,MAAhB;AAAiB,QAAA,OAAO,MAAxB;AAAyB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACkH,kBAAL,CAAwB,OAAxB,CAAN;AAAA,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,YAAD;AAAc,QAAA,OAAO,EAAC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CALJ,CA1BJ,CADA,EAsCA;AAAK,QAAA,SAAS,EAAG,CAAClB,eAAe,CAAC3D,MAAjB,GAA0B,EAA1B,GAA+B,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFADJ,CAtCA,EA0CA;AAAK,QAAA,SAAS,EAAG2D,eAAe,CAAC3D,MAAhB,GAAyB,EAAzB,GAA8B,SAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAEsC,OAAO,CAACwC,KAAR,IAAiBhB,OAAO,KAAK,MAAZ,GAAqB,EAArB,GAA0B,SAA3C,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAII,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,CADJ,CADJ,EAUI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCH,eAAe,CAACV,GAAhB,CAAoB,UAAC8B,GAAD,EAAM5B,KAAN;AAAA,eACjB,oBAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,GAAG,EAAE,SAASA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,MAAI,CAACtB,SAAL,CAAe,eAAakD,GAAG,CAACC,IAAhC,CAAhC;AAAuE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACpE,iBAAL,CAAuBmE,GAAvB,EAA4B,eAAaA,GAAG,CAACC,IAA7C,CAAN;AAAA,WAAhF;AAA0I,UAAA,QAAQ,EAAEpB,wBAAwB,IAAI,CAACmB,GAAG,CAAC/D,OAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,EAII,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAY+D,GAAG,CAAC/D,OAAhB,CAJJ,EAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAY+D,GAAG,CAACE,MAAJ,IAAc,IAA1B,CALJ,EAMI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYF,GAAG,CAACG,MAAJ,IAAc,IAA1B,CANJ,EAOI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYH,GAAG,CAACI,MAAJ,IAAc,IAA1B,CAPJ,CADJ,CADiB;AAAA,OAApB,CADD,CAVJ,CAFJ,EA6BI,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAGrB,OAAO,KAAK,OAAZ,GAAsB,EAAtB,GAA2B,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,EAGI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHJ,EAII,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJJ,EAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,CADJ,CADJ,EAUI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCH,eAAe,CAACV,GAAhB,CAAoB,UAAC8B,GAAD,EAAM5B,KAAN;AAAA,eACjB,oBAAC,KAAD,CAAO,QAAP;AAAgB,UAAA,GAAG,EAAE,UAAUA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,SAAD;AAAW,UAAA,OAAO,EAAC,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AAAO,UAAA,KAAK,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,MAAI,CAACtB,SAAL,CAAe,eAAakD,GAAG,CAACC,IAAhC,CAAhC;AAAuE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACpE,iBAAL,CAAuBmE,GAAvB,EAA4B,eAAaA,GAAG,CAACC,IAA7C,CAAN;AAAA,WAAhF;AAA0I,UAAA,QAAQ,EAAEpB,wBAAwB,IAAI,CAACmB,GAAG,CAAC/D,OAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CADJ,EAII,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAY+D,GAAG,CAAC/D,OAAhB,CAJJ,EAKI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAY+D,GAAG,CAAC,eAAD,CAAH,IAAwB,IAApC,CALJ,EAMI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYA,GAAG,CAAC,eAAD,CAAH,IAAwB,IAApC,CANJ,EAOI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAYA,GAAG,CAAC,WAAD,CAAH,IAAoB,IAAhC,CAPJ,CADJ,CADiB;AAAA,OAApB,CADD,CAVJ,CA7BJ,EAwDI;AAAK,QAAA,SAAS,EAAEzC,OAAO,CAAC8C,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAE9C,OAAO,CAACqC,SAA3B;AAAsC,QAAA,QAAQ,EAAE,CAACd,eAAjD;AAAkE,QAAA,OAAO,EAAE,KAAKvC,mBAAhF;AAAqG,QAAA,OAAO,EAAC,WAA7G;AAAyH,QAAA,IAAI,EAAC,QAA9H;AAAuI,QAAA,KAAK,EAAC,SAA7I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CAxDJ,CA1CA,CADJ;AA4GD;;;;EAjW4BhG,S;;AAoW/B,IAAM+J,eAAe,GAAG,SAAlBA,eAAkB,CAAA7F,KAAK,EAAI;AAC7B,SAAO;AACHuB,IAAAA,YAAY,EAAEvB,KAAK,CAACuB,YAAN,CAAmBA,YAD9B;AAEHuE,IAAAA,WAAW,EAAE9F,KAAK,CAAC+F,IAAN,CAAWD,WAFrB;AAGH3B,IAAAA,eAAe,EAAEnE,KAAK,CAAC+F,IAAN,CAAW5B,eAHzB;AAIHD,IAAAA,QAAQ,EAAElE,KAAK,CAAC+F,IAAN,CAAW7B,QAJlB;AAKH8B,IAAAA,mBAAmB,EAAEhG,KAAK,CAAC+F,IAAN,CAAWC,mBAL7B;AAMH/B,IAAAA,mBAAmB,EAAEjE,KAAK,CAAC+F,IAAN,CAAW9B,mBAN7B;AAOHG,IAAAA,wBAAwB,EAAEpE,KAAK,CAAC+F,IAAN,CAAW3B,wBAPlC;AAQHC,IAAAA,eAAe,EAAErE,KAAK,CAAC+F,IAAN,CAAW1B;AARzB,GAAP;AAUH,CAXD;;AAaA,IAAM4B,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACpCpJ,IAAAA,uBAAuB,EAAE,iCAAA0E,OAAO;AAAA,aAAI0E,QAAQ,CAACpJ,wBAAuB,CAAC0E,OAAD,CAAxB,CAAZ;AAAA,KADI;AAEpCpE,IAAAA,aAAa,EAAE,uBAAAyD,KAAK;AAAA,aAAIqF,QAAQ,CAAC9I,cAAa,CAACyD,KAAD,CAAd,CAAZ;AAAA,KAFgB;AAGpC9D,IAAAA,sBAAsB,EAAE,gCAAAyE,OAAO;AAAA,aAAI0E,QAAQ,CAACnJ,uBAAsB,CAACyE,OAAD,CAAvB,CAAZ;AAAA,KAHK;AAIpCxE,IAAAA,mCAAmC,EAAE;AAAA,aAAMkJ,QAAQ,CAAClJ,oCAAmC,EAApC,CAAd;AAAA,KAJD;AAKpCa,IAAAA,mBAAmB,EAAE,6BAACyC,IAAD,EAAO6F,GAAP;AAAA,aAAeD,QAAQ,CAACrI,oBAAmB,CAACyC,IAAD,EAAO6F,GAAP,CAApB,CAAvB;AAAA,KALe;AAMpClJ,IAAAA,uBAAuB,EAAE;AAAA,aAAMiJ,QAAQ,CAACjJ,wBAAuB,EAAxB,CAAd;AAAA,KANW;AAOpCC,IAAAA,SAAS,EAAE;AAAA,aAAMgJ,QAAQ,CAAChJ,UAAS,EAAV,CAAd;AAAA,KAPyB;AAQpCC,IAAAA,4BAA4B,EAAE,sCAACkE,IAAD,EAAOC,EAAP;AAAA,aAAc4E,QAAQ,CAAC/I,6BAA4B,CAACkE,IAAD,EAAOC,EAAP,CAA7B,CAAtB;AAAA;AARM,GAAL;AAAA,CAAnC;;AAWA,eAAevF,OAAO,CAAC8J,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CjK,UAAU,CAACC,MAAD,CAAV,CAAmBgC,gBAAnB,CAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './leap-auto-complete.style';\nimport ArrowDropDown from '@material-ui/icons/ArrowDropDown';\nimport { Button, List, ListItem, ListItemText, Divider, TableRow, TableCell, Table, TableHead, TableBody, Radio } from '@material-ui/core';\nimport { fetchLeapDetailsRequest, verifyCustomerLocation, onFocusLeapAddressInputFieldHandler, generateMapMyIndiaToken, resetLeap, selectLeapNetworkDataHandler } from '../../../../actions/leap.action';\nimport { updateCRMCode } from '../../../../actions/scenario.action';\nimport AutoComplete from '../../../../components/common/auto-complete/auto-complete.dumb';\nimport { debounce } from 'lodash';\nimport MapMyIndiaService from '../../../../services/map-my-india.service';\nimport deburr from 'lodash/deburr';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport Config from '../../../../config/config';\nimport { AppConstant } from '../../../../constants/app.constant';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\n\nclass LeapAutoComplete extends Component {\n\n    correspondenceAddress = \"\";\n    constructor(props) {\n        super(props);\n        const { customerInfo } = props;\n        this.correspondenceAddress = customerInfo && customerInfo.address && customerInfo.address.correspondence ? customerInfo.address.correspondence : \"\";\n        this.state = {\n            showAddressList: false,\n            leapAddress: this.correspondenceAddress,\n            isAddressFieldDisabled: true,\n            leapAddressList: []\n        }\n        this.toggleList = this.toggleList.bind(this);\n        this.onSubmitLeapAddress = this.onSubmitLeapAddress.bind(this);\n        this.onVerifyLeapAddress = this.onVerifyLeapAddress.bind(this);\n        this.onFocusLeapAddressInputField = this.onFocusLeapAddressInputField.bind(this);\n        this.renderSuggestion = this.renderSuggestion.bind(this);\n        this.getSuggestionValue = this.getSuggestionValue.bind(this);\n        this.handleSuggestionsFetchRequested = this.handleSuggestionsFetchRequested.bind(this);\n        this.renderInputComponent = this.renderInputComponent.bind(this);\n        this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n        this.isChecked = this.isChecked.bind(this);\n    }\n\n    toggleList() {\n        const { showAddressList } = this.state;\n        this.setState({showAddressList: !showAddressList})\n    }\n\n    onAddressSelection(val) {\n        if(val !== this.state.leapAddress) {\n            this.props.resetLeap(null);\n        }\n        if(val !== 'Other') {\n            this.setState({leapAddress: val, isAddressFieldDisabled: true});\n        } else {\n            this.setState({leapAddress: '', isAddressFieldDisabled: false});\n        }\n        this.toggleList();\n    }\n\n    onSubmitLeapAddress() {\n        const { leapAddress } = this.state;\n        if(leapAddress) {\n            this.props.fetchLeapDetailsRequest(leapAddress);\n        } else {\n            this.props.openSnackbarRequest(null, SnackbarMessages.PROBLEMATIC_ADDRESS_NOT_FOUND)\n        }\n    }\n\n    onVerifyLeapAddress() {\n        const { leapAddress } = this.state;\n        if(leapAddress) {\n            this.props.verifyCustomerLocation(leapAddress);\n        } else {\n            this.props.openSnackbarRequest(null, SnackbarMessages.PROBLEMATIC_ADDRESS_NOT_FOUND)\n        }\n    }\n\n    onChangeLeapAddress = name => (event, { newValue, method }) => {\n        if(newValue !== undefined) {\n            this.props.resetLeap(null);\n            this.setState({leapAddress: newValue, leapAddressList: []});\n        }\n    };\n\n    getLeapAutoCompleteHandler() {\n        switch(Config.leapAutocompleteOrigin) {\n            case AppConstant.MAP_MY_INDIA:\n                return this.useMapMyIndiaAutocomplete;\n            case AppConstant.GOOGLE_MAP:\n                return this.useGoogleMapAutocomplete;\n            default:\n                return this.onChangeLeapAddress;\n        }\n    }\n\n    useMapMyIndiaAutocomplete = name => (event, { newValue, method }) => {\n        if(newValue !== undefined) {\n            this.props.resetLeap(null);\n            this.setState({leapAddress: newValue, leapAddressList: []});\n            if(method === 'type') {\n                this.mapMyIndiaTokenRequest();\n            }\n        }\n    };\n\n    useGoogleMapAutocomplete = name => (event, { newValue, method }) => {\n        if(newValue !== undefined) {\n            this.props.resetLeap(null);\n            this.setState({leapAddress: newValue, leapAddressList: []});\n            if(method === 'type') {\n                this.googleMapsAutocompleteRequest();\n            }\n        }\n    };\n\n    mapMyIndiaTokenRequest() {\n        this.props.generateMapMyIndiaToken().then(() => {\n            this.mapMyIndiaFindLoactionRequest();\n        }).catch(err => {\n            this.props.openSnackbarRequest(err);\n        });\n    }\n\n    googleMapsAutocompleteRequest = debounce(() => {\n        const self = this;\n        const googleAutocomplete = new window.google.maps.places.Autocomplete(\n            (document.getElementById('googleAutoCompleteForLeap')),\n            {\n                types: ['geocode'],\n                componentRestrictions: { country: 'in' }\n            });\n\n        window.google.maps.event.addListener(googleAutocomplete, 'place_changed', function () {\n            const place = googleAutocomplete.getPlace();\n            let { leapAddress } =  self.state;\n            leapAddress = place && place.formatted_address ? place.formatted_address : leapAddress;\n            self.setState({leapAddress});\n            self.props.resetLeap(null);\n        });\n    }, 500);\n\n    mapMyIndiaFindLoactionRequest = debounce(() => {\n        if(this.state.leapAddress) {\n          MapMyIndiaService.searchPlace(this.state.leapAddress).then (\n            response => {\n                if(response && response.data && response.data.suggestedLocations && response.data.suggestedLocations.length) {\n                    const locations = response.data.suggestedLocations;\n                    for(var j = 0; j < locations.length; j++) {\n                        locations[j][\"name\"] = locations[j][\"placeName\"] + \", \" + locations[j][\"placeAddress\"];\n                    }\n                    this.setState({leapAddressList: locations});\n                }\n            },\n            error => {\n                this.props.openSnackbarRequest(error);\n            }\n          )\n        }\n    }, 500);\n\n    onFocusLeapAddressInputField() {\n        this.props.onFocusLeapAddressInputFieldHandler();\n    }\n\n    handleSuggestionsFetchRequested = ({ value }) => {\n        const inputValue = deburr(value.trim()).toLowerCase();\n        const inputLength = inputValue.length;\n        return inputLength === 0 ? [] : this.props.suggestions;\n      };\n    \n      handleSuggestionsClearRequested = () => {\n        // this.setState({suggestions: []});\n      };\n    \n      renderInputComponent(inputProps) {\n        const { classes, inputRef = () => {}, ref, ...other } = inputProps;\n      \n        return (\n          <TextField\n            fullWidth\n            InputProps={{\n              inputRef: node => {\n                ref(node);\n                inputRef(node);\n              },\n              classes: {\n                input: classes.input,\n              },\n            }}\n            {...other}\n          />\n        );\n      }\n      \n      renderSuggestion(suggestion, { query, isHighlighted }) {\n        const matches = match(suggestion.name, query);\n        const parts = parse(suggestion.name, matches);\n      \n        return (\n          <MenuItem selected={isHighlighted} component=\"div\">\n            <div>\n              {parts.map((part, index) => {\n                return part.highlight ? (\n                  <span key={String(index)} style={{ fontWeight: 600 }}>\n                    {part.text}\n                  </span>\n                ) : (\n                  <strong key={String(index)} style={{ fontWeight: 300 }}>\n                    {part.text}\n                  </strong>\n                );\n              })}\n            </div>\n          </MenuItem>\n        );\n      }\n      \n      getSuggestionValue(suggestion) {\n        return suggestion[this.props.key];\n      }\n    \n    onSuggestionSelected(event, { suggestion }) {\n        this.setState({leapAddress: suggestion.name});\n        this.props.resetLeap(null);\n    }\n\n    isChecked(key) {\n        const { leapTableRowChecked } = this.props;\n        if(leapTableRowChecked && leapTableRowChecked[key]) {\n            return true;\n        }\n        return false;\n    }\n\n    selectNetworkData = (item, id) => {\n        this.props.selectLeapNetworkDataHandler(item, id);\n    }\n\n  render() {\n      const { classes, leapInfo, leapNetworkData, disableLeapTableCheckbox, addressVerified } = this.props;\n      const { leapAddress, isAddressFieldDisabled, leapAddressList, showAddressList } = this.state;\n      const cdrType = leapInfo && leapInfo.cdrType ? leapInfo.cdrType.toLowerCase() : \"\";\n      const onLeapAddressChange = this.getLeapAutoCompleteHandler();\n      const leapAutocompleteInputProps = {\n        classes,\n        label: \"Enter Problematic Address\",\n        value: leapAddress,\n        id: \"googleAutoCompleteForLeap\",\n        onChange: onLeapAddressChange(),\n        onFocus: this.onFocusLeapAddressInputField,\n        disabled: isAddressFieldDisabled\n      }\n      const autosuggestProps = {\n        renderInputComponent: this.renderInputComponent,\n        suggestions: leapAddressList,\n        onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n        getSuggestionValue: this.getSuggestionValue,\n        renderSuggestion: this.renderSuggestion,\n        onSuggestionSelected: this.onSuggestionSelected\n      };\n\n    return (   \n        <React.Fragment>\n        <div className=\"position-relative pl-20\">\n            <div className={classes.textField}>\n                <AutoComplete inputProps={leapAutocompleteInputProps} value={leapAddress} autosuggestProps={autosuggestProps}>\n                </AutoComplete>\n            </div>\n\n        \n            <ArrowDropDown className={classes.arrow + \" color-blue\"} onClick={this.toggleList}>\n            </ArrowDropDown>\n\n            <Button className={classes.choiceBtn + (leapNetworkData.length && !addressVerified ? '' : ' hidden')} onClick={this.onVerifyLeapAddress} variant=\"contained\" size=\"medium\" color=\"primary\">\n                Search\n            </Button>\n\n            <Button className={classes.choiceBtn + (leapNetworkData.length && addressVerified && !disableLeapTableCheckbox ? '' : ' hidden')} disabled variant=\"contained\" size=\"medium\">\n                Not Matched\n            </Button>\n\n            <Button className={classes.choiceBtn + (leapNetworkData.length && addressVerified && disableLeapTableCheckbox ? '' : ' hidden')} disabled variant=\"contained\" size=\"medium\">\n                Matched\n            </Button>\n\n            <Button className={classes.choiceBtn + (!leapNetworkData.length ? '' : ' hidden')} onClick={this.onSubmitLeapAddress} variant=\"contained\" size=\"medium\" color=\"primary\">\n                Submit\n            </Button>\n\n            <List component=\"nav\" className={classes.list + (showAddressList ? '' : ' hidden')}>\n                <ListItem button onClick={() => this.onAddressSelection(this.correspondenceAddress)}>\n                    <ListItemText primary={this.correspondenceAddress} />\n                </ListItem>\n                <Divider />\n                <ListItem button divider onClick={() => this.onAddressSelection('Other')}>\n                    <ListItemText primary=\"Other\" />\n                </ListItem>\n            </List>\n        </div>\n\n        <div className={(!leapNetworkData.length ? '' : ' hidden')}>\n            <p className=\"pl-20 pb-10\">No Usage Found. Please enter customer address and click on Submit button.</p>\n        </div>\n\n        <div className={(leapNetworkData.length ? '' : ' hidden')}>\n\n            <Table className={classes.table + (cdrType === 'data' ? '' : ' hidden')}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell className=\"color-green\">Sites</TableCell>\n                        <TableCell>4G</TableCell>\n                        <TableCell>3G</TableCell>\n                        <TableCell>2G</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {leapNetworkData.map((row, index) => (\n                    <React.Fragment key={'data' + index}>\n                        <TableRow>\n                            <TableCell padding=\"checkbox\">\n                                <Radio color=\"primary\" checked={this.isChecked('leap_data_'+row.area)} onClick={() => this.selectNetworkData(row, 'leap_data_'+row.area)} disabled={disableLeapTableCheckbox || !row.address} />\n                            </TableCell>\n                            <TableCell>{row.address}</TableCell>\n                            <TableCell>{row.data4g || \"NA\"}</TableCell>\n                            <TableCell>{row.data3g || \"NA\"}</TableCell>\n                            <TableCell>{row.data2g || \"NA\"}</TableCell>\n                        </TableRow>\n                    </React.Fragment>\n                ))}\n                </TableBody>\n            </Table>\n\n            <Table className={(cdrType === 'voice' ? '' : ' hidden')}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell className=\"color-green\">Sites</TableCell>\n                        <TableCell>Incoming Calls</TableCell>\n                        <TableCell>Outgoing Calls</TableCell>\n                        <TableCell>Call Drops</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                {leapNetworkData.map((row, index) => (\n                    <React.Fragment key={'voice' + index}>\n                        <TableRow>\n                            <TableCell padding=\"checkbox\">\n                                <Radio color=\"primary\" checked={this.isChecked('leap_data_'+row.area)} onClick={() => this.selectNetworkData(row, 'leap_data_'+row.area)} disabled={disableLeapTableCheckbox || !row.address} />\n                            </TableCell>\n                            <TableCell>{row.address}</TableCell>\n                            <TableCell>{row[\"incomingCalls\"] || \"NA\"}</TableCell>\n                            <TableCell>{row[\"outgoingCalls\"] || \"NA\"}</TableCell>\n                            <TableCell>{row[\"callDrops\"] || \"NA\"}</TableCell>\n                        </TableRow>\n                    </React.Fragment>\n                ))}\n                </TableBody>\n            </Table>\n\n            <div className={classes.btnContainer}>\n                <Button className={classes.choiceBtn} disabled={!addressVerified} onClick={this.onSubmitLeapAddress} variant=\"contained\" size=\"medium\" color=\"primary\">\n                    Submit\n                </Button>\n            </div>\n        </div>\n\n        </React.Fragment>  \n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n        customerInfo: state.customerInfo.customerInfo,\n        leapDetails: state.leap.leapDetails,\n        leapNetworkData: state.leap.leapNetworkData,\n        leapInfo: state.leap.leapInfo,\n        verifiedLeapAddress: state.leap.verifiedLeapAddress,\n        leapTableRowChecked: state.leap.leapTableRowChecked,\n        disableLeapTableCheckbox: state.leap.disableLeapTableCheckbox,\n        addressVerified: state.leap.addressVerified\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    fetchLeapDetailsRequest: address => dispatch(fetchLeapDetailsRequest(address)),\n    updateCRMCode: value => dispatch(updateCRMCode(value)),\n    verifyCustomerLocation: address => dispatch(verifyCustomerLocation(address)),\n    onFocusLeapAddressInputFieldHandler: () => dispatch(onFocusLeapAddressInputFieldHandler()),\n    openSnackbarRequest: (data, msg) => dispatch(openSnackbarRequest(data, msg)),\n    generateMapMyIndiaToken: () => dispatch(generateMapMyIndiaToken()),\n    resetLeap: () => dispatch(resetLeap()),\n    selectLeapNetworkDataHandler: (item, id) => dispatch(selectLeapNetworkDataHandler(item ,id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LeapAutoComplete));\n"]},"metadata":{},"sourceType":"module"}