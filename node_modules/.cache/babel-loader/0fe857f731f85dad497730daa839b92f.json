{"ast":null,"code":"var snackbarMessage = {};\nexport var fetchLoginData = function fetchLoginData(loginObj) {\n  return function (dispatch) {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n    LoginService.fetchLoginApi(loginObj).then(function (response) {\n      if (response && response.data) {\n        LoginService.loginDataHandler(response.data);\n        dispatch(loginApiSuccess(response));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.LOGIN_SUCCESS_MSG));\n      }\n    }, function (error) {\n      dispatch(loginApiFailure(error));\n      dispatch(openSnackbarRequest(error, SnackbarMessages.LOGIN_FAILURE));\n    });\n  };\n};\n\nfunction loginApiLoading() {\n  return {\n    type: LoginActionType.LOGIN_REQUEST\n  };\n}\n\nexport function loginApiSuccess(response) {\n  if (response && response.data) {\n    NewAnalyticsService.setAdvisorTrackingData(response.data);\n  }\n\n  return {\n    type: LoginActionType.LOGIN_SUCCESS,\n    payload: response.data\n  };\n}\nexport function loginApiFailure(error) {\n  return {\n    type: LoginActionType.LOGIN_FAILURE,\n    payload: error\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/tasks/src/actions/login.action.js"],"names":["snackbarMessage","fetchLoginData","loginObj","dispatch","resetState","loginApiLoading","LoginService","fetchLoginApi","then","response","data","loginDataHandler","loginApiSuccess","openSnackbarRequest","SnackbarMessages","LOGIN_SUCCESS_MSG","error","loginApiFailure","LOGIN_FAILURE","type","LoginActionType","LOGIN_REQUEST","NewAnalyticsService","setAdvisorTrackingData","LOGIN_SUCCESS","payload"],"mappings":"AAEA,IAAIA,eAAe,GAAG,EAAtB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAClDA,IAAAA,QAAQ,CAACC,UAAU,EAAX,CAAR;AACAD,IAAAA,QAAQ,CAACE,eAAe,EAAhB,CAAR;AACAC,IAAAA,YAAY,CAACC,aAAb,CAA2BL,QAA3B,EAAqCM,IAArC,CACI,UAAAC,QAAQ,EAAI;AACR,UAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3BJ,QAAAA,YAAY,CAACK,gBAAb,CAA8BF,QAAQ,CAACC,IAAvC;AACAP,QAAAA,QAAQ,CAACS,eAAe,CAACH,QAAD,CAAhB,CAAR;AACAN,QAAAA,QAAQ,CAACU,mBAAmB,CAAC,IAAD,EAAOC,gBAAgB,CAACC,iBAAxB,CAApB,CAAR;AACH;AACJ,KAPL,EAQI,UAAAC,KAAK,EAAI;AACLb,MAAAA,QAAQ,CAACc,eAAe,CAACD,KAAD,CAAhB,CAAR;AACAb,MAAAA,QAAQ,CAACU,mBAAmB,CAACG,KAAD,EAAQF,gBAAgB,CAACI,aAAzB,CAApB,CAAR;AACH,KAXL;AAaH,GAhBqC;AAAA,CAA/B;;AAiBP,SAASb,eAAT,GAA2B;AACvB,SAAO;AACHc,IAAAA,IAAI,EAAEC,eAAe,CAACC;AADnB,GAAP;AAGH;;AACD,OAAO,SAAST,eAAT,CAAyBH,QAAzB,EAAmC;AACtC,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3BY,IAAAA,mBAAmB,CAACC,sBAApB,CAA2Cd,QAAQ,CAACC,IAApD;AACH;;AACD,SAAO;AACHS,IAAAA,IAAI,EAAEC,eAAe,CAACI,aADnB;AAEHC,IAAAA,OAAO,EAAEhB,QAAQ,CAACC;AAFf,GAAP;AAIH;AACD,OAAO,SAASO,eAAT,CAAyBD,KAAzB,EAAgC;AACnC,SAAO;AACHG,IAAAA,IAAI,EAAEC,eAAe,CAACF,aADnB;AAEHO,IAAAA,OAAO,EAAET;AAFN,GAAP;AAIH","sourcesContent":["\n\nlet snackbarMessage = {}\n\nexport const fetchLoginData = loginObj => dispatch => {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n    LoginService.fetchLoginApi(loginObj).then(\n        response => {\n            if (response && response.data) {\n                LoginService.loginDataHandler(response.data);\n                dispatch(loginApiSuccess(response));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.LOGIN_SUCCESS_MSG));\n            }\n        },\n        error => {\n            dispatch(loginApiFailure(error));\n            dispatch(openSnackbarRequest(error, SnackbarMessages.LOGIN_FAILURE));\n        }\n    );\n}\nfunction loginApiLoading() {\n    return {\n        type: LoginActionType.LOGIN_REQUEST\n    }\n}\nexport function loginApiSuccess(response) {\n    if (response && response.data) {\n        NewAnalyticsService.setAdvisorTrackingData(response.data)\n    }\n    return {\n        type: LoginActionType.LOGIN_SUCCESS,\n        payload: response.data\n    }\n}\nexport function loginApiFailure(error) {\n    return {\n        type: LoginActionType.LOGIN_FAILURE,\n        payload: error\n    }\n}\n"]},"metadata":{},"sourceType":"module"}