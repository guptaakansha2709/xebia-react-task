{"ast":null,"code":"import { SRActionType } from \"../actiontype/sr.actiontype\";\nimport SRService from '../services/sr.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { AppConstant } from '../constants/app.constant';\nimport { diaplaySRMessageRequest } from '../actions/app-dialog.action';\nimport { disabledScenarioSRTagging, disabledSubHeaderOutstandingSRTagging, disabledMultipleDynamicSrTagging } from './disabled-tagging.action';\nimport { openBookmarkScenario } from './scenario.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { predictionSRResponseHandler } from \"./prediction.action\";\nimport { raiseInsuranceClaimFTRRequest } from \"./scenario.action\";\nimport CookieManagerService from './../services/cookie.service';\nimport SrTaskUpdateService from \"../services/task-update.service\";\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nexport var scenarioSRRequest = function scenarioSRRequest(reqData) {\n  return function (dispatch, getState) {\n    var prospectNumberCircle = null;\n\n    try {\n      prospectNumberCircle = getState().customerInfo && getState().customerInfo.prospectCircle ? getState().customerInfo.prospectCircle : null;\n    } catch (e) {//\n    }\n\n    var authDetails = CookieManagerService.getAuthDetails();\n    var state = getState();\n    var bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    reqData['lsiNumber'] = state.customerInfo.customerLSINumber;\n    reqData['agentId'] = authDetails['agentId'];\n    reqData['prospectNumberCircle'] = prospectNumberCircle;\n    dispatch(showLoader());\n    SRService.scenarioSRRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        var obj = {\n          interactionId: response.data.result.tagId,\n          successMessage: AppConstant.SR_SUCCESS_MESSAGE,\n          faultTrace: response.data.result.faultTrace,\n          message: response.data.result.message,\n          sla: response.data.result.tagSLA\n        };\n        dispatch(srResponseHandler(obj));\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(openSnackbarRequest(error));\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    });\n  };\n};\nexport var insuranceClaimRequest = function insuranceClaimRequest(reqData) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    dispatch(showLoader());\n    SRService.insuranceClaimRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result && response.data.resolution) {\n        var resolution = response.data.resolution;\n        dispatch(raiseInsuranceClaimFTRRequest(resolution));\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      var resolution = 'Failure';\n      dispatch(raiseInsuranceClaimFTRRequest(resolution));\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      } // dispatch(openSnackbarRequest(error));\n\n    });\n  };\n};\n\nfunction onScenarioSRSuccess(payload) {\n  return {\n    type: SRActionType.SCENARIO_SR_REQUEST,\n    payload: payload\n  };\n}\n\nexport var srResponseHandler = function srResponseHandler(response) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var source = getState().dff.dffSource;\n    var multipleDynamicTaggingKey = '';\n\n    if (state.multipleTaggingInfo && state.multipleTaggingInfo.multipleTaggingSrDataObj && state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey) {\n      multipleDynamicTaggingKey = state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey;\n    }\n\n    dispatch(onScenarioSRSuccess(response));\n    dispatch(diplaySRDialogHandler(response, source));\n\n    if (response && response.interactionId) {\n      dispatch(duplicateSRHandler(source, multipleDynamicTaggingKey));\n    }\n  };\n};\nexport var duplicateSRHandler = function duplicateSRHandler(source, multipleDynamicTaggingKey) {\n  return function (dispatch) {\n    switch (source) {\n      case DisabledTaggingStatus.SCENARIO_SR_TAGGING:\n        dispatch(disabledScenarioSRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.SUB_HEADER_OUTSTANDING_SR_TAGGING:\n        dispatch(disabledSubHeaderOutstandingSRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.MULTIPLE_DYNAMIC_TAGGING:\n        if (multipleDynamicTaggingKey) {\n          dispatch(disabledMultipleDynamicSrTagging(true, multipleDynamicTaggingKey));\n        } else {\n          dispatch(openSnackbarRequest('multiple tagging key not available'));\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  };\n};\nexport var diplaySRDialogHandler = function diplaySRDialogHandler(response, source) {\n  return function (dispatch) {\n    switch (source) {\n      case DisabledTaggingStatus.PREDICTION_SR_TAGGING:\n        dispatch(predictionSRResponseHandler(response));\n        break;\n\n      default:\n        dispatch(diaplaySRMessageRequest());\n        break;\n    }\n  };\n};\nexport var srTaskUpdateRequest = function srTaskUpdateRequest(reqData) {\n  return function (dispatch, getState) {\n    var authDetails = CookieManagerService.getAuthDetails();\n    var state = getState();\n    reqData['lsiNumber'] = state.customerInfo.customerLSINumber;\n    reqData['agentId'] = authDetails['agentId'];\n    dispatch(showLoader());\n    SrTaskUpdateService.srTaskUpdateRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        if (response.data.status && response.data.status.statusMessage === \"failure\") {\n          dispatch(openSnackbarRequest(null, response.data.result));\n        } else {\n          dispatch(openSnackbarRequest(null, SnackbarMessages.SR_TASK_UPDATED_SUCCESSFULLY));\n        }\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/sr.action.js"],"names":["SRActionType","SRService","showLoader","hideLoader","openSnackbarRequest","AppConstant","diaplaySRMessageRequest","disabledScenarioSRTagging","disabledSubHeaderOutstandingSRTagging","disabledMultipleDynamicSrTagging","openBookmarkScenario","DisabledTaggingStatus","predictionSRResponseHandler","raiseInsuranceClaimFTRRequest","CookieManagerService","SrTaskUpdateService","SnackbarMessages","scenarioSRRequest","reqData","dispatch","getState","prospectNumberCircle","customerInfo","prospectCircle","e","authDetails","getAuthDetails","state","bookmarkOnCRMCodeClick","scenario","customerLSINumber","then","response","data","result","obj","interactionId","tagId","successMessage","SR_SUCCESS_MESSAGE","faultTrace","message","sla","tagSLA","srResponseHandler","error","insuranceClaimRequest","resolution","onScenarioSRSuccess","payload","type","SCENARIO_SR_REQUEST","source","dff","dffSource","multipleDynamicTaggingKey","multipleTaggingInfo","multipleTaggingSrDataObj","diplaySRDialogHandler","duplicateSRHandler","SCENARIO_SR_TAGGING","SUB_HEADER_OUTSTANDING_SR_TAGGING","MULTIPLE_DYNAMIC_TAGGING","PREDICTION_SR_TAGGING","srTaskUpdateRequest","status","statusMessage","SR_TASK_UPDATED_SUCCESSFULLY"],"mappings":"AAAA,SAASA,YAAT,QAA6B,6BAA7B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,uBAAvC;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,yBAAT,EAAoCC,qCAApC,EAA2EC,gCAA3E,QAAmH,2BAAnH;AACA,SAASC,oBAAT,QAAqC,mBAArC;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AACA,SAASC,2BAAT,QAA4C,qBAA5C;AACA,SAASC,6BAAT,QAA8C,mBAA9C;AACA,OAAOC,oBAAP,MAAiC,8BAAjC;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAGA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,OAAO;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAChE,QAAIC,oBAAoB,GAAG,IAA3B;;AACA,QAAI;AACAA,MAAAA,oBAAoB,GAAGD,QAAQ,GAAGE,YAAX,IAA2BF,QAAQ,GAAGE,YAAX,CAAwBC,cAAnD,GAAoEH,QAAQ,GAAGE,YAAX,CAAwBC,cAA5F,GAA6G,IAApI;AACH,KAFD,CAEE,OAAOC,CAAP,EAAU,CACR;AACH;;AACD,QAAMC,WAAW,GAAGX,oBAAoB,CAACY,cAArB,EAApB;AACA,QAAMC,KAAK,GAAGP,QAAQ,EAAtB;AACA,QAAMQ,sBAAsB,GAAGD,KAAK,CAACE,QAAN,CAAeD,sBAA9C;AAEAV,IAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBS,KAAK,CAACL,YAAN,CAAmBQ,iBAA1C;AACAZ,IAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBO,WAAW,CAAC,SAAD,CAAhC;AAEAP,IAAAA,OAAO,CAAC,sBAAD,CAAP,GAAkCG,oBAAlC;AAEAF,IAAAA,QAAQ,CAACjB,UAAU,EAAX,CAAR;AACAD,IAAAA,SAAS,CAACgB,iBAAV,CAA4BC,OAA5B,EAAqCa,IAArC,CACI,UAAAC,QAAQ,EAAI;AACRb,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;;AACA,UAAI6B,QAAQ,IAAIA,QAAQ,CAACC,IAArB,IAA6BD,QAAQ,CAACC,IAAT,CAAcC,MAA/C,EAAuD;AACnD,YAAMC,GAAG,GAAG;AACRC,UAAAA,aAAa,EAAEJ,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBG,KAD5B;AAERC,UAAAA,cAAc,EAAEjC,WAAW,CAACkC,kBAFpB;AAGRC,UAAAA,UAAU,EAAER,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBM,UAHzB;AAIRC,UAAAA,OAAO,EAAET,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBO,OAJtB;AAKRC,UAAAA,GAAG,EAAEV,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBS;AALlB,SAAZ;AAOAxB,QAAAA,QAAQ,CAACyB,iBAAiB,CAACT,GAAD,CAAlB,CAAR;AACH,OATD,MASO;AACHhB,QAAAA,QAAQ,CAACf,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACH;;AACD,UAAIwB,sBAAJ,EAA4B;AACxBT,QAAAA,QAAQ,CAACT,oBAAoB,CAACkB,sBAAD,CAArB,CAAR;AACH;AACJ,KAlBL,EAmBI,UAAAiB,KAAK,EAAI;AACL1B,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACAgB,MAAAA,QAAQ,CAACf,mBAAmB,CAACyC,KAAD,CAApB,CAAR;;AACA,UAAIjB,sBAAJ,EAA4B;AACxBT,QAAAA,QAAQ,CAACT,oBAAoB,CAACkB,sBAAD,CAArB,CAAR;AACH;AACJ,KAzBL;AA2BH,GA5CuC;AAAA,CAAjC;AA8CP,OAAO,IAAMkB,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA5B,OAAO;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACpE,QAAMO,KAAK,GAAGP,QAAQ,EAAtB;AACA,QAAMQ,sBAAsB,GAAGD,KAAK,CAACE,QAAN,CAAeD,sBAA9C;AACAT,IAAAA,QAAQ,CAACjB,UAAU,EAAX,CAAR;AACAD,IAAAA,SAAS,CAAC6C,qBAAV,CAAgC5B,OAAhC,EAAyCa,IAAzC,CACI,UAAAC,QAAQ,EAAI;AACRb,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;;AACA,UAAI6B,QAAQ,IAAIA,QAAQ,CAACC,IAArB,IAA6BD,QAAQ,CAACC,IAAT,CAAcC,MAA3C,IAAqDF,QAAQ,CAACC,IAAT,CAAcc,UAAvE,EAAmF;AAC/E,YAAMA,UAAU,GAAGf,QAAQ,CAACC,IAAT,CAAcc,UAAjC;AACA5B,QAAAA,QAAQ,CAACN,6BAA6B,CAACkC,UAAD,CAA9B,CAAR;AACH,OAHD,MAGO;AACH5B,QAAAA,QAAQ,CAACf,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACH;;AACD,UAAIwB,sBAAJ,EAA4B;AACxBT,QAAAA,QAAQ,CAACT,oBAAoB,CAACkB,sBAAD,CAArB,CAAR;AACH;AACJ,KAZL,EAaI,UAAAiB,KAAK,EAAI;AACL1B,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACA,UAAM4C,UAAU,GAAG,SAAnB;AACA5B,MAAAA,QAAQ,CAACN,6BAA6B,CAACkC,UAAD,CAA9B,CAAR;;AACA,UAAInB,sBAAJ,EAA4B;AACxBT,QAAAA,QAAQ,CAACT,oBAAoB,CAACkB,sBAAD,CAArB,CAAR;AACH,OANI,CAOL;;AACH,KArBL;AAuBH,GA3B2C;AAAA,CAArC;;AA6BP,SAASoB,mBAAT,CAA6BC,OAA7B,EAAsC;AAClC,SAAO;AACHC,IAAAA,IAAI,EAAElD,YAAY,CAACmD,mBADhB;AAEHF,IAAAA,OAAO,EAAPA;AAFG,GAAP;AAIH;;AAED,OAAO,IAAML,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAZ,QAAQ;AAAA,SAAI,UAACb,QAAD,EAAWC,QAAX,EAAwB;AACjE,QAAMO,KAAK,GAAGP,QAAQ,EAAtB;AACA,QAAMgC,MAAM,GAAGhC,QAAQ,GAAGiC,GAAX,CAAeC,SAA9B;AACA,QAAIC,yBAAyB,GAAG,EAAhC;;AACA,QAAI5B,KAAK,CAAC6B,mBAAN,IAA6B7B,KAAK,CAAC6B,mBAAN,CAA0BC,wBAAvD,IAAmF9B,KAAK,CAAC6B,mBAAN,CAA0BC,wBAA1B,CAAmDF,yBAA1I,EAAqK;AACjKA,MAAAA,yBAAyB,GAAG5B,KAAK,CAAC6B,mBAAN,CAA0BC,wBAA1B,CAAmDF,yBAA/E;AACH;;AACDpC,IAAAA,QAAQ,CAAC6B,mBAAmB,CAAChB,QAAD,CAApB,CAAR;AACAb,IAAAA,QAAQ,CAACuC,qBAAqB,CAAC1B,QAAD,EAAWoB,MAAX,CAAtB,CAAR;;AACA,QAAIpB,QAAQ,IAAIA,QAAQ,CAACI,aAAzB,EAAwC;AACpCjB,MAAAA,QAAQ,CAACwC,kBAAkB,CAACP,MAAD,EAASG,yBAAT,CAAnB,CAAR;AACH;AACJ,GAZwC;AAAA,CAAlC;AAcP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACP,MAAD,EAASG,yBAAT;AAAA,SAAuC,UAAApC,QAAQ,EAAI;AACjF,YAAQiC,MAAR;AACI,WAAKzC,qBAAqB,CAACiD,mBAA3B;AACIzC,QAAAA,QAAQ,CAACZ,yBAAyB,CAAC,IAAD,CAA1B,CAAR;AACA;;AACJ,WAAKI,qBAAqB,CAACkD,iCAA3B;AACI1C,QAAAA,QAAQ,CAACX,qCAAqC,CAAC,IAAD,CAAtC,CAAR;AACA;;AACJ,WAAKG,qBAAqB,CAACmD,wBAA3B;AACI,YAAIP,yBAAJ,EAA+B;AAC3BpC,UAAAA,QAAQ,CAACV,gCAAgC,CAAC,IAAD,EAAO8C,yBAAP,CAAjC,CAAR;AACH,SAFD,MAEO;AACHpC,UAAAA,QAAQ,CAACf,mBAAmB,CAAC,oCAAD,CAApB,CAAR;AACH;;AACD;;AACJ;AACI;AAfR;AAiBH,GAlBiC;AAAA,CAA3B;AAoBP,OAAO,IAAMsD,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAC1B,QAAD,EAAWoB,MAAX;AAAA,SAAsB,UAAAjC,QAAQ,EAAI;AACnE,YAAQiC,MAAR;AACI,WAAKzC,qBAAqB,CAACoD,qBAA3B;AACI5C,QAAAA,QAAQ,CAACP,2BAA2B,CAACoB,QAAD,CAA5B,CAAR;AACA;;AACJ;AACIb,QAAAA,QAAQ,CAACb,uBAAuB,EAAxB,CAAR;AACA;AANR;AAQH,GAToC;AAAA,CAA9B;AAWP,OAAO,IAAM0D,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA9C,OAAO;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAElE,QAAMK,WAAW,GAAGX,oBAAoB,CAACY,cAArB,EAApB;AACA,QAAMC,KAAK,GAAGP,QAAQ,EAAtB;AAEAF,IAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBS,KAAK,CAACL,YAAN,CAAmBQ,iBAA1C;AACAZ,IAAAA,OAAO,CAAC,SAAD,CAAP,GAAqBO,WAAW,CAAC,SAAD,CAAhC;AAEAN,IAAAA,QAAQ,CAACjB,UAAU,EAAX,CAAR;AACAa,IAAAA,mBAAmB,CAACiD,mBAApB,CAAwC9C,OAAxC,EAAiDa,IAAjD,CACI,UAAAC,QAAQ,EAAI;AACRb,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;;AACA,UAAI6B,QAAQ,IAAIA,QAAQ,CAACC,IAArB,IAA6BD,QAAQ,CAACC,IAAT,CAAcC,MAA/C,EAAuD;AACnD,YAAGF,QAAQ,CAACC,IAAT,CAAcgC,MAAd,IAAwBjC,QAAQ,CAACC,IAAT,CAAcgC,MAAd,CAAqBC,aAArB,KAAuC,SAAlE,EAA6E;AACzE/C,UAAAA,QAAQ,CAACf,mBAAmB,CAAC,IAAD,EAAO4B,QAAQ,CAACC,IAAT,CAAcC,MAArB,CAApB,CAAR;AACH,SAFD,MAEO;AACHf,UAAAA,QAAQ,CAACf,mBAAmB,CAAC,IAAD,EAAOY,gBAAgB,CAACmD,4BAAxB,CAApB,CAAR;AACH;AACJ,OAND,MAMO;AACHhD,QAAAA,QAAQ,CAACf,mBAAmB,CAAC,IAAD,CAApB,CAAR;AACH;AACJ,KAZL,EAaI,UAAAyC,KAAK,EAAI;AACL1B,MAAAA,QAAQ,CAAChB,UAAU,EAAX,CAAR;AACAgB,MAAAA,QAAQ,CAACf,mBAAmB,CAACyC,KAAD,CAApB,CAAR;AACH,KAhBL;AAkBH,GA3ByC;AAAA,CAAnC","sourcesContent":["import { SRActionType } from \"../actiontype/sr.actiontype\";\nimport SRService from '../services/sr.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { AppConstant } from '../constants/app.constant';\nimport { diaplaySRMessageRequest } from '../actions/app-dialog.action';\nimport { disabledScenarioSRTagging, disabledSubHeaderOutstandingSRTagging, disabledMultipleDynamicSrTagging } from './disabled-tagging.action';\nimport { openBookmarkScenario } from './scenario.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { predictionSRResponseHandler } from \"./prediction.action\";\nimport { raiseInsuranceClaimFTRRequest } from \"./scenario.action\";\nimport CookieManagerService from './../services/cookie.service';\nimport SrTaskUpdateService from \"../services/task-update.service\";\nimport { SnackbarMessages } from '../constants/snackbar-messages';\n\n\nexport const scenarioSRRequest = reqData => (dispatch, getState) => {\n    let prospectNumberCircle = null;\n    try {\n        prospectNumberCircle = getState().customerInfo && getState().customerInfo.prospectCircle ? getState().customerInfo.prospectCircle : null;\n    } catch (e) {\n        //\n    }\n    const authDetails = CookieManagerService.getAuthDetails();\n    const state = getState();\n    const bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n\n    reqData['lsiNumber'] = state.customerInfo.customerLSINumber;\n    reqData['agentId'] = authDetails['agentId'];\n    \n    reqData['prospectNumberCircle'] = prospectNumberCircle;\n\n    dispatch(showLoader());\n    SRService.scenarioSRRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                const obj = {\n                    interactionId: response.data.result.tagId,\n                    successMessage: AppConstant.SR_SUCCESS_MESSAGE,\n                    faultTrace: response.data.result.faultTrace,\n                    message: response.data.result.message,\n                    sla: response.data.result.tagSLA\n                }\n                dispatch(srResponseHandler(obj));\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(openSnackbarRequest(error));\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        }\n    );\n};\n\nexport const insuranceClaimRequest = reqData => (dispatch, getState) => {\n    const state = getState();\n    const bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    dispatch(showLoader());\n    SRService.insuranceClaimRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result && response.data.resolution) {\n                const resolution = response.data.resolution;\n                dispatch(raiseInsuranceClaimFTRRequest(resolution));\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            const resolution = 'Failure';\n            dispatch(raiseInsuranceClaimFTRRequest(resolution));\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n            // dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nfunction onScenarioSRSuccess(payload) {\n    return {\n        type: SRActionType.SCENARIO_SR_REQUEST,\n        payload\n    }\n}\n\nexport const srResponseHandler = response => (dispatch, getState) => {\n    const state = getState();\n    const source = getState().dff.dffSource;\n    let multipleDynamicTaggingKey = '';\n    if (state.multipleTaggingInfo && state.multipleTaggingInfo.multipleTaggingSrDataObj && state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey) {\n        multipleDynamicTaggingKey = state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey;\n    }\n    dispatch(onScenarioSRSuccess(response));\n    dispatch(diplaySRDialogHandler(response, source));\n    if (response && response.interactionId) {\n        dispatch(duplicateSRHandler(source, multipleDynamicTaggingKey));\n    }\n}\n\nexport const duplicateSRHandler = (source, multipleDynamicTaggingKey) => dispatch => {\n    switch (source) {\n        case DisabledTaggingStatus.SCENARIO_SR_TAGGING:\n            dispatch(disabledScenarioSRTagging(true));\n            break;\n        case DisabledTaggingStatus.SUB_HEADER_OUTSTANDING_SR_TAGGING:\n            dispatch(disabledSubHeaderOutstandingSRTagging(true));\n            break;\n        case DisabledTaggingStatus.MULTIPLE_DYNAMIC_TAGGING:\n            if (multipleDynamicTaggingKey) {\n                dispatch(disabledMultipleDynamicSrTagging(true, multipleDynamicTaggingKey));\n            } else {\n                dispatch(openSnackbarRequest('multiple tagging key not available'));\n            }\n            break;\n        default:\n            break;\n    }\n};\n\nexport const diplaySRDialogHandler = (response, source) => dispatch => {\n    switch (source) {\n        case DisabledTaggingStatus.PREDICTION_SR_TAGGING:\n            dispatch(predictionSRResponseHandler(response));\n            break;\n        default:\n            dispatch(diaplaySRMessageRequest());\n            break;\n    }\n};\n\nexport const srTaskUpdateRequest = reqData => (dispatch, getState) => {\n\n    const authDetails = CookieManagerService.getAuthDetails();\n    const state = getState();\n\n    reqData['lsiNumber'] = state.customerInfo.customerLSINumber;\n    reqData['agentId'] = authDetails['agentId'];\n\n    dispatch(showLoader());\n    SrTaskUpdateService.srTaskUpdateRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                if(response.data.status && response.data.status.statusMessage === \"failure\") {\n                    dispatch(openSnackbarRequest(null, response.data.result));\n                } else {\n                    dispatch(openSnackbarRequest(null, SnackbarMessages.SR_TASK_UPDATED_SUCCESSFULLY));\n                }\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n};"]},"metadata":{},"sourceType":"module"}