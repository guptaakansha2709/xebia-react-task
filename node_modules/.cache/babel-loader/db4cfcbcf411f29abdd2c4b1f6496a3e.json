{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/scenario/leap/leap.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './leap.style';\nimport SentimentSatisfiedAlt from '@material-ui/icons/SentimentSatisfiedAlt';\nimport SentimentVeryDissatisfied from '@material-ui/icons/SentimentVeryDissatisfied';\nimport SentimentSatisfied from '@material-ui/icons/SentimentSatisfied';\nimport Clear from '@material-ui/icons/Clear';\nimport { TableRow, TableCell, Table, TableHead, TableBody, ExpansionPanel, ExpansionPanelSummary, Typography, ExpansionPanelDetails } from '@material-ui/core';\nimport { fetchLeapDetailsRequest as _fetchLeapDetailsRequest, verifyCustomerLocation as _verifyCustomerLocation, openNetworkHandler as _openNetworkHandler } from '../../../actions/leap.action';\nimport { handleChoiceCrmCode as _handleChoiceCrmCode } from '../../../actions/scenario.action';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LeapAutoComplete from './leap-auto-complete/leap-auto-complete.smart';\nimport ScenarioDescription from '../scenario-description/scenario-description.dumb';\nimport OpenNetworkSVG from \"../../../assets/images/openNetwork.svg\";\nvar siteDetailsList = [{\n  name: \"Site under upgrade\",\n  key: \"SITESUNDERUPGRADE\"\n}, {\n  name: \"New sites planned\",\n  key: \"NEWSITESPLANNED\"\n}, {\n  name: \"Site locked\",\n  key: \"SITESLOCKED\"\n}, {\n  name: \"New site required\",\n  key: \"NEWSITESREQUIRED\"\n}];\nvar signalQualityList = [{\n  name: \"2G\",\n  key: \"2G\"\n}, {\n  name: \"3G\",\n  key: \"3G\"\n}, {\n  name: \"4G\",\n  key: \"4G\"\n}];\n\nvar Leap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Leap, _Component);\n\n  function Leap(props) {\n    var _this;\n\n    _classCallCheck(this, Leap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Leap).call(this, props));\n    _this.state = {\n      expandLeapInfoPanel: true,\n      expandLeapNetworkPanel: true\n    };\n    _this.toggleLeapInfoPanel = _this.toggleLeapInfoPanel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleLeapNetworkDataPanel = _this.toggleLeapNetworkDataPanel.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onClickOpenNetwork = _this.onClickOpenNetwork.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Leap, [{\n    key: \"updateCRMCode\",\n    value: function updateCRMCode(value) {\n      this.props.handleChoiceCrmCode(value);\n    }\n  }, {\n    key: \"toggleLeapInfoPanel\",\n    value: function toggleLeapInfoPanel() {\n      var expandLeapInfoPanel = this.state.expandLeapInfoPanel;\n      this.setState({\n        expandLeapInfoPanel: !expandLeapInfoPanel\n      });\n    }\n  }, {\n    key: \"toggleLeapNetworkDataPanel\",\n    value: function toggleLeapNetworkDataPanel() {\n      var expandLeapNetworkPanel = this.state.expandLeapNetworkPanel;\n      this.setState({\n        expandLeapNetworkPanel: !expandLeapNetworkPanel\n      });\n    }\n  }, {\n    key: \"onClickOpenNetwork\",\n    value: function onClickOpenNetwork() {\n      this.props.openNetworkHandler();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          leapInfo = _this$props.leapInfo,\n          leapDetails = _this$props.leapDetails,\n          scenarioDescription = _this$props.scenarioDescription,\n          leapStartDate = _this$props.leapStartDate,\n          leapEndDate = _this$props.leapEndDate;\n      var cdrType = leapInfo && leapInfo.cdrType ? leapInfo.cdrType.toLowerCase() : \"\";\n      var informCustomer = leapDetails && leapDetails.informCustomer;\n      var siteDetails = leapDetails && leapDetails.siteDetails;\n      var coverageQuality = leapDetails && leapDetails.coverageQuality;\n      var crmCoding = leapDetails && leapDetails.crmCoding;\n\n      if (crmCoding) {\n        this.updateCRMCode(crmCoding);\n      }\n\n      if (siteDetails && coverageQuality) {\n        setTimeout(function () {\n          _this2.refs.leapCustInfo.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"center\"\n          });\n        });\n      }\n\n      var _this$state = this.state,\n          expandLeapInfoPanel = _this$state.expandLeapInfoPanel,\n          expandLeapNetworkPanel = _this$state.expandLeapNetworkPanel;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bg-grey pt-20 pr-20 pb-20 pl-20\" + (leapStartDate ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: cdrType === 'data' ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Data usage display from \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, new Date(leapStartDate).toDateString()), \" to \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, new Date(leapEndDate).toDateString()), \".\"), React.createElement(\"p\", {\n        className: cdrType === 'voice' ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Voice usage display from \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, new Date(leapStartDate).toDateString()), \" to \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, new Date(leapEndDate).toDateString()), \".\"), React.createElement(ScenarioDescription, {\n        scenarioDescription: scenarioDescription,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"mt-15 mb-15 \" + classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(ExpansionPanel, {\n        className: \"bg-grey\",\n        expanded: expandLeapNetworkPanel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(ExpansionPanelSummary, {\n        className: classes.expandSummary,\n        expandIcon: React.createElement(ExpandMoreIcon, {\n          className: classes.expandIcon,\n          onClick: this.toggleLeapNetworkDataPanel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.heading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Leap Network Data\")), React.createElement(ExpansionPanelDetails, {\n        className: \"display-block \" + classes.panelDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(LeapAutoComplete, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"position-relative bg-grey pt-20 pr-20 pb-20 pl-20 mt-10\" + (informCustomer ? '' : ' hidden'),\n        ref: \"leapCustInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"mb-10 fs-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Inform Customer\"), React.createElement(\"p\", {\n        className: \"fs-14 color-light-black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, informCustomer)), React.createElement(\"div\", {\n        className: \"mt-15 mb-15\" + (coverageQuality && siteDetails ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(ExpansionPanel, {\n        className: \"bg-grey\",\n        expanded: expandLeapInfoPanel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(ExpansionPanelSummary, {\n        className: classes.expandSummary,\n        expandIcon: React.createElement(ExpandMoreIcon, {\n          className: classes.expandIcon,\n          onClick: this.toggleLeapInfoPanel,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.heading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Leap Info \", React.createElement(\"img\", {\n        src: OpenNetworkSVG,\n        className: classes.openNetworkIcon,\n        alt: \"\",\n        onClick: this.onClickOpenNetwork,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }))), React.createElement(ExpansionPanelDetails, {\n        className: \"display-block \" + classes.panelDetails,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: \"color-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Signal Quality\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Excellent\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Good\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Moderate\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"No Coverage\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, signalQualityList.map(function (row) {\n        return React.createElement(React.Fragment, {\n          key: row.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          },\n          __self: this\n        }, React.createElement(TableRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, row.name), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(SentimentSatisfiedAlt, {\n          className: \"color-green fs-20 \" + (coverageQuality && coverageQuality[row.key] === '1' ? '' : ' hidden'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(SentimentSatisfied, {\n          className: \"color-orange fs-20 \" + (coverageQuality && coverageQuality[row.key] === '2' ? '' : ' hidden'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(SentimentVeryDissatisfied, {\n          className: \"fs-20 \" + (coverageQuality && coverageQuality[row.key] === '3' ? '' : ' hidden'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        })), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(Clear, {\n          className: \"color-red fs-20 \" + (coverageQuality && coverageQuality[row.key] === '' ? '' : ' hidden'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }))));\n      }))), React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        className: \"color-green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Sites(within 500 m)\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"2G\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"3G\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"4G\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, siteDetails && siteDetailsList.map(function (row) {\n        return React.createElement(React.Fragment, {\n          key: row.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(TableRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, row.name), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, siteDetails[row.key + '_2G']), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, siteDetails[row.key + '_3G']), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, siteDetails[row.key + '_4G'])));\n      })))))));\n    }\n  }]);\n\n  return Leap;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customerInfo: state.customerInfo.customerInfo,\n    leapDetails: state.leap.leapDetails,\n    leapNetworkData: state.leap.leapNetworkData,\n    leapInfo: state.leap.leapInfo,\n    verifiedLeapAddress: state.leap.verifiedLeapAddress,\n    scenarioDescription: state.scenario.scenarioDescription,\n    leapStartDate: state.leap.leapStartDate,\n    leapEndDate: state.leap.leapEndDate\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchLeapDetailsRequest: function fetchLeapDetailsRequest(address) {\n      return dispatch(_fetchLeapDetailsRequest(address));\n    },\n    handleChoiceCrmCode: function handleChoiceCrmCode(value) {\n      return dispatch(_handleChoiceCrmCode(value));\n    },\n    verifyCustomerLocation: function verifyCustomerLocation(address) {\n      return dispatch(_verifyCustomerLocation(address));\n    },\n    openNetworkHandler: function openNetworkHandler() {\n      return dispatch(_openNetworkHandler());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Leap));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/scenario/leap/leap.smart.js"],"names":["React","Component","connect","withStyles","styles","SentimentSatisfiedAlt","SentimentVeryDissatisfied","SentimentSatisfied","Clear","TableRow","TableCell","Table","TableHead","TableBody","ExpansionPanel","ExpansionPanelSummary","Typography","ExpansionPanelDetails","fetchLeapDetailsRequest","verifyCustomerLocation","openNetworkHandler","handleChoiceCrmCode","ExpandMoreIcon","LeapAutoComplete","ScenarioDescription","siteDetailsList","name","key","signalQualityList","Leap","props","state","expandLeapInfoPanel","expandLeapNetworkPanel","toggleLeapInfoPanel","bind","toggleLeapNetworkDataPanel","onClickOpenNetwork","value","setState","classes","leapInfo","leapDetails","scenarioDescription","leapStartDate","leapEndDate","cdrType","toLowerCase","informCustomer","siteDetails","coverageQuality","crmCoding","updateCRMCode","setTimeout","refs","leapCustInfo","scrollIntoView","behavior","block","Date","toDateString","root","expandSummary","expandIcon","heading","panelDetails","OpenNetworkSVG","openNetworkIcon","table","map","row","mapStateToProps","customerInfo","leap","leapNetworkData","verifiedLeapAddress","scenario","mapDispatchToProps","dispatch","address"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './leap.style';\nimport SentimentSatisfiedAlt from '@material-ui/icons/SentimentSatisfiedAlt';\nimport SentimentVeryDissatisfied from '@material-ui/icons/SentimentVeryDissatisfied';\nimport SentimentSatisfied from '@material-ui/icons/SentimentSatisfied';\nimport Clear from '@material-ui/icons/Clear';\nimport { TableRow, TableCell, Table, TableHead, TableBody, ExpansionPanel, ExpansionPanelSummary, Typography, ExpansionPanelDetails } from '@material-ui/core';\nimport { fetchLeapDetailsRequest, verifyCustomerLocation, openNetworkHandler } from '../../../actions/leap.action';\nimport { handleChoiceCrmCode } from '../../../actions/scenario.action';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LeapAutoComplete from './leap-auto-complete/leap-auto-complete.smart';\nimport ScenarioDescription from '../scenario-description/scenario-description.dumb';\nimport OpenNetworkSVG from '../../../assets/images/openNetwork.svg';\n\nconst siteDetailsList = [\n    {\n        name: \"Site under upgrade\",\n        key: \"SITESUNDERUPGRADE\"\n    },\n    {\n        name: \"New sites planned\",\n        key: \"NEWSITESPLANNED\"\n    },\n    {\n        name: \"Site locked\",\n        key: \"SITESLOCKED\"\n    },\n    {\n        name: \"New site required\",\n        key: \"NEWSITESREQUIRED\"\n    }\n]\n\nconst signalQualityList = [\n    {\n        name: \"2G\",\n        key: \"2G\"\n    },\n    {\n        name: \"3G\",\n        key: \"3G\"\n    },\n    {\n        name: \"4G\",\n        key: \"4G\"\n    }\n]\n\nclass Leap extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expandLeapInfoPanel: true,\n            expandLeapNetworkPanel: true\n        }\n        this.toggleLeapInfoPanel = this.toggleLeapInfoPanel.bind(this);\n        this.toggleLeapNetworkDataPanel = this.toggleLeapNetworkDataPanel.bind(this);\n        this.onClickOpenNetwork = this.onClickOpenNetwork.bind(this);\n    }\n\n    updateCRMCode(value) {\n        this.props.handleChoiceCrmCode(value);\n    }\n\n    toggleLeapInfoPanel() {\n        const { expandLeapInfoPanel } = this.state;\n        this.setState({ expandLeapInfoPanel: !expandLeapInfoPanel })\n    }\n\n    toggleLeapNetworkDataPanel() {\n        const { expandLeapNetworkPanel } = this.state;\n        this.setState({ expandLeapNetworkPanel: !expandLeapNetworkPanel })\n    }\n\n    onClickOpenNetwork() {\n        this.props.openNetworkHandler();\n    }\n\n    render() {\n        const { classes, leapInfo, leapDetails, scenarioDescription, leapStartDate, leapEndDate } = this.props;\n        const cdrType = leapInfo && leapInfo.cdrType ? leapInfo.cdrType.toLowerCase() : \"\";\n        const informCustomer = leapDetails && leapDetails.informCustomer;\n        const siteDetails = leapDetails && leapDetails.siteDetails;\n        const coverageQuality = leapDetails && leapDetails.coverageQuality;\n        const crmCoding = leapDetails && leapDetails.crmCoding;\n        if (crmCoding) {\n            this.updateCRMCode(crmCoding);\n        }\n        if (siteDetails && coverageQuality) {\n            setTimeout(() => {\n                this.refs.leapCustInfo.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n            })\n        }\n        const { expandLeapInfoPanel, expandLeapNetworkPanel } = this.state;\n\n        return (\n            <div>\n                <div className={\"bg-grey pt-20 pr-20 pb-20 pl-20\" + (leapStartDate ? '' : ' hidden')}>\n                    <p className={(cdrType === 'data' ? '' : ' hidden')}>\n                        Data usage display from <b>{new Date(leapStartDate).toDateString()}</b> to <b>{new Date(leapEndDate).toDateString()}</b>.\n                    </p>\n\n                    <p className={(cdrType === 'voice' ? '' : ' hidden')}>\n                        Voice usage display from <b>{new Date(leapStartDate).toDateString()}</b> to <b>{new Date(leapEndDate).toDateString()}</b>.\n                    </p>\n\n                    <ScenarioDescription scenarioDescription={scenarioDescription} />\n\n                </div>\n\n\n\n                <div className={\"mt-15 mb-15 \" + classes.root}>\n                    <ExpansionPanel className=\"bg-grey\" expanded={expandLeapNetworkPanel}>\n                        <ExpansionPanelSummary className={classes.expandSummary} expandIcon={<ExpandMoreIcon className={classes.expandIcon} onClick={this.toggleLeapNetworkDataPanel} />}>\n                            <Typography className={classes.heading}>Leap Network Data</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails className={\"display-block \" + classes.panelDetails}>\n\n                            <LeapAutoComplete></LeapAutoComplete>\n\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                </div>\n\n                <div className={\"position-relative bg-grey pt-20 pr-20 pb-20 pl-20 mt-10\" + (informCustomer ? '' : ' hidden')} ref=\"leapCustInfo\">\n                    <p className=\"mb-10 fs-20\">Inform Customer</p>\n                    <p className=\"fs-14 color-light-black\">{informCustomer}</p>\n                </div>\n\n                <div className={\"mt-15 mb-15\" + (coverageQuality && siteDetails ? '' : ' hidden')}>\n                    <ExpansionPanel className=\"bg-grey\" expanded={expandLeapInfoPanel}>\n                        <ExpansionPanelSummary className={classes.expandSummary} expandIcon={<ExpandMoreIcon className={classes.expandIcon} onClick={this.toggleLeapInfoPanel} />}>\n                            <Typography className={classes.heading}>Leap Info <img src={OpenNetworkSVG} className={classes.openNetworkIcon} alt=\"\" onClick={this.onClickOpenNetwork} /></Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails className={\"display-block \" + classes.panelDetails}>\n                            <Table className={classes.table}>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell className=\"color-green\">Signal Quality</TableCell>\n                                        <TableCell>Excellent</TableCell>\n                                        <TableCell>Good</TableCell>\n                                        <TableCell>Moderate</TableCell>\n                                        <TableCell>No Coverage</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {signalQualityList.map(row => (\n                                        <React.Fragment key={row.name}>\n                                            <TableRow>\n                                                <TableCell>{row.name}</TableCell>\n                                                <TableCell><SentimentSatisfiedAlt className={\"color-green fs-20 \" + (coverageQuality && coverageQuality[row.key] === '1' ? '' : ' hidden')} /></TableCell>\n                                                <TableCell><SentimentSatisfied className={\"color-orange fs-20 \" + (coverageQuality && coverageQuality[row.key] === '2' ? '' : ' hidden')} /></TableCell>\n                                                <TableCell><SentimentVeryDissatisfied className={\"fs-20 \" + (coverageQuality && coverageQuality[row.key] === '3' ? '' : ' hidden')} /></TableCell>\n                                                <TableCell><Clear className={\"color-red fs-20 \" + (coverageQuality && coverageQuality[row.key] === '' ? '' : ' hidden')} /></TableCell>\n                                            </TableRow>\n                                        </React.Fragment>\n                                    ))}\n                                </TableBody>\n                            </Table>\n\n                            <Table className={classes.table}>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell className=\"color-green\">Sites(within 500 m)</TableCell>\n                                        <TableCell>2G</TableCell>\n                                        <TableCell>3G</TableCell>\n                                        <TableCell>4G</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {siteDetails && siteDetailsList.map(row => (\n                                        <React.Fragment key={row.name}>\n                                            <TableRow>\n                                                <TableCell>{row.name}</TableCell>\n                                                <TableCell>{siteDetails[row.key + '_2G']}</TableCell>\n                                                <TableCell>{siteDetails[row.key + '_3G']}</TableCell>\n                                                <TableCell>{siteDetails[row.key + '_4G']}</TableCell>\n                                            </TableRow>\n                                        </React.Fragment>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        customerInfo: state.customerInfo.customerInfo,\n        leapDetails: state.leap.leapDetails,\n        leapNetworkData: state.leap.leapNetworkData,\n        leapInfo: state.leap.leapInfo,\n        verifiedLeapAddress: state.leap.verifiedLeapAddress,\n        scenarioDescription: state.scenario.scenarioDescription,\n        leapStartDate: state.leap.leapStartDate,\n        leapEndDate: state.leap.leapEndDate,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    fetchLeapDetailsRequest: address => dispatch(fetchLeapDetailsRequest(address)),\n    handleChoiceCrmCode: value => dispatch(handleChoiceCrmCode(value)),\n    verifyCustomerLocation: address => dispatch(verifyCustomerLocation(address)),\n    openNetworkHandler: () => dispatch(openNetworkHandler())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(Leap));\n"]},"metadata":{},"sourceType":"module"}