{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/call-transfer-dialog/call-transfer-dialog.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport '../../../../index.css';\nimport { fetctCallTransferDialogData as _fetctCallTransferDialogData, fetchCalltransferSubcategory as _fetchCalltransferSubcategory, callTransferFTRHandler as _callTransferFTRHandler } from '../../../../actions/call-transfer-dialog.action';\nimport { closeCallTransferDialog as _closeCallTransferDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nvar CallTransferDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CallTransferDialog, _Component);\n\n  function CallTransferDialog(props) {\n    var _this;\n\n    _classCallCheck(this, CallTransferDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CallTransferDialog).call(this, props));\n\n    _this.handleCallTransferSubcategory = function (selectedCallTransferCategory) {\n      _this.props.fetchCalltransferSubcategory(selectedCallTransferCategory);\n    };\n\n    _this.handleCloseModal = function () {\n      _this.props.closeCallTransferDialog();\n    };\n\n    _this.handleChangeTransferType = function (event) {\n      _this.setState({\n        selectedCallTransferCategory: event.target.value\n      });\n\n      _this.handleCallTransferSubcategory(event.target.value);\n    };\n\n    _this.handleCallTransferFormSubmit = function (event) {\n      event.preventDefault();\n\n      _this.props.callTransferFTRHandler(_this.props.calltransferSubcategoryResponse);\n\n      _this.handleCloseModal();\n    };\n\n    _this.state = {\n      callTransferCategory: '',\n      selectedCallTransferCategory: ''\n    };\n    _this.handleChangeTransferType = _this.handleChangeTransferType.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCloseModal = _this.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCallTransferFormSubmit = _this.handleCallTransferFormSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCallTransferSubcategory = _this.handleCallTransferSubcategory.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CallTransferDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props) {\n        this.props.fetctCallTransferDialogData();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var callTransferDialogTitle = this.props.callTransferDialogTitle;\n      var callTransferDialogStatus = this.props.callTransferDialogStatus;\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          calltransferSubcategoryResponse = _this$props.calltransferSubcategoryResponse;\n      var selectedCallTransferCategory = this.state.selectedCallTransferCategory;\n      var callTransfercategory = this.props.callTransfercategory;\n      this.handleChangeTransferType = this.handleChangeTransferType.bind(this);\n      this.handleCloseModal = this.handleCloseModal.bind(this);\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: callTransferDialogStatus,\n        onClose: this.handleCloseModal,\n        maxWidth: \"sm\",\n        fullWidth: true,\n        \"aria-labelledby\": \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, callTransferDialogTitle, React.createElement(IconButton, {\n        \"aria-label\": \"Close\",\n        className: classes.closeButton,\n        onClick: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }))), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        },\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, callTransfercategory && callTransfercategory.length && React.createElement(Grid, {\n        container: true,\n        className: \"spacing-24\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        fullWidth: true,\n        component: \"fieldset\",\n        className: classes.formControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(RadioGroup, {\n        \"aria-label\": \"callTransferType\",\n        name: \"callTransferType\",\n        className: classes.group,\n        value: selectedCallTransferCategory,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, callTransfercategory.map(function (item, index) {\n        return React.createElement(FormControlLabel, {\n          className: \"width-33 pull-left mr-15\",\n          key: item,\n          value: item,\n          control: React.createElement(Radio, {\n            classes: {\n              root: classes.radio,\n              checked: classes.checked\n            },\n            onChange: _this2.handleChangeTransferType,\n            checked: _this2.state.selectedCallTransferCategory === item,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }),\n          label: item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      })))), !callTransfercategory && React.createElement(Paper, {\n        className: classes.paper + \" transfer-txt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"inherit\",\n        noWrap: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"No Categories Found\")), calltransferSubcategoryResponse && this.state.selectedCallTransferCategory !== '' && React.createElement(Paper, {\n        className: classes.paper + \" transfer-txt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"fs-14 color-black\",\n        dangerouslySetInnerHTML: {\n          __html: calltransferSubcategoryResponse.description\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      })))), React.createElement(DialogActions, {\n        className: \"custom-blue-button ml-25 mr-25 mt-25 mb-25\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        value: \"Submit\",\n        variant: \"contained\",\n        size: \"large\",\n        disabled: !selectedCallTransferCategory,\n        className: \"color-white\",\n        onClick: this.handleCallTransferFormSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"SUBMIT\"))));\n    }\n  }]);\n\n  return CallTransferDialog;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetctCallTransferDialogData: function fetctCallTransferDialogData(data) {\n      return dispatch(_fetctCallTransferDialogData(data));\n    },\n    closeCallTransferDialog: function closeCallTransferDialog(data) {\n      return dispatch(_closeCallTransferDialog(data));\n    },\n    fetchCalltransferSubcategory: function fetchCalltransferSubcategory(data) {\n      return dispatch(_fetchCalltransferSubcategory(data));\n    },\n    callTransferFTRHandler: function callTransferFTRHandler(data) {\n      return dispatch(_callTransferFTRHandler(data));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    callTransferDialogStatus: state.dialogInfo.callTransferDialogStatus,\n    callTransferDialogTitle: state.dialogInfo.callTransferDialogTitle,\n    callTransfercategory: state.callTransferInfo.fetchCallTransferCategories,\n    calltransferSubcategoryResponse: state.callTransferInfo.fetchCallTransferSubCatgoryApiResponse,\n    scenarioStatus: state.scenario.scenarioStatus,\n    scenarioNotes: state.scenario.scenarioNotes,\n    smsTemplate: state.scenario.smsTemplate,\n    currentScenarioInfo: state.scenario.currentScenarioInfo\n  };\n};\n\nCallTransferDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(CallTransferDialog));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/call-transfer-dialog/call-transfer-dialog.smart.js"],"names":["React","Component","connect","Button","Dialog","DialogActions","DialogContent","DialogTitle","PropTypes","withStyles","IconButton","CloseIcon","Radio","Grid","RadioGroup","FormControlLabel","FormControl","fetctCallTransferDialogData","fetchCalltransferSubcategory","callTransferFTRHandler","closeCallTransferDialog","styles","Typography","Paper","CallTransferDialog","props","handleCallTransferSubcategory","selectedCallTransferCategory","handleCloseModal","handleChangeTransferType","event","setState","target","value","handleCallTransferFormSubmit","preventDefault","calltransferSubcategoryResponse","state","callTransferCategory","bind","callTransferDialogTitle","callTransferDialogStatus","classes","callTransfercategory","closeButton","length","formControl","group","map","item","index","root","radio","checked","paper","__html","description","mapDispatchToProps","dispatch","data","mapStateToProps","dialogInfo","callTransferInfo","fetchCallTransferCategories","fetchCallTransferSubCatgoryApiResponse","scenarioStatus","scenario","scenarioNotes","smsTemplate","currentScenarioInfo","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport '../../../../index.css';\nimport { fetctCallTransferDialogData, fetchCalltransferSubcategory, callTransferFTRHandler } from '../../../../actions/call-transfer-dialog.action';\nimport { closeCallTransferDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\n\nclass CallTransferDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            callTransferCategory: '',\n            selectedCallTransferCategory: ''\n        }\n        this.handleChangeTransferType = this.handleChangeTransferType.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleCallTransferFormSubmit = this.handleCallTransferFormSubmit.bind(this);\n        this.handleCallTransferSubcategory = this.handleCallTransferSubcategory.bind(this);\n    }\n    componentDidMount() {\n        if (this.props) {\n            this.props.fetctCallTransferDialogData();\n        }\n    }\n    handleCallTransferSubcategory = (selectedCallTransferCategory) => {\n        this.props.fetchCalltransferSubcategory(selectedCallTransferCategory);\n\n    }\n    handleCloseModal = () => {\n        this.props.closeCallTransferDialog();\n    }\n\n    handleChangeTransferType = event => {\n        this.setState({ selectedCallTransferCategory: event.target.value });\n        this.handleCallTransferSubcategory(event.target.value);\n    };\n    handleCallTransferFormSubmit = (event) => {\n        event.preventDefault();\n        this.props.callTransferFTRHandler(this.props.calltransferSubcategoryResponse);\n        this.handleCloseModal();\n    }\n    render() {\n        const callTransferDialogTitle = this.props.callTransferDialogTitle;\n        const callTransferDialogStatus = this.props.callTransferDialogStatus;\n        const { classes, calltransferSubcategoryResponse } = this.props;\n        const { selectedCallTransferCategory } = this.state;\n        const callTransfercategory = this.props.callTransfercategory;\n        this.handleChangeTransferType = this.handleChangeTransferType.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        return (\n            <React.Fragment>\n                <Dialog\n                    open={callTransferDialogStatus}\n                    onClose={this.handleCloseModal}\n                    maxWidth={`sm`}\n                    fullWidth={true}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        {callTransferDialogTitle}\n                        <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.handleCloseModal}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={event => event.preventDefault()} noValidate autoComplete=\"off\">\n                            {callTransfercategory && callTransfercategory.length &&\n                                <Grid container className=\"spacing-24\">\n                                    <FormControl fullWidth component=\"fieldset\" className={classes.formControl}>\n                                        <RadioGroup\n                                            aria-label=\"callTransferType\"\n                                            name=\"callTransferType\"\n                                            className={classes.group}\n                                            value={selectedCallTransferCategory}\n                                        >\n                                            {callTransfercategory.map((item, index) => {\n                                                return (\n                                                    <FormControlLabel className=\"width-33 pull-left mr-15\" key={item} value={item} control={\n                                                        <Radio classes={{\n                                                            root: classes.radio,\n                                                            checked: classes.checked,\n                                                        }} onChange={this.handleChangeTransferType} checked={this.state.selectedCallTransferCategory === item} />} label={item}\n                                                    />\n                                                )\n                                            })}\n                                        </RadioGroup>\n                                    </FormControl>\n                                </Grid>\n                            }\n\n                            {!callTransfercategory &&\n                                <Paper className={classes.paper + \" transfer-txt\"}>\n                                    <Typography variant=\"inherit\" noWrap>\n                                        No Categories Found</Typography>\n                                </Paper>\n                            }\n                            {calltransferSubcategoryResponse && this.state.selectedCallTransferCategory !== '' &&\n                                <Paper className={classes.paper + \" transfer-txt\"}>\n                                    <p className={\"fs-14 color-black\"}\n                                        dangerouslySetInnerHTML={{ __html: calltransferSubcategoryResponse.description }} />\n                                    {/* <Typography component=\"p\" className={classes.breakWord}>\n                                        {calltransferSubcategoryResponse.description}\n                                    </Typography> */}\n                                </Paper>\n                            }\n\n\n\n                        </form>\n\n\n                    </DialogContent>\n                    <DialogActions className=\"custom-blue-button ml-25 mr-25 mt-25 mb-25\">\n                        <Button type=\"submit\" value=\"Submit\" variant=\"contained\" size=\"large\" disabled={!selectedCallTransferCategory} className=\"color-white\" onClick={this.handleCallTransferFormSubmit} >SUBMIT</Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    fetctCallTransferDialogData: data => dispatch(fetctCallTransferDialogData(data)),\n    closeCallTransferDialog: data => dispatch(closeCallTransferDialog(data)),\n    fetchCalltransferSubcategory: data => dispatch(fetchCalltransferSubcategory(data)),\n    callTransferFTRHandler: data => dispatch(callTransferFTRHandler(data))\n});\nconst mapStateToProps = state => {\n    return {\n        callTransferDialogStatus: state.dialogInfo.callTransferDialogStatus,\n        callTransferDialogTitle: state.dialogInfo.callTransferDialogTitle,\n        callTransfercategory: state.callTransferInfo.fetchCallTransferCategories,\n        calltransferSubcategoryResponse: state.callTransferInfo.fetchCallTransferSubCatgoryApiResponse,\n        scenarioStatus: state.scenario.scenarioStatus,\n        scenarioNotes: state.scenario.scenarioNotes,\n        smsTemplate: state.scenario.smsTemplate,\n        currentScenarioInfo: state.scenario.currentScenarioInfo,\n    };\n}\n\nCallTransferDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(withStyles(styles)(CallTransferDialog));"]},"metadata":{},"sourceType":"module"}