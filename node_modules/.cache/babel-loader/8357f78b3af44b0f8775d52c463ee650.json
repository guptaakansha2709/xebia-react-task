{"ast":null,"code":"import { BillCompareActionType } from \"../actiontype/bill-compare.actiontype\";\nimport BillCompareService from '../services/bill-compare.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nexport var fetchInvoiceRequest = function fetchInvoiceRequest() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var billComparisonDate = state.billCompare.billComparisonDate;\n\n    if (!billComparisonDate || !billComparisonDate.length) {\n      dispatch(showLoader());\n      var invoiceObj = {\n        billComparisonDate: [],\n        billComparisonRecentDate: [],\n        billComparisonPreviousDate: []\n      };\n      BillCompareService.fetchInvoiceRequest().then(function (response) {\n        dispatch(hideLoader());\n\n        if (response && response.data && response.data.result && response.data.result.invoices) {\n          var data = response.data.result.invoices;\n          var sortedDateArr = BillCompareService.sortInvoiceDate(data);\n\n          if (sortedDateArr.length === 0) {\n            dispatch(setInvoiceDetails(invoiceObj));\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVOICE_NOT_FOUND));\n          } else {\n            invoiceObj.billComparisonDate = sortedDateArr.slice(0, 4);\n            invoiceObj.billComparisonRecentDate = sortedDateArr.slice(0, 3);\n            invoiceObj.billComparisonPreviousDate = sortedDateArr.slice(1, 4);\n            var currentBillCycle = invoiceObj.billComparisonRecentDate[0];\n            var previousBillCycle = invoiceObj.billComparisonPreviousDate[0] || \"\";\n            dispatch(setCurrentBillDate(currentBillCycle));\n            dispatch(setPreviousBillDate(previousBillCycle));\n            dispatch(setInvoiceDetails(invoiceObj));\n          }\n        } else {\n          dispatch(setInvoiceDetails(invoiceObj));\n          dispatch(openSnackbarRequest(null, SnackbarMessages.INVOICE_NOT_FOUND));\n        }\n      }, function (error) {\n        dispatch(hideLoader());\n        dispatch(setInvoiceDetails(invoiceObj));\n        dispatch(openSnackbarRequest(error));\n      });\n    }\n  };\n};\nexport var fetchBillsRequest = function fetchBillsRequest(reqData) {\n  return function (dispatch) {\n    dispatch(showLoader());\n    var obj = {\n      billComparisonData: [],\n      billComparisonTotal: null,\n      billCycle: \"\"\n    };\n    BillCompareService.fetchBillRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        var result = response.data.result;\n        obj.billCycle = result.billCycle;\n        obj.billComparisonData = BillCompareService.getBillComparisonData(result);\n        obj.cardLinks = BillCompareService.getCardLinks(result);\n        obj.billComparisonTotal = BillCompareService.sumOfBillComparator(obj.billComparisonData);\n        dispatch(openBillComparatorRequest());\n        dispatch(setBillDetails(obj));\n      } else {\n        dispatch(setBillDetails(obj));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_AVAILABLE));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(setBillDetails(obj));\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport function openBillComparatorRequest() {\n  return {\n    type: BillCompareActionType.OPEN_BILL_COMPARATOR_DIALOG,\n    payload: true\n  };\n}\nexport function closeBillComparatorRequest() {\n  return {\n    type: BillCompareActionType.CLOSE_BILL_COMPARATOR_DIALOG,\n    payload: false\n  };\n}\nexport var setPreviousBillDateRequest = function setPreviousBillDateRequest(value) {\n  return function (dispatch) {\n    dispatch(setPreviousBillDate(value));\n  };\n};\nexport var onCurrentMonthChangeRequest = function onCurrentMonthChangeRequest(value) {\n  return function (dispatch, getState) {\n    dispatch(setCurrentBillDate(value));\n    var _getState$billCompare = getState().billCompare,\n        openBillComparatorDialog = _getState$billCompare.openBillComparatorDialog,\n        billComparisonDate = _getState$billCompare.billComparisonDate;\n    var invoiceObj = {\n      billComparisonPreviousDate: []\n    };\n    var index = billComparisonDate.indexOf(value);\n    invoiceObj.billComparisonPreviousDate = billComparisonDate.slice(index + 1, 4);\n    dispatch(setInvoiceDetails(invoiceObj));\n    var previousBillCycle = invoiceObj.billComparisonPreviousDate[0];\n    dispatch(setPreviousBillDate(previousBillCycle));\n\n    if (openBillComparatorDialog) {\n      var reqData = {\n        currentBillCycle: value && value.displayName ? value.displayName : \"\",\n        previousBillCycle: previousBillCycle && previousBillCycle.displayName ? previousBillCycle.displayName : \"\"\n      };\n      dispatch(fetchBillsRequest(reqData));\n    }\n  };\n};\n\nfunction setCurrentBillDate(value) {\n  return {\n    type: BillCompareActionType.SET_CURRENT_BILL_DATE,\n    payload: value\n  };\n}\n\nfunction setPreviousBillDate(value) {\n  return {\n    type: BillCompareActionType.SET_PREVIOUS_BILL_DATE,\n    payload: value\n  };\n}\n\nfunction setInvoiceDetails(payload) {\n  return {\n    type: BillCompareActionType.FETCH_INVOICE_REQUEST,\n    payload: payload\n  };\n}\n\nfunction setBillDetails(payload) {\n  return {\n    type: BillCompareActionType.FETCH_BILL_REQUEST,\n    payload: payload\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/bill-compare.action.js"],"names":["BillCompareActionType","BillCompareService","showLoader","hideLoader","openSnackbarRequest","SnackbarMessages","fetchInvoiceRequest","dispatch","getState","state","billComparisonDate","billCompare","length","invoiceObj","billComparisonRecentDate","billComparisonPreviousDate","then","response","data","result","invoices","sortedDateArr","sortInvoiceDate","setInvoiceDetails","INVOICE_NOT_FOUND","slice","currentBillCycle","previousBillCycle","setCurrentBillDate","setPreviousBillDate","error","fetchBillsRequest","reqData","obj","billComparisonData","billComparisonTotal","billCycle","fetchBillRequest","getBillComparisonData","cardLinks","getCardLinks","sumOfBillComparator","openBillComparatorRequest","setBillDetails","DATA_NOT_AVAILABLE","type","OPEN_BILL_COMPARATOR_DIALOG","payload","closeBillComparatorRequest","CLOSE_BILL_COMPARATOR_DIALOG","setPreviousBillDateRequest","value","onCurrentMonthChangeRequest","openBillComparatorDialog","index","indexOf","displayName","SET_CURRENT_BILL_DATE","SET_PREVIOUS_BILL_DATE","FETCH_INVOICE_REQUEST","FETCH_BILL_REQUEST"],"mappings":"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","sourcesContent":["import { BillCompareActionType } from \"../actiontype/bill-compare.actiontype\";\nimport BillCompareService from '../services/bill-compare.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\n\nexport const fetchInvoiceRequest = () => (dispatch, getState) => {\n    const state = getState();\n    const billComparisonDate = state.billCompare.billComparisonDate;\n    if (!billComparisonDate || !billComparisonDate.length) {\n        dispatch(showLoader());\n        const invoiceObj = {\n            billComparisonDate: [],\n            billComparisonRecentDate: [],\n            billComparisonPreviousDate: []\n        }\n        BillCompareService.fetchInvoiceRequest().then(\n            response => {\n                dispatch(hideLoader());\n                if (response && response.data && response.data.result && response.data.result.invoices) {\n                    const data = response.data.result.invoices;\n                    const sortedDateArr = BillCompareService.sortInvoiceDate(data);\n                    if (sortedDateArr.length === 0) {\n                        dispatch(setInvoiceDetails(invoiceObj));\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.INVOICE_NOT_FOUND));\n                    } else {\n                        invoiceObj.billComparisonDate = sortedDateArr.slice(0, 4);\n                        invoiceObj.billComparisonRecentDate = sortedDateArr.slice(0, 3);\n                        invoiceObj.billComparisonPreviousDate = sortedDateArr.slice(1, 4);\n                        const currentBillCycle = invoiceObj.billComparisonRecentDate[0];\n                        const previousBillCycle = invoiceObj.billComparisonPreviousDate[0] || \"\";\n                        dispatch(setCurrentBillDate(currentBillCycle));\n                        dispatch(setPreviousBillDate(previousBillCycle));\n                        dispatch(setInvoiceDetails(invoiceObj));\n                    }\n                } else {\n                    dispatch(setInvoiceDetails(invoiceObj));\n                    dispatch(openSnackbarRequest(null, SnackbarMessages.INVOICE_NOT_FOUND));\n                }\n            },\n            error => {\n                dispatch(hideLoader());\n                dispatch(setInvoiceDetails(invoiceObj));\n                dispatch(openSnackbarRequest(error));\n            }\n        );\n    }\n};\n\nexport const fetchBillsRequest = (reqData) => dispatch => {\n    dispatch(showLoader());\n    const obj = {\n        billComparisonData: [],\n        billComparisonTotal: null,\n        billCycle: \"\"\n    }\n    BillCompareService.fetchBillRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                const result = response.data.result;\n                obj.billCycle = result.billCycle;\n                obj.billComparisonData = BillCompareService.getBillComparisonData(result);\n                obj.cardLinks = BillCompareService.getCardLinks(result);\n                obj.billComparisonTotal = BillCompareService.sumOfBillComparator(obj.billComparisonData);\n                dispatch(openBillComparatorRequest());\n                dispatch(setBillDetails(obj));\n            } else {\n                dispatch(setBillDetails(obj));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_AVAILABLE));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(setBillDetails(obj));\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nexport function openBillComparatorRequest() {\n    return { type: BillCompareActionType.OPEN_BILL_COMPARATOR_DIALOG, payload: true };\n}\n\nexport function closeBillComparatorRequest() {\n    return { type: BillCompareActionType.CLOSE_BILL_COMPARATOR_DIALOG, payload: false };\n}\n\nexport const setPreviousBillDateRequest = value => dispatch => {\n    dispatch(setPreviousBillDate(value));\n}\n\nexport const onCurrentMonthChangeRequest = value => (dispatch, getState) => {\n    dispatch(setCurrentBillDate(value));\n    const { openBillComparatorDialog, billComparisonDate } = getState().billCompare;\n    const invoiceObj = {\n        billComparisonPreviousDate: []\n    }\n    const index = billComparisonDate.indexOf(value);\n    invoiceObj.billComparisonPreviousDate = billComparisonDate.slice(index + 1, 4);\n    dispatch(setInvoiceDetails(invoiceObj));\n    const previousBillCycle = invoiceObj.billComparisonPreviousDate[0];\n    dispatch(setPreviousBillDate(previousBillCycle));\n    if (openBillComparatorDialog) {\n        const reqData = {\n            currentBillCycle: value && value.displayName ? value.displayName : \"\",\n            previousBillCycle: previousBillCycle && previousBillCycle.displayName ? previousBillCycle.displayName : \"\"\n        }\n        dispatch(fetchBillsRequest(reqData));\n    }\n}\n\nfunction setCurrentBillDate(value) {\n    return { type: BillCompareActionType.SET_CURRENT_BILL_DATE, payload: value };\n}\n\nfunction setPreviousBillDate(value) {\n    return { type: BillCompareActionType.SET_PREVIOUS_BILL_DATE, payload: value };\n}\n\nfunction setInvoiceDetails(payload) {\n    return {\n        type: BillCompareActionType.FETCH_INVOICE_REQUEST,\n        payload\n    }\n}\n\nfunction setBillDetails(payload) {\n    return {\n        type: BillCompareActionType.FETCH_BILL_REQUEST,\n        payload\n    }\n}"]},"metadata":{},"sourceType":"module"}