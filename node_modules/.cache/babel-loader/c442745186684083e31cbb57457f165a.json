{"ast":null,"code":"import _defineProperty from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { LeapActionType } from \"../actiontype/leap.actiontype\";\nimport LeapService from '../services/leap.service';\nimport { showLoader, hideLoader, loadGoogleMapsAPI } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { handleManualChoiceButtonClick } from \"./scenario.action\";\nimport MapMyIndiaService from \"../services/map-my-india.service\";\nimport CookieManagerService from \"../services/cookie.service\";\nimport { AppConstant } from '../constants/app.constant';\nimport Config from '../config/config'; // import { diaplayFTRMessageDialog } from '../actions/app-dialog.action';\n// import { SnackbarMessages } from '../constants/snackbar-messages';\n\nexport function setLeapStartDate(payload) {\n  return {\n    type: LeapActionType.SET_LEAP_START_DATE,\n    payload: payload\n  };\n}\nexport function setLeapEndDate(payload) {\n  return {\n    type: LeapActionType.SET_LEAP_END_DATE,\n    payload: payload\n  };\n}\nexport function setLeapCalendarStartDate(payload) {\n  return {\n    type: LeapActionType.SET_LEAP_CALENDAR_START_DATE,\n    payload: payload\n  };\n}\nexport function updateLeapInfo(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_INFO,\n    payload: payload\n  };\n}\nexport function updateLeapCaptureLocation(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_CAPTURE_LOCATION,\n    payload: payload\n  };\n}\nexport function updateLeapNetworkTableSelectedRow(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_NETWORK_TABLE_SELECTED_ROW,\n    payload: payload\n  };\n}\nexport function updateLeapNetworkTableData(payload) {\n  return {\n    type: LeapActionType.UPADTE_LEAP_NETWORK_TABLE_DATE,\n    payload: payload\n  };\n}\nexport function updateLeapVerifiedAddressData(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_VERIFIED_ADDRESS,\n    payload: payload\n  };\n}\nexport function updateLeapDetails(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_DETAILS,\n    payload: payload\n  };\n}\nexport function updateLeapTableRowCheckbox(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_TABLE_ROW_CHECKBOX,\n    payload: payload\n  };\n}\nexport function updateLeapLatLong(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_LAT_LONG,\n    payload: payload\n  };\n}\nexport function updateLeapLongitude(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_LONGITUDE,\n    payload: payload\n  };\n}\nexport function updateLeapLatitude(payload) {\n  return {\n    type: LeapActionType.UPDATE_LEAP_LATITUDE,\n    payload: payload\n  };\n}\nexport var leapInfoHandler = function leapInfoHandler(stepData) {\n  return function (dispatch) {\n    if (stepData.displayCalender) {\n      var payload = {\n        cdrType: stepData.cdrType,\n        daysGap: stepData.daysGap,\n        leapCalendarStartLimit: stepData.leapCalendarStartLimit,\n        leapMaxDateRangeLimit: stepData.leapMaxDateRangeLimit,\n        leapMinDateRangeLimit: stepData.leapMinDateRangeLimit\n      };\n      dispatch(setLeapStartDate(LeapService.getLeapDefaultStartDate(stepData.daysGap, stepData.leapMinDateRangeLimit - 1)));\n      dispatch(setLeapEndDate(LeapService.getLeapDefaultEndDate(stepData.daysGap)));\n      dispatch(setLeapCalendarStartDate(LeapService.getLeapCalendarStartDate(stepData.daysGap, stepData.leapCalendarStartLimit)));\n      dispatch(updateLeapInfo(payload));\n    }\n  };\n};\nexport var fetchNetworkDataTableRequest = function fetchNetworkDataTableRequest() {\n  return function (dispatch, getState) {\n    var reqData = {\n      transactionId: getState().scenario.scenarioStatus[\"transactionId\"],\n      leapStartDate: getState().leap.leapStartDate,\n      leapEndDate: getState().leap.leapEndDate,\n      cdrType: getState().leap.leapInfo.cdrType\n    };\n    var leapNetworkData = [];\n    LeapService.fetchNetworkDataTableRequest(reqData).then(function (response) {\n      if (response && response.data && response.data.result && response.data.result.networkDataTable && response.data.result.networkDataTable.length) {\n        leapNetworkData = response.data.result.networkDataTable;\n        dispatch(updateLeapNetworkTableData(leapNetworkData));\n      } else {\n        dispatch(updateLeapNetworkTableData(leapNetworkData));\n      }\n    }, function (error) {\n      dispatch(updateLeapNetworkTableData(leapNetworkData)); // dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var fetchLeapDetailsRequest = function fetchLeapDetailsRequest(address) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var reqData = {\n      notes: state.scenario.scenarioNotes,\n      scenarioName: state.scenario.currentScenarioInfo.name,\n      transactionId: state.scenario.scenarioStatus.transactionId,\n      scenarioId: state.scenario.currentScenarioId,\n      address: address,\n      customerCategory: state.customerInfo.customerInfo.customerCategory\n    };\n    dispatch(showLoader());\n    LeapService.fetchLeapDetailsRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(updateLeapDetails(response.data.result));\n\n        if (response.data.result.latitude && response.data.result.longitude) {\n          var latitude = response.data.result.latitude;\n          var longitude = response.data.result.longitude;\n          var latLong = response.data.result.latitude + \", \" + response.data.result.longitude;\n          dispatch(updateLeapLatitude(latitude));\n          dispatch(updateLeapLongitude(longitude));\n          dispatch(updateLeapLatLong(latLong));\n        }\n      } else {\n        dispatch(updateLeapDetails(null));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(updateLeapDetails(null));\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var verifyCustomerLocation = function verifyCustomerLocation(address) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var reqData = {\n      transactionId: state.scenario.scenarioStatus.transactionId,\n      networkDataTable: state.leap.leapNetworkData,\n      customerSiteLocation: encodeURIComponent(address)\n    };\n    dispatch(showLoader());\n    LeapService.verifyCustomerLocationRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n      var payload = {\n        leapTableRowChecked: {},\n        disableLeapTableCheckbox: false,\n        addressVerified: true\n      };\n\n      if (response && response.data && response.data.result && response.data.result.networkDataTable) {\n        dispatch(updateLeapVerifiedAddressData(response.data.result));\n        var leapCaptureLoaction = {};\n\n        if (response.data.result.networkDataTable) {\n          var networkDataTable = response.data.result.networkDataTable;\n\n          if (networkDataTable[0]) {\n            if (networkDataTable[0][\"ismatched\"]) {\n              var _payload$leapTableRow;\n\n              payload.leapTableRowChecked = (_payload$leapTableRow = {}, _defineProperty(_payload$leapTableRow, 'leap_data_' + networkDataTable[0][\"area\"], true), _defineProperty(_payload$leapTableRow, 'leap_voice_' + networkDataTable[0][\"area\"], true), _payload$leapTableRow);\n              payload.disableLeapTableCheckbox = true;\n            }\n\n            leapCaptureLoaction = Object.assign(leapCaptureLoaction, networkDataTable[0]);\n            leapCaptureLoaction[\"network\"] = response.data.result.network;\n            dispatch(updateLeapCaptureLocation(leapCaptureLoaction));\n          }\n        }\n\n        dispatch(updateLeapTableRowCheckbox(payload));\n      } else {\n        dispatch(updateLeapVerifiedAddressData(null));\n        dispatch(updateLeapTableRowCheckbox(payload));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(updateLeapVerifiedAddressData(null));\n      dispatch(updateLeapTableRowCheckbox({}));\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var validateLeapCalendarDate = function validateLeapCalendarDate(choiceData) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var startDate = state.leap.leapStartDate;\n    var endDate = state.leap.leapEndDate;\n    var leapMaxDateRangeLimit = state.leap.leapInfo.leapMaxDateRangeLimit;\n    var leapMinDateRangeLimit = state.leap.leapInfo.leapMinDateRangeLimit;\n    var diff = LeapService.getDifferenceInDays(startDate, endDate) + 1;\n\n    if (!startDate || !endDate) {\n      dispatch(openSnackbarRequest(null, \"Start or End date cannot be blank.\"));\n    } else if (startDate && endDate) {\n      if (startDate >= endDate) {\n        dispatch(openSnackbarRequest(null, \"Please ensure that End Date is greater than to Start Date.\"));\n      } else if (diff > leapMaxDateRangeLimit) {\n        dispatch(openSnackbarRequest(null, \"Date range should not exceed \" + leapMaxDateRangeLimit + \" days from the start date.\"));\n      } else if (diff < leapMinDateRangeLimit) {\n        dispatch(openSnackbarRequest(null, \"Date range should not be less than \" + leapMinDateRangeLimit + \" days from the start date.\"));\n      } else {\n        dispatch(fetchNetworkDataTableRequest());\n        dispatch(handleManualChoiceButtonClick(choiceData));\n      }\n    }\n  };\n};\nexport var onFocusLeapAddressInputFieldHandler = function onFocusLeapAddressInputFieldHandler() {\n  return function (dispatch) {\n    switch (Config.leapAutocompleteOrigin) {\n      case AppConstant.MAP_MY_INDIA:\n        dispatch(generateMapMyIndiaToken());\n        break;\n\n      case AppConstant.GOOGLE_MAP:\n        dispatch(loadGoogleMapsScript());\n        break;\n\n      default:\n        break;\n    }\n  };\n};\nexport var generateMapMyIndiaToken = function generateMapMyIndiaToken() {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var isValidToken = MapMyIndiaService.validateMapMyIndiaToken();\n\n      if (isValidToken) {\n        resolve();\n      } else {\n        MapMyIndiaService.generateToken().then(function (response) {\n          if (response && response.data && response.data.access_token) {\n            var result = response.data;\n            result[\"time\"] = Date.now();\n            result[\"token\"] = result[\"token_type\"] + result[\"access_token\"];\n            CookieManagerService.setItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS, JSON.stringify(result));\n            resolve();\n          } else {\n            reject(response);\n            CookieManagerService.removeItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n          }\n        }, function (error) {\n          reject(error);\n          dispatch(openSnackbarRequest(error));\n        });\n      }\n    });\n  };\n};\nexport var loadGoogleMapsScript = function loadGoogleMapsScript() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state && state.app && state.app.isGoogleMapScriptLoaded) {// Do nothing\n    } else {\n      var head = document.getElementsByTagName('head')[0];\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = Config.googleMapScriptURL;\n      head.appendChild(script);\n      dispatch(loadGoogleMapsAPI(true));\n    }\n  };\n};\nexport var selectLeapNetworkDataHandler = function selectLeapNetworkDataHandler(item, id) {\n  return function (dispatch) {\n    var leapTableRowChecked = _defineProperty({}, id, true);\n\n    dispatch(updateLeapNetworkTableSelectedRow(leapTableRowChecked));\n    dispatch(updateLeapCaptureLocation(item));\n  };\n};\nexport var resetLeap = function resetLeap() {\n  return function (dispatch) {\n    var payload = {\n      leapTableRowChecked: {},\n      disableLeapTableCheckbox: true,\n      addressVerified: false\n    };\n    dispatch(updateLeapDetails(null));\n    dispatch(updateLeapTableRowCheckbox(payload));\n    dispatch(updateLeapCaptureLocation(null));\n  };\n};\nexport var openNetworkHandler = function openNetworkHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var latitude = state && state.leap && state.leap.latitude ? state.leap.latitude : \"\";\n    var longitude = state && state.leap && state.leap.longitude ? state.leap.longitude : \"\";\n    window.open(Config.openNetworkURL + '&lat=' + latitude + '&long=' + longitude);\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/leap.action.js"],"names":["LeapActionType","LeapService","showLoader","hideLoader","loadGoogleMapsAPI","openSnackbarRequest","handleManualChoiceButtonClick","MapMyIndiaService","CookieManagerService","AppConstant","Config","setLeapStartDate","payload","type","SET_LEAP_START_DATE","setLeapEndDate","SET_LEAP_END_DATE","setLeapCalendarStartDate","SET_LEAP_CALENDAR_START_DATE","updateLeapInfo","UPDATE_LEAP_INFO","updateLeapCaptureLocation","UPDATE_LEAP_CAPTURE_LOCATION","updateLeapNetworkTableSelectedRow","UPDATE_LEAP_NETWORK_TABLE_SELECTED_ROW","updateLeapNetworkTableData","UPADTE_LEAP_NETWORK_TABLE_DATE","updateLeapVerifiedAddressData","UPDATE_LEAP_VERIFIED_ADDRESS","updateLeapDetails","UPDATE_LEAP_DETAILS","updateLeapTableRowCheckbox","UPDATE_LEAP_TABLE_ROW_CHECKBOX","updateLeapLatLong","UPDATE_LEAP_LAT_LONG","updateLeapLongitude","UPDATE_LEAP_LONGITUDE","updateLeapLatitude","UPDATE_LEAP_LATITUDE","leapInfoHandler","stepData","dispatch","displayCalender","cdrType","daysGap","leapCalendarStartLimit","leapMaxDateRangeLimit","leapMinDateRangeLimit","getLeapDefaultStartDate","getLeapDefaultEndDate","getLeapCalendarStartDate","fetchNetworkDataTableRequest","getState","reqData","transactionId","scenario","scenarioStatus","leapStartDate","leap","leapEndDate","leapInfo","leapNetworkData","then","response","data","result","networkDataTable","length","error","fetchLeapDetailsRequest","address","state","notes","scenarioNotes","scenarioName","currentScenarioInfo","name","scenarioId","currentScenarioId","customerCategory","customerInfo","latitude","longitude","latLong","verifyCustomerLocation","customerSiteLocation","encodeURIComponent","verifyCustomerLocationRequest","leapTableRowChecked","disableLeapTableCheckbox","addressVerified","leapCaptureLoaction","Object","assign","network","validateLeapCalendarDate","choiceData","startDate","endDate","diff","getDifferenceInDays","onFocusLeapAddressInputFieldHandler","leapAutocompleteOrigin","MAP_MY_INDIA","generateMapMyIndiaToken","GOOGLE_MAP","loadGoogleMapsScript","Promise","resolve","reject","isValidToken","validateMapMyIndiaToken","generateToken","access_token","Date","now","setItem","MAP_MY_INDIA_AUTH_DETAILS","JSON","stringify","removeItem","app","isGoogleMapScriptLoaded","head","document","getElementsByTagName","script","createElement","src","googleMapScriptURL","appendChild","selectLeapNetworkDataHandler","item","id","resetLeap","openNetworkHandler","window","open","openNetworkURL"],"mappings":"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","sourcesContent":["import {\n    LeapActionType\n} from \"../actiontype/leap.actiontype\";\nimport LeapService from '../services/leap.service';\nimport {\n    showLoader,\n    hideLoader,\n    loadGoogleMapsAPI\n} from '../actions/app.action';\nimport {\n    openSnackbarRequest\n} from '../actions/snackbar.action';\nimport { handleManualChoiceButtonClick } from \"./scenario.action\";\nimport MapMyIndiaService from \"../services/map-my-india.service\";\nimport CookieManagerService from \"../services/cookie.service\";\nimport { AppConstant } from '../constants/app.constant';\nimport Config from '../config/config';\n// import { diaplayFTRMessageDialog } from '../actions/app-dialog.action';\n// import { SnackbarMessages } from '../constants/snackbar-messages';\n\nexport function setLeapStartDate(payload) {\n    return {\n        type: LeapActionType.SET_LEAP_START_DATE,\n        payload\n    };\n}\n\nexport function setLeapEndDate(payload) {\n    return {\n        type: LeapActionType.SET_LEAP_END_DATE,\n        payload\n    };\n}\n\nexport function setLeapCalendarStartDate(payload) {\n    return {\n        type: LeapActionType.SET_LEAP_CALENDAR_START_DATE,\n        payload\n    };\n}\n\nexport function updateLeapInfo(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_INFO,\n        payload\n    };\n}\n\nexport function updateLeapCaptureLocation(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_CAPTURE_LOCATION,\n        payload\n    };\n}\n\nexport function updateLeapNetworkTableSelectedRow(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_NETWORK_TABLE_SELECTED_ROW,\n        payload\n    };\n}\n\nexport function updateLeapNetworkTableData(payload) {\n    return {\n        type: LeapActionType.UPADTE_LEAP_NETWORK_TABLE_DATE,\n        payload\n    };\n}\n\nexport function updateLeapVerifiedAddressData(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_VERIFIED_ADDRESS,\n        payload\n    };\n}\n\nexport function updateLeapDetails(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_DETAILS,\n        payload\n    };\n}\n\nexport function updateLeapTableRowCheckbox(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_TABLE_ROW_CHECKBOX,\n        payload\n    };\n}\n\nexport function updateLeapLatLong(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_LAT_LONG,\n        payload\n    };\n}\n\nexport function updateLeapLongitude(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_LONGITUDE,\n        payload\n    };\n}\n\nexport function updateLeapLatitude(payload) {\n    return {\n        type: LeapActionType.UPDATE_LEAP_LATITUDE,\n        payload\n    };\n}\n\nexport const leapInfoHandler = stepData => dispatch => {\n    if(stepData.displayCalender) {\n        const payload = {\n            cdrType: stepData.cdrType,\n            daysGap: stepData.daysGap,\n            leapCalendarStartLimit: stepData.leapCalendarStartLimit,\n            leapMaxDateRangeLimit: stepData.leapMaxDateRangeLimit,\n            leapMinDateRangeLimit: stepData.leapMinDateRangeLimit\n        }\n        dispatch(setLeapStartDate(LeapService.getLeapDefaultStartDate(stepData.daysGap, stepData.leapMinDateRangeLimit - 1)));\n        dispatch(setLeapEndDate(LeapService.getLeapDefaultEndDate(stepData.daysGap)));\n        dispatch(setLeapCalendarStartDate(LeapService.getLeapCalendarStartDate(stepData.daysGap, stepData.leapCalendarStartLimit)));\n        dispatch(updateLeapInfo(payload));\n    }\n}\n\nexport const fetchNetworkDataTableRequest = () => (dispatch, getState) => {\n    const reqData = {\n        transactionId: getState().scenario.scenarioStatus[\"transactionId\"],\n        leapStartDate: getState().leap.leapStartDate,\n        leapEndDate: getState().leap.leapEndDate,\n        cdrType: getState().leap.leapInfo.cdrType\n    };\n    let leapNetworkData = [];\n    LeapService.fetchNetworkDataTableRequest(reqData).then(\n        response => {\n            if(response && response.data && response.data.result && response.data.result.networkDataTable && response.data.result.networkDataTable.length) {\n                leapNetworkData = response.data.result.networkDataTable;\n                dispatch(updateLeapNetworkTableData(leapNetworkData));\n\n            } else {\n                dispatch(updateLeapNetworkTableData(leapNetworkData));\n            }\n        },\n        error => {\n            dispatch(updateLeapNetworkTableData(leapNetworkData));\n            // dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nexport const fetchLeapDetailsRequest = (address) => (dispatch, getState) => {\n    const state = getState();\n    const reqData = {\n        notes: state.scenario.scenarioNotes,\n        scenarioName: state.scenario.currentScenarioInfo.name,\n        transactionId: state.scenario.scenarioStatus.transactionId,\n        scenarioId: state.scenario.currentScenarioId,\n        address,\n        customerCategory: state.customerInfo.customerInfo.customerCategory\n    }\n    dispatch(showLoader());\n    LeapService.fetchLeapDetailsRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if(response && response.data && response.data.result) {\n                dispatch(updateLeapDetails(response.data.result));\n                if(response.data.result.latitude && response.data.result.longitude) {\n                    const latitude = response.data.result.latitude;\n                    const longitude = response.data.result.longitude;\n                    const latLong = response.data.result.latitude + \", \" + response.data.result.longitude;\n                    dispatch(updateLeapLatitude(latitude));\n                    dispatch(updateLeapLongitude(longitude));\n                    dispatch(updateLeapLatLong(latLong));\n                }\n            } else {\n                dispatch(updateLeapDetails(null));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(updateLeapDetails(null));\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nexport const verifyCustomerLocation = (address) => (dispatch, getState) => {\n    const state = getState();\n    const reqData = {\n        transactionId: state.scenario.scenarioStatus.transactionId,\n        networkDataTable: state.leap.leapNetworkData,\n        customerSiteLocation: encodeURIComponent(address)\n    }\n    dispatch(showLoader());\n    LeapService.verifyCustomerLocationRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            const payload = {\n                leapTableRowChecked: {},\n                disableLeapTableCheckbox: false,\n                addressVerified: true\n            }\n            if(response && response.data && response.data.result && response.data.result.networkDataTable) {\n                dispatch(updateLeapVerifiedAddressData(response.data.result));\n                let leapCaptureLoaction = {};\n                if(response.data.result.networkDataTable) {\n                    var networkDataTable = response.data.result.networkDataTable;\n                    if(networkDataTable[0]) {\n                        if(networkDataTable[0][\"ismatched\"]) {\n                            payload.leapTableRowChecked = {\n                                ['leap_data_' + networkDataTable[0][\"area\"]]: true,\n                                ['leap_voice_' + networkDataTable[0][\"area\"]]: true\n                            }\n                            payload.disableLeapTableCheckbox = true;\n                        }\n                        leapCaptureLoaction = Object.assign(leapCaptureLoaction, networkDataTable[0]);\n                        leapCaptureLoaction[\"network\"] = response.data.result.network;\n                        dispatch(updateLeapCaptureLocation(leapCaptureLoaction));\n                    }\n                }\n                dispatch(updateLeapTableRowCheckbox(payload));\n            } else {\n                dispatch(updateLeapVerifiedAddressData(null));\n                dispatch(updateLeapTableRowCheckbox(payload));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(updateLeapVerifiedAddressData(null));\n            dispatch(updateLeapTableRowCheckbox({}));\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nexport const validateLeapCalendarDate = (choiceData) => (dispatch, getState) => {\n    const state = getState();\n    const startDate = state.leap.leapStartDate;\n    const endDate = state.leap.leapEndDate;\n    const leapMaxDateRangeLimit = state.leap.leapInfo.leapMaxDateRangeLimit;\n    const leapMinDateRangeLimit = state.leap.leapInfo.leapMinDateRangeLimit;\n    var diff = LeapService.getDifferenceInDays(startDate, endDate) + 1;\n    if(!startDate || !endDate) {\n        dispatch(openSnackbarRequest(null, \"Start or End date cannot be blank.\"));\n    } else if(startDate && endDate) {\n        if(startDate >= endDate) {\n            dispatch(openSnackbarRequest(null, \"Please ensure that End Date is greater than to Start Date.\"));\n        } else if(diff > leapMaxDateRangeLimit) {\n            dispatch(openSnackbarRequest(null, \"Date range should not exceed \" + leapMaxDateRangeLimit +\" days from the start date.\"));\n        } else if(diff < leapMinDateRangeLimit) {\n            dispatch(openSnackbarRequest(null, \"Date range should not be less than \" + leapMinDateRangeLimit + \" days from the start date.\"));\n        } else {\n            dispatch(fetchNetworkDataTableRequest());\n            dispatch(handleManualChoiceButtonClick(choiceData));\n        }\n    }\n}\n\nexport const onFocusLeapAddressInputFieldHandler = () => dispatch => {\n    switch(Config.leapAutocompleteOrigin) {\n        case AppConstant.MAP_MY_INDIA:\n            dispatch(generateMapMyIndiaToken());\n            break;\n        case AppConstant.GOOGLE_MAP:\n            dispatch(loadGoogleMapsScript());\n            break;\n        default:\n            break;\n    }\n}\n\nexport const generateMapMyIndiaToken = () => dispatch => {\n    return new Promise((resolve, reject) => {\n        const isValidToken = MapMyIndiaService.validateMapMyIndiaToken();\n        if(isValidToken) {\n            resolve();\n        } else {\n            MapMyIndiaService.generateToken().then(\n                response => {\n                    if(response && response.data && response.data.access_token) {\n                        const result = response.data;\n                        result[\"time\"] = Date.now();\n                        result[\"token\"] = result[\"token_type\"] + result[\"access_token\"];\n                        CookieManagerService.setItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS, JSON.stringify(result));\n                        resolve();\n                    } else {\n                        reject(response);\n                        CookieManagerService.removeItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n                    }\n                },\n                error => {\n                    reject(error);\n                    dispatch(openSnackbarRequest(error));\n                }\n            );\n        }\n    })\n}\n\nexport const  loadGoogleMapsScript = () => (dispatch, getState) => {\n    const state = getState();\n    if(state && state.app && state.app.isGoogleMapScriptLoaded) {\n        // Do nothing\n    } else {\n        const head= document.getElementsByTagName('head')[0];\n        const script= document.createElement('script');\n        script.type= 'text/javascript';\n        script.src= Config.googleMapScriptURL;\n        head.appendChild(script);\n        dispatch(loadGoogleMapsAPI(true));\n    }\n}\n\nexport const selectLeapNetworkDataHandler = (item, id) => dispatch => {\n    const leapTableRowChecked = {\n        [id]: true\n    }\n    dispatch(updateLeapNetworkTableSelectedRow(leapTableRowChecked));\n    dispatch(updateLeapCaptureLocation(item));\n}\n\nexport const resetLeap = () => dispatch => {\n    const payload = {\n        leapTableRowChecked: {},\n        disableLeapTableCheckbox: true,\n        addressVerified: false\n    }\n    dispatch(updateLeapDetails(null));\n    dispatch(updateLeapTableRowCheckbox(payload));\n    dispatch(updateLeapCaptureLocation(null));\n}\n\nexport const openNetworkHandler = () => (dispatch, getState) => {\n    const state = getState();\n    const latitude = state && state.leap && state.leap.latitude ? state.leap.latitude : \"\";\n    const longitude = state && state.leap && state.leap.longitude ? state.leap.longitude : \"\";\n    window.open(Config.openNetworkURL + '&lat=' + latitude + '&long=' + longitude);\n}"]},"metadata":{},"sourceType":"module"}