{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-suggestion/auto-predict-suggestion.smart.js\";\nimport React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-suggestion.style.css';\nimport { Button } from '@material-ui/core';\nimport { suggestionChoiceBtnHandler as _suggestionChoiceBtnHandler } from '../../../actions/prediction.action';\n\nvar AutoPredictSuggestion =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AutoPredictSuggestion, _Component);\n\n  function AutoPredictSuggestion() {\n    _classCallCheck(this, AutoPredictSuggestion);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AutoPredictSuggestion).apply(this, arguments));\n  }\n\n  _createClass(AutoPredictSuggestion, [{\n    key: \"onSuggestionChoiceBtnClick\",\n    value: function onSuggestionChoiceBtnClick(choiceObj) {\n      this.props.suggestionChoiceBtnHandler(choiceObj);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          suggestionTitle = _this$props.suggestionTitle,\n          suggestionChoiceBtnList = _this$props.suggestionChoiceBtnList,\n          displaySuggestion = _this$props.displaySuggestion,\n          predictionScenarioP3Desc = _this$props.predictionScenarioP3Desc;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"suggestion-box\" + (suggestionTitle ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"suggestion-tilte\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(ScenarioDescription, {\n        scenarioDescription: suggestionTitle || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        className: \"text-center mt-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, suggestionChoiceBtnList.map(function (item, index) {\n        return React.createElement(Button, {\n          key: index,\n          variant: \"outlined\",\n          color: \"primary\",\n          className: \"fs-14 button-outlined mr-10\",\n          onClick: function onClick() {\n            return _this.onSuggestionChoiceBtnClick(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, item.displayText);\n      }))), React.createElement(\"div\", {\n        className: \"prediction-wrapper\" + (displaySuggestion ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"prediction-blocks width-65 pt-30 pr-40 pb-30 pl-30\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"scrollable-actions\" + (predictionScenarioP3Desc ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(ScenarioDescription, {\n        scenarioDescription: predictionScenarioP3Desc || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        className: \"mt-20 suggestion-btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, suggestionChoiceBtnList.map(function (item, index) {\n        return React.createElement(Button, {\n          key: index,\n          variant: \"outlined\",\n          color: \"primary\",\n          className: \"fs-14 button-outlined mr-10\",\n          onClick: function onClick() {\n            return _this.onSuggestionChoiceBtnClick(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, item.displayText);\n      }))), React.createElement(\"div\", {\n        className: \"clear\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return AutoPredictSuggestion;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    suggestionTitle: state.prediction.suggestionTitle,\n    suggestionChoiceBtnList: state.prediction.suggestionChoiceBtnList,\n    displaySuggestion: state.prediction.displaySuggestion,\n    predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    suggestionChoiceBtnHandler: function suggestionChoiceBtnHandler(choice) {\n      return dispatch(_suggestionChoiceBtnHandler(choice));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictSuggestion);","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-suggestion/auto-predict-suggestion.smart.js"],"names":["React","Component","ScenarioDescription","connect","Button","suggestionChoiceBtnHandler","AutoPredictSuggestion","choiceObj","props","suggestionTitle","suggestionChoiceBtnList","displaySuggestion","predictionScenarioP3Desc","map","item","index","onSuggestionChoiceBtnClick","displayText","mapStateToProps","state","prediction","mapDispatchToProps","dispatch","choice"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-suggestion.style.css';\nimport { Button } from '@material-ui/core';\nimport { suggestionChoiceBtnHandler } from '../../../actions/prediction.action';\n\nclass AutoPredictSuggestion extends Component {\n\n    onSuggestionChoiceBtnClick(choiceObj) {\n        this.props.suggestionChoiceBtnHandler(choiceObj);\n    }\n\n    render() {\n        const { suggestionTitle, suggestionChoiceBtnList, displaySuggestion, predictionScenarioP3Desc } = this.props;\n        return (\n            <React.Fragment>\n                <div className={\"suggestion-box\" + (suggestionTitle ? '' : ' hidden')}>\n                    <div className={\"suggestion-tilte\"}>\n                        <ScenarioDescription scenarioDescription={suggestionTitle || ''} />\n                    </div>\n\n                    <p className={\"text-center mt-20\"}>\n                        {suggestionChoiceBtnList.map((item, index) => {\n                            return (\n                                <Button key={index} variant=\"outlined\" color=\"primary\" className=\"fs-14 button-outlined mr-10\" onClick={() => this.onSuggestionChoiceBtnClick(item)}>\n                                    {item.displayText}\n                                </Button>\n                            );\n                        })}\n                    </p>\n                </div>\n                <div className={\"prediction-wrapper\" + (displaySuggestion ? '' : ' hidden')}>\n                    <div className=\"prediction-blocks width-65 pt-30 pr-40 pb-30 pl-30\">\n\n                        <div className={\"scrollable-actions\" + (predictionScenarioP3Desc ? '' : ' hidden')}>\n                            <ScenarioDescription scenarioDescription={predictionScenarioP3Desc || ''} />\n                        </div>\n\n                        <p className={\"mt-20 suggestion-btn\"}>\n                            {suggestionChoiceBtnList.map((item, index) => {\n                                return (\n                                    <Button key={index} variant=\"outlined\" color=\"primary\" className=\"fs-14 button-outlined mr-10\" onClick={() => this.onSuggestionChoiceBtnClick(item)}>\n                                        {item.displayText}\n                                    </Button>\n                                );\n                            })}\n                        </p>\n                    </div>\n                    <div className=\"clear\"></div>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        suggestionTitle: state.prediction.suggestionTitle,\n        suggestionChoiceBtnList: state.prediction.suggestionChoiceBtnList,\n        displaySuggestion: state.prediction.displaySuggestion,\n        predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    suggestionChoiceBtnHandler: choice => dispatch(suggestionChoiceBtnHandler(choice))\n});\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictSuggestion);\n"]},"metadata":{},"sourceType":"module"}