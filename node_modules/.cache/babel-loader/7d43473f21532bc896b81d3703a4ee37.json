{"ast":null,"code":"import { CallDropDialogActionType } from \"../actiontype/call-drop-dialog.actiontype\";\nimport CallDropDialogService from '../services/call-drop-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledCallDropTagging, disabledCallDropScenarioTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\nvar snackbarMessage = {};\nexport var submitCallDropDialogData = function submitCallDropDialogData(callDropDialogObj) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.DROP_CALL_TAGGING] && callDropDialogObj['scenarioName'] === SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n      snackbarMessage = SnackbarMessages.DUPLICATE_DROP_CALL;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n      return;\n    } else if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.DROP_CALL_SCENARIO_TAGGING] && callDropDialogObj['scenarioName'] !== SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n      snackbarMessage = SnackbarMessages.DUPLICATE_DROP_CALL_SCENARIO;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n      return;\n    }\n\n    var updatedSystemCheckMap = {};\n    var updatedSystemInfoMap = {};\n\n    if (state.scenario && state.scenario.scenarioSystemCheckList) {\n      updatedSystemCheckMap = CallDropDialogService.handleUpdatedSystemChecksList(state.scenario.scenarioSystemCheckList);\n    }\n\n    if (state.scenario && state.scenario.scenarioSystemInfoList) {\n      dispatch(setDropcalllSystemInfoObject(state.scenario.scenarioSystemInfoList));\n      updatedSystemInfoMap = CallDropDialogService.handleUpdatedSystemInfoList(state.scenario.scenarioSystemInfoList);\n    }\n\n    var authDetails = CookieManagerService.getAuthDetails();\n    var myDropCallTempObj = {\n      'agentId': authDetails && authDetails['agentId'] ? authDetails['agentId'] : null,\n      'authenticationStatus': \"true\",\n      'crmCode': \"\",\n      'lob': authDetails && authDetails['lob'] ? authDetails['lob'] : null,\n      'msisdn': CookieManagerService.getItem(AppConstant.MSISDN) ? CookieManagerService.getItem(AppConstant.MSISDN) : null,\n      'notes': state.scenario && state.scenario.scenarioNotes ? state.scenario.scenarioNotes : null,\n      'scenarioId': callDropDialogObj.scenarioId,\n      'scenarioName': callDropDialogObj.scenarioName,\n      'source': authDetails && authDetails['source'] ? authDetails['source'] : null,\n      'stepId': state.scenario.currentStepId ? state.scenario.currentStepId : null,\n      'systemCheckMap': updatedSystemCheckMap ? updatedSystemCheckMap : null,\n      'systemInfoMap': updatedSystemInfoMap ? updatedSystemInfoMap : null,\n      'transactionId': CookieManagerService.getItem(AppConstant.CORRELATION_ID) || \"\"\n    };\n    dispatch(submitCallDropApiLoading());\n    CallDropDialogService.submitCallDropApi(myDropCallTempObj).then(function (response) {\n      if (response && response['data'] && response['data']['result']) {\n        dispatch(submitCallDropApiSuccess(response));\n\n        if (response['data']['result']['tagId']) {\n          snackbarMessage = SnackbarMessages.CALL_DROP_SUCCESS_MSG + \" \" + response['data']['result']['tagId']; //tagging drop call from scenario\n\n          if (callDropDialogObj && callDropDialogObj['scenarioName'] !== SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n            dispatch(disabledCallDropScenarioTagging(true));\n          } else {\n            //tagging drop call without scenario\n            dispatch(disabledCallDropTagging(true));\n          }\n        } else if (response['data']['result']['tagId'] === null) {\n          snackbarMessage = response.data.result.message;\n        } else {\n          snackbarMessage = SnackbarMessages.CALL_DROP_SUCCESS_MSG;\n        }\n\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n      }\n    }, function (error) {\n      dispatch(submitCallDropApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nfunction submitCallDropApiLoading() {\n  return {\n    type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_REQUEST\n  };\n}\n\nfunction submitCallDropApiSuccess(response) {\n  return {\n    type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_SUCCESS,\n    payload: response.data\n  };\n}\n\nfunction setDropcalllSystemInfoObject(response) {\n  return {\n    type: CallDropDialogActionType.SET_DROPCALL_SYSTEM_INFO,\n    payload: response\n  };\n}\n\nfunction submitCallDropApiFailure(error) {\n  return {\n    type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_FAILURE,\n    payload: error\n  };\n}\n\nexport var fetchCallDropDetails = function fetchCallDropDetails(callDropDialogObj) {\n  return function (dispatch) {\n    dispatch(fetchCallDropApiLoading());\n    CallDropDialogService.fetchCallDropApi().then(function (response) {\n      if (response && response['data']) {\n        dispatch(fetchCallDropApiSuccess(response)); // dispatch(openSnackbarRequest(null, SnackbarMessages.FETCH_CALL_DROP_SUCCESS_MSG));\n      }\n    }, function (error) {\n      dispatch(fetchCallDropApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nfunction fetchCallDropApiLoading() {\n  return {\n    type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_REQUEST\n  };\n}\n\nfunction fetchCallDropApiSuccess(response) {\n  return {\n    type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_SUCCESS,\n    payload: response.data\n  };\n}\n\nfunction fetchCallDropApiFailure(error) {\n  return {\n    type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_FAILURE,\n    payload: error\n  };\n} //set drop call scenario name from fetch api call or scenario drop call registered\n\n\nexport var setDropcallScenarioName = function setDropcallScenarioName(selectedDropCallScenarioName) {\n  return function (dispatch) {\n    dispatch(setDropCallScenarioNameApiSuccess(selectedDropCallScenarioName));\n  };\n};\n\nfunction setDropCallScenarioNameApiSuccess(response) {\n  return {\n    type: CallDropDialogActionType.SET_DROP_CALL_SCENARIONAME_SUCCESS,\n    payload: response\n  };\n} //set drop call scenario name from fetch api call or scenario drop call registered\n\n\nexport var checkFetchDropcallScenarioId = function checkFetchDropcallScenarioId(selectedDropCallScenarioId) {\n  return function (dispatch) {\n    dispatch(setDropCallScenarioIdApiSuccess(selectedDropCallScenarioId));\n  };\n};\n\nfunction setDropCallScenarioIdApiSuccess(response) {\n  return {\n    type: CallDropDialogActionType.SET_DROP_CALL_SCENARIOID_SUCCESS,\n    payload: response\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/call-drop-dialog.action.js"],"names":["CallDropDialogActionType","CallDropDialogService","openSnackbarRequest","SnackbarMessages","disabledCallDropTagging","disabledCallDropScenarioTagging","DisabledTaggingStatus","CookieManagerService","AppConstant","snackbarMessage","submitCallDropDialogData","callDropDialogObj","dispatch","getState","state","disabledTaggingInfo","DROP_CALL_TAGGING","DEFAULT_CALL_DROP_SCENARIO","DUPLICATE_DROP_CALL","DROP_CALL_SCENARIO_TAGGING","DUPLICATE_DROP_CALL_SCENARIO","updatedSystemCheckMap","updatedSystemInfoMap","scenario","scenarioSystemCheckList","handleUpdatedSystemChecksList","scenarioSystemInfoList","setDropcalllSystemInfoObject","handleUpdatedSystemInfoList","authDetails","getAuthDetails","myDropCallTempObj","getItem","MSISDN","scenarioNotes","scenarioId","scenarioName","currentStepId","CORRELATION_ID","submitCallDropApiLoading","submitCallDropApi","then","response","submitCallDropApiSuccess","CALL_DROP_SUCCESS_MSG","data","result","message","error","submitCallDropApiFailure","DEFAULT_ERROR_MSG","type","SUBMIT_CALL_DROP_DIALOG_REQUEST","SUBMIT_CALL_DROP_DIALOG_SUCCESS","payload","SET_DROPCALL_SYSTEM_INFO","SUBMIT_CALL_DROP_DIALOG_FAILURE","fetchCallDropDetails","fetchCallDropApiLoading","fetchCallDropApi","fetchCallDropApiSuccess","fetchCallDropApiFailure","FETCH_CALL_DROP_DIALOG_REQUEST","FETCH_CALL_DROP_DIALOG_SUCCESS","FETCH_CALL_DROP_DIALOG_FAILURE","setDropcallScenarioName","selectedDropCallScenarioName","setDropCallScenarioNameApiSuccess","SET_DROP_CALL_SCENARIONAME_SUCCESS","checkFetchDropcallScenarioId","selectedDropCallScenarioId","setDropCallScenarioIdApiSuccess","SET_DROP_CALL_SCENARIOID_SUCCESS"],"mappings":"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","sourcesContent":["import { CallDropDialogActionType } from \"../actiontype/call-drop-dialog.actiontype\";\nimport CallDropDialogService from '../services/call-drop-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledCallDropTagging, disabledCallDropScenarioTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\n\nlet snackbarMessage = {}\nexport const submitCallDropDialogData = callDropDialogObj => (dispatch, getState) => {\n    const state = getState();\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.DROP_CALL_TAGGING] && callDropDialogObj['scenarioName'] === SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n        snackbarMessage = SnackbarMessages.DUPLICATE_DROP_CALL;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n    }\n    else if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.DROP_CALL_SCENARIO_TAGGING] && callDropDialogObj['scenarioName'] !== SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n        snackbarMessage = SnackbarMessages.DUPLICATE_DROP_CALL_SCENARIO;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n    }\n    let updatedSystemCheckMap = {};\n    let updatedSystemInfoMap = {};\n\n    if (state.scenario && state.scenario.scenarioSystemCheckList) {\n        updatedSystemCheckMap = CallDropDialogService.handleUpdatedSystemChecksList(state.scenario.scenarioSystemCheckList);\n    }\n    if (state.scenario && state.scenario.scenarioSystemInfoList) {\n        dispatch(setDropcalllSystemInfoObject(state.scenario.scenarioSystemInfoList));\n        updatedSystemInfoMap = CallDropDialogService.handleUpdatedSystemInfoList(state.scenario.scenarioSystemInfoList);\n    }\n    const authDetails = CookieManagerService.getAuthDetails();\n    const myDropCallTempObj = {\n        'agentId': authDetails && authDetails['agentId'] ? authDetails['agentId'] : null,\n        'authenticationStatus': \"true\",\n        'crmCode': \"\",\n        'lob': authDetails && authDetails['lob'] ? authDetails['lob'] : null,\n        'msisdn': CookieManagerService.getItem(AppConstant.MSISDN) ? CookieManagerService.getItem(AppConstant.MSISDN) : null,\n        'notes': state.scenario && state.scenario.scenarioNotes ? state.scenario.scenarioNotes : null,\n        'scenarioId': callDropDialogObj.scenarioId,\n        'scenarioName': callDropDialogObj.scenarioName,\n        'source': authDetails && authDetails['source'] ? authDetails['source'] : null,\n        'stepId': state.scenario.currentStepId ? state.scenario.currentStepId : null,\n        'systemCheckMap': updatedSystemCheckMap ? updatedSystemCheckMap : null,\n        'systemInfoMap': updatedSystemInfoMap ? updatedSystemInfoMap : null,\n        'transactionId': CookieManagerService.getItem(AppConstant.CORRELATION_ID) || \"\",\n    }\n\n\n    dispatch(submitCallDropApiLoading());\n    CallDropDialogService.submitCallDropApi(myDropCallTempObj).then(\n        response => {\n            if (response && response['data'] && response['data']['result']) {\n                dispatch(submitCallDropApiSuccess(response));\n                if (response['data']['result']['tagId']) {\n                    snackbarMessage = SnackbarMessages.CALL_DROP_SUCCESS_MSG + \" \" + response['data']['result']['tagId'];\n                    //tagging drop call from scenario\n                    if (callDropDialogObj && callDropDialogObj['scenarioName'] !== SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO) {\n                        dispatch(disabledCallDropScenarioTagging(true));\n                    }\n                    else {\n                        //tagging drop call without scenario\n                        dispatch(disabledCallDropTagging(true));\n                    }\n                }\n                else if (response['data']['result']['tagId'] === null) {\n                    snackbarMessage = response.data.result.message;\n                }\n                else {\n                    snackbarMessage = SnackbarMessages.CALL_DROP_SUCCESS_MSG\n                }\n\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n            }\n        },\n        error => {\n            dispatch(submitCallDropApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\nfunction submitCallDropApiLoading() { return { type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_REQUEST } }\nfunction submitCallDropApiSuccess(response) { return { type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_SUCCESS, payload: response.data } }\nfunction setDropcalllSystemInfoObject(response) { return { type: CallDropDialogActionType.SET_DROPCALL_SYSTEM_INFO, payload: response } }\nfunction submitCallDropApiFailure(error) { return { type: CallDropDialogActionType.SUBMIT_CALL_DROP_DIALOG_FAILURE, payload: error } }\n\nexport const fetchCallDropDetails = callDropDialogObj => dispatch => {\n    dispatch(fetchCallDropApiLoading());\n    CallDropDialogService.fetchCallDropApi().then(\n        response => {\n            if (response && response['data']) {\n                dispatch(fetchCallDropApiSuccess(response));\n                // dispatch(openSnackbarRequest(null, SnackbarMessages.FETCH_CALL_DROP_SUCCESS_MSG));\n            }\n        },\n        error => {\n            dispatch(fetchCallDropApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\nfunction fetchCallDropApiLoading() { return { type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_REQUEST } }\nfunction fetchCallDropApiSuccess(response) { return { type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_SUCCESS, payload: response.data } }\nfunction fetchCallDropApiFailure(error) { return { type: CallDropDialogActionType.FETCH_CALL_DROP_DIALOG_FAILURE, payload: error } }\n\n//set drop call scenario name from fetch api call or scenario drop call registered\nexport const setDropcallScenarioName = selectedDropCallScenarioName => dispatch => {\n    dispatch(setDropCallScenarioNameApiSuccess(selectedDropCallScenarioName));\n}\nfunction setDropCallScenarioNameApiSuccess(response) { return { type: CallDropDialogActionType.SET_DROP_CALL_SCENARIONAME_SUCCESS, payload: response } }\n\n//set drop call scenario name from fetch api call or scenario drop call registered\nexport const checkFetchDropcallScenarioId = selectedDropCallScenarioId => dispatch => {\n    dispatch(setDropCallScenarioIdApiSuccess(selectedDropCallScenarioId));\n}\nfunction setDropCallScenarioIdApiSuccess(response) { return { type: CallDropDialogActionType.SET_DROP_CALL_SCENARIOID_SUCCESS, payload: response } }"]},"metadata":{},"sourceType":"module"}