{"ast":null,"code":"import { TaskUpdateActionType } from \"../actiontype/task-update.actiontype\";\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport SrTaskUpdateService from \"../services/task-update.service\";\nimport { openTaskUpdateDialogRequest, closeAppDialogRequest } from './app-dialog.action';\nimport { srTaskUpdateRequest } from './sr.action';\nimport CookieManagerService from \"../services/cookie.service\";\nimport { AppConstant } from \"../constants/app.constant\";\nimport { AppDialogActionType } from \"../actiontype/app-dialog.actiontype\";\nexport var fetchTaskFieldsRequest = function fetchTaskFieldsRequest(reqData) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var taskFields = {\n      taskfieldsInfo: [],\n      taskFieldsNameValuePairs: {}\n    };\n    dispatch(resetTaskFieldsForm());\n    dispatch(showLoader());\n\n    if (!reqData['srNumber']) {\n      dispatch(updateSrTaskUpdateSrNumber(''));\n      dispatch(updateSelectedSrTaskDetails([]));\n    }\n\n    SrTaskUpdateService.fetchTaskFieldsRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result && response.data.result.taskFields && response.data.result.taskFields.length) {\n        taskFields.taskfieldsInfo = response.data.result.taskFields;\n        taskFields.taskFieldsNameValuePairs = SrTaskUpdateService.getTaskFieldsNameValuePairs(taskFields.taskfieldsInfo);\n        dispatch(updateScenarioTaskFieldInfo(taskFields));\n\n        if (response.data.result.updateSrField) {\n          dispatch(updateScenarioSrFieldInfo(response.data.result.updateSrField));\n        } else {\n          dispatch(updateScenarioSrFieldInfo({}));\n        }\n\n        dispatch(openTaskUpdateDialogRequest());\n      } else {\n        // dispatch(updateScenarioDFFInfo(dffObj));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.TASK_FIELDS_NOT_FOUND));\n      }\n    }, function (error) {\n      dispatch(hideLoader()); // dispatch(updateScenarioDFFInfo(dffObj));\n\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var taskUpdateSubmitRequest = function taskUpdateSubmitRequest(caseName) {\n  return function (dispatch, getState) {\n    dispatch(closeAppDialogRequest());\n    var state = getState();\n    var nameValuePairs = state.srTaskFields.taskFieldsNameValuePairs;\n    var caseName = state.scenario.updateSrTaskCaseName; // Checking whether the srNumber to be considerd is from assign task feature or from scenario\n\n    var srNumber = state.srTaskFields.srTaskUpdateSrNumber ? state.srTaskFields.srTaskUpdateSrNumber : state.srTaskFields.taskFieldSrNumber;\n    var reqData = {\n      'scenarioName': state.scenario.currentScenarioInfo.name,\n      'transactionId': state.scenario.scenarioStatus.transactionId,\n      'nameValuePairs': nameValuePairs,\n      'taskCategoryId': state.srTaskFields.taskfieldsInfo[0].categoryId + \"\",\n      // 'srNumber': '23321677',\n      srNumber: srNumber,\n      'taskName': state.srTaskFields.taskfieldsInfo[0].taskName,\n      caseName: caseName,\n      'remedyTicketNumber': state.srTaskFields.updateSrFieldValue\n    };\n\n    if (state.srTaskFields.selectedSrTaskDetails) {\n      var taskDetails = {};\n      state.srTaskFields.selectedSrTaskDetails.map(function (e) {\n        taskDetails['' + e.categoryId] = e.taskId;\n      });\n      reqData['srTaskDetails'] = taskDetails;\n    }\n\n    dispatch(srTaskUpdateRequest(reqData));\n  };\n};\nexport var updateScenarioTaskFieldInfo = function updateScenarioTaskFieldInfo(value) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_INFO,\n    payload: value\n  };\n};\nexport var updateScenarioSrFieldInfo = function updateScenarioSrFieldInfo(value) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SR_FIELD_INFO,\n    payload: value\n  };\n};\nexport var updateTaskFieldsNameValuePairs = function updateTaskFieldsNameValuePairs(data) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_FIELD_VALUES,\n    payload: data\n  };\n};\nexport var updateTaskFieldsSrNumber = function updateTaskFieldsSrNumber(srNumber) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_SR_NUMBER,\n    payload: srNumber\n  };\n};\nexport var updateSrFieldInfoInState = function updateSrFieldInfoInState(srNumber) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SR_FIELD_VALUE,\n    payload: srNumber\n  };\n};\nexport var updateSrTaskUpdateCaseName = function updateSrTaskUpdateCaseName(caseName) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_CASE_NAME,\n    payload: caseName\n  };\n};\nexport var resetTaskFieldsForm = function resetTaskFieldsForm() {\n  return function (dispatch) {\n    dispatch(updateSrFieldInfoInState(''));\n    dispatch(updateTaskFieldsSrNumber(''));\n  };\n};\nexport function updateSrTaskUpdateCases(payload) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_CASES,\n    payload: payload\n  };\n}\nexport function updateSrTaskUpdateSrNumber(srNumber) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_SR_NUMBER,\n    payload: srNumber\n  };\n}\nexport function updateSelectedSrTaskDetails(srTaskDetails) {\n  return {\n    type: TaskUpdateActionType.UPDATE_SELECTED_SR_TASK_DETAILS,\n    payload: srTaskDetails\n  };\n}\nexport var fetchTaskFieldsRequestFromCaseSelector = function fetchTaskFieldsRequestFromCaseSelector() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var lsiNumber = state.customerInfo.customerLSINumber;\n    var caseName = state.srTaskFields.srTaskUpdateCaseName;\n    var srNumber = state.srTaskFields.srTaskUpdateSrNumber;\n    var reqData = {\n      transactionId: CookieManagerService.getItem(AppConstant.TRANSACTION_ID),\n      caseName: caseName,\n      lsiNumber: lsiNumber,\n      srNumber: srNumber\n    };\n    dispatch(fetchTaskFieldsRequest(reqData));\n  };\n};\nexport var srTaskUpdateCaseSelectorHandler = function srTaskUpdateCaseSelectorHandler(srNumber) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var reqData = {\n      srNumber: srNumber,\n      transactionId: CookieManagerService.getItem(AppConstant.TRANSACTION_ID)\n    };\n    dispatch(showLoader());\n    SrTaskUpdateService.fetchSrTaskUpdateCasesRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        dispatch(updateSrTaskUpdateSrNumber(srNumber));\n        dispatch(updateSrTaskUpdateCases(response.data.result.caseNames));\n\n        if (response.data.result.srTaskDetails) {\n          dispatch(updateSelectedSrTaskDetails(response.data.result.srTaskDetails));\n        }\n\n        dispatch(openTaskUpdateCaseSelectorDialogRequest());\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n\n      if (error && error.response && error.response.data && error.response.data.result) {\n        dispatch(openSnackbarRequest(null, error.response.data.result));\n      } else {\n        dispatch(openSnackbarRequest(error, null));\n      }\n    });\n  };\n};\nexport function openTaskUpdateCaseSelectorDialogRequest() {\n  return {\n    type: AppDialogActionType.OPEN_TASK_UPDATE_CASE_SELECTOR_REQUEST\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/task-update.action.js"],"names":["TaskUpdateActionType","showLoader","hideLoader","openSnackbarRequest","SnackbarMessages","SrTaskUpdateService","openTaskUpdateDialogRequest","closeAppDialogRequest","srTaskUpdateRequest","CookieManagerService","AppConstant","AppDialogActionType","fetchTaskFieldsRequest","reqData","dispatch","getState","state","taskFields","taskfieldsInfo","taskFieldsNameValuePairs","resetTaskFieldsForm","updateSrTaskUpdateSrNumber","updateSelectedSrTaskDetails","then","response","data","result","length","getTaskFieldsNameValuePairs","updateScenarioTaskFieldInfo","updateSrField","updateScenarioSrFieldInfo","TASK_FIELDS_NOT_FOUND","error","taskUpdateSubmitRequest","caseName","nameValuePairs","srTaskFields","scenario","updateSrTaskCaseName","srNumber","srTaskUpdateSrNumber","taskFieldSrNumber","currentScenarioInfo","name","scenarioStatus","transactionId","categoryId","taskName","updateSrFieldValue","selectedSrTaskDetails","taskDetails","map","e","taskId","value","type","UPDATE_SCENARIO_TASK_INFO","payload","UPDATE_SR_FIELD_INFO","updateTaskFieldsNameValuePairs","UPDATE_SCENARIO_TASK_FIELD_VALUES","updateTaskFieldsSrNumber","UPDATE_SCENARIO_TASK_SR_NUMBER","updateSrFieldInfoInState","UPDATE_SR_FIELD_VALUE","updateSrTaskUpdateCaseName","UPDATE_SR_TASK_UPDATE_CASE_NAME","updateSrTaskUpdateCases","UPDATE_SR_TASK_UPDATE_CASES","UPDATE_SR_TASK_UPDATE_SR_NUMBER","srTaskDetails","UPDATE_SELECTED_SR_TASK_DETAILS","fetchTaskFieldsRequestFromCaseSelector","lsiNumber","customerInfo","customerLSINumber","srTaskUpdateCaseName","getItem","TRANSACTION_ID","srTaskUpdateCaseSelectorHandler","fetchSrTaskUpdateCasesRequest","caseNames","openTaskUpdateCaseSelectorDialogRequest","OPEN_TASK_UPDATE_CASE_SELECTOR_REQUEST"],"mappings":"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","sourcesContent":["import {\n    TaskUpdateActionType\n} from \"../actiontype/task-update.actiontype\";\nimport {\n    showLoader,\n    hideLoader\n} from '../actions/app.action';\nimport {\n    openSnackbarRequest\n} from '../actions/snackbar.action';\nimport {\n    SnackbarMessages\n} from '../constants/snackbar-messages';\nimport SrTaskUpdateService from \"../services/task-update.service\";\nimport { openTaskUpdateDialogRequest, closeAppDialogRequest } from './app-dialog.action';\nimport { srTaskUpdateRequest } from './sr.action';\nimport CookieManagerService from \"../services/cookie.service\";\nimport { AppConstant } from \"../constants/app.constant\";\nimport { AppDialogActionType } from \"../actiontype/app-dialog.actiontype\";\n\n\nexport const fetchTaskFieldsRequest = (reqData) => (dispatch, getState) => {\n    const state = getState();\n    const taskFields = {\n        taskfieldsInfo: [],\n        taskFieldsNameValuePairs: {}\n    }\n    dispatch(resetTaskFieldsForm());\n    dispatch(showLoader());\n\n    if(!reqData['srNumber']) {\n        dispatch(updateSrTaskUpdateSrNumber(''))\n        dispatch(updateSelectedSrTaskDetails([]))\n    }\n\n    SrTaskUpdateService.fetchTaskFieldsRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result\n                && response.data.result.taskFields && response.data.result.taskFields.length) {\n                taskFields.taskfieldsInfo = response.data.result.taskFields;\n                taskFields.taskFieldsNameValuePairs = SrTaskUpdateService.getTaskFieldsNameValuePairs(taskFields.taskfieldsInfo);\n                dispatch(updateScenarioTaskFieldInfo(taskFields));\n                if (response.data.result.updateSrField) {\n                    dispatch(updateScenarioSrFieldInfo(response.data.result.updateSrField));\n                } else {\n                    dispatch(updateScenarioSrFieldInfo({}));\n                }\n                dispatch(openTaskUpdateDialogRequest());\n            } else {\n                // dispatch(updateScenarioDFFInfo(dffObj));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.TASK_FIELDS_NOT_FOUND));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            // dispatch(updateScenarioDFFInfo(dffObj));\n            dispatch(openSnackbarRequest(error));\n        }\n    )\n}\n\nexport const taskUpdateSubmitRequest = (caseName) => (dispatch, getState) => {\n\n    dispatch(closeAppDialogRequest());\n    const state = getState();\n    const nameValuePairs = state.srTaskFields.taskFieldsNameValuePairs;\n    const caseName = state.scenario.updateSrTaskCaseName;\n\n    // Checking whether the srNumber to be considerd is from assign task feature or from scenario\n    const srNumber = (state.srTaskFields.srTaskUpdateSrNumber) ? state.srTaskFields.srTaskUpdateSrNumber: state.srTaskFields.taskFieldSrNumber\n\n    let reqData = {\n        'scenarioName': state.scenario.currentScenarioInfo.name,\n        'transactionId': state.scenario.scenarioStatus.transactionId,\n        'nameValuePairs': nameValuePairs,\n        'taskCategoryId': state.srTaskFields.taskfieldsInfo[0].categoryId + \"\",\n        // 'srNumber': '23321677',\n        srNumber,\n        'taskName': state.srTaskFields.taskfieldsInfo[0].taskName,\n        caseName,\n        'remedyTicketNumber': state.srTaskFields.updateSrFieldValue\n    };\n\n    if(state.srTaskFields.selectedSrTaskDetails) {\n        const taskDetails = {} \n        state.srTaskFields.selectedSrTaskDetails.map(e => {\n            taskDetails[('' + e.categoryId)] = e.taskId\n        })\n        reqData['srTaskDetails'] = taskDetails\n    }\n\n    dispatch(srTaskUpdateRequest(reqData));\n};\n\nexport const updateScenarioTaskFieldInfo = value => ({\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_INFO,\n    payload: value\n});\n\nexport const updateScenarioSrFieldInfo = value => ({\n    type: TaskUpdateActionType.UPDATE_SR_FIELD_INFO,\n    payload: value\n});\n\nexport const updateTaskFieldsNameValuePairs = data => ({\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_FIELD_VALUES,\n    payload: data\n});\n\nexport const updateTaskFieldsSrNumber = srNumber => ({\n    type: TaskUpdateActionType.UPDATE_SCENARIO_TASK_SR_NUMBER,\n    payload: srNumber\n});\n\nexport const updateSrFieldInfoInState = srNumber => ({\n    type: TaskUpdateActionType.UPDATE_SR_FIELD_VALUE,\n    payload: srNumber\n});\n\nexport const updateSrTaskUpdateCaseName = caseName => ({\n    type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_CASE_NAME,\n    payload: caseName\n});\n\n\nexport const resetTaskFieldsForm = () => (dispatch) => {\n    dispatch(updateSrFieldInfoInState(''));\n    dispatch(updateTaskFieldsSrNumber(''));\n}\n\nexport function updateSrTaskUpdateCases(payload) {\n    return { \n        type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_CASES,\n        payload\n    };\n}\n\nexport function updateSrTaskUpdateSrNumber(srNumber) {\n    return { \n        type: TaskUpdateActionType.UPDATE_SR_TASK_UPDATE_SR_NUMBER,\n        payload: srNumber\n    };\n}\n\nexport function updateSelectedSrTaskDetails(srTaskDetails) {\n    return { \n        type: TaskUpdateActionType.UPDATE_SELECTED_SR_TASK_DETAILS,\n        payload: srTaskDetails\n    };\n}\n\nexport const fetchTaskFieldsRequestFromCaseSelector = () => (dispatch, getState) => {\n    const state = getState();\n\n    const lsiNumber = state.customerInfo.customerLSINumber\n    const caseName = state.srTaskFields.srTaskUpdateCaseName\n    const srNumber = state.srTaskFields.srTaskUpdateSrNumber\n\n    const reqData = {\n        transactionId: CookieManagerService.getItem(AppConstant.TRANSACTION_ID),\n        caseName,\n        lsiNumber,\n        srNumber\n    }\n\n    dispatch(fetchTaskFieldsRequest(reqData))\n}\n\nexport const srTaskUpdateCaseSelectorHandler = (srNumber) => (dispatch, getState) => {\n    const state = getState();\n\n    const reqData = {\n        srNumber,\n        transactionId: CookieManagerService.getItem(AppConstant.TRANSACTION_ID),\n    }\n\n    dispatch(showLoader());\n\n    SrTaskUpdateService.fetchSrTaskUpdateCasesRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                dispatch(updateSrTaskUpdateSrNumber(srNumber))\n                dispatch(updateSrTaskUpdateCases(response.data.result.caseNames))\n                if(response.data.result.srTaskDetails) {\n                    dispatch(updateSelectedSrTaskDetails(response.data.result.srTaskDetails))\n                }\n                dispatch(openTaskUpdateCaseSelectorDialogRequest())\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n        }, \n        error => {\n            dispatch(hideLoader());\n            if (error && error.response && error.response.data && error.response.data.result) {\n                dispatch(openSnackbarRequest(null, error.response.data.result));\n            } else {\n                dispatch(openSnackbarRequest(error, null));\n            }\n        }\n    )\n}\n\nexport function openTaskUpdateCaseSelectorDialogRequest() {\n    return { type: AppDialogActionType.OPEN_TASK_UPDATE_CASE_SELECTOR_REQUEST };\n}"]},"metadata":{},"sourceType":"module"}