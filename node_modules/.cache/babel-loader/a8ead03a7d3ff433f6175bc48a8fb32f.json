{"ast":null,"code":"import _objectWithoutProperties from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/AutoComplete.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport SearchSVG from \"../../assets/images/search.svg\";\nimport ScenarioService from '../../services/scenario.service';\nimport { debounce } from 'lodash';\nimport { openSnackbarRequest as _openSnackbarRequest } from '../../actions/snackbar.action';\nimport { showLoader as _showLoader, hideLoader as _hideLoader } from '../../actions/app.action';\nimport { updateSearchScenarioText as _updateSearchScenarioText, updateCurrentScenarioId as _updateCurrentScenarioId } from '../../actions/scenario.action';\nimport SystemTypeService from '../../services/system-type.service';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      height: 75,\n      // position: 'sticky',\n      // top: '0',\n      // margin: '20px',\n      padding: '20px'\n    },\n    container: {\n      position: 'relative'\n    },\n    suggestionsContainerOpen: {\n      position: 'relative',\n      zIndex: 10,\n      marginTop: theme.spacing.unit,\n      left: 0,\n      right: 0,\n      maxHeight: 300,\n      overflow: 'auto'\n    },\n    suggestion: {\n      display: 'block'\n    },\n    suggestionsList: {\n      margin: 0,\n      padding: 0,\n      listStyleType: 'none'\n    },\n    divider: {\n      height: theme.spacing.unit * 2\n    },\n    search: {\n      background: 'url(' + SearchSVG + ') no-repeat',\n      border: 'none',\n      width: 20,\n      height: 20,\n      cursor: 'pointer',\n      position: 'absolute',\n      top: 35,\n      right: 40,\n      '&.disable': {\n        opacity: '0.5',\n        cursor: 'not-allowed'\n      }\n    },\n    clear: {\n      cursor: 'pointer',\n      position: 'absolute',\n      top: 35,\n      right: 40,\n      fontSize: 20\n    }\n  };\n};\n\nvar AutoComplete =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AutoComplete, _React$Component);\n\n  function AutoComplete() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AutoComplete);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AutoComplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      suggestions: []\n    };\n\n    _this.handleSuggestionsFetchRequested = function (_ref) {\n      var value = _ref.value;\n\n      _this.setState({\n        suggestions: _this.getSuggestions(value)\n      });\n    };\n\n    _this.handleSuggestionsClearRequested = function () {\n      _this.setState({\n        suggestions: []\n      });\n    };\n\n    _this.scenarioSearchHandler = function (name) {\n      return function (event, _ref2) {\n        var newValue = _ref2.newValue,\n            method = _ref2.method;\n\n        if (method === \"type\") {\n          _this.props.updateSearchScenarioText(newValue);\n        }\n\n        if (newValue && newValue.length > 0 && method === \"type\") {\n          _this.searchScenario();\n        } else if (newValue && newValue.length === 0) {\n          _this.setState({\n            suggestions: []\n          });\n        }\n      };\n    };\n\n    _this.searchScenario = debounce(function () {\n      var reqdata = {\n        searchText: _this.props.searchScenarioName,\n        channel: \"\",\n        lob: \"\"\n      };\n\n      if (reqdata.searchText) {\n        ScenarioService.scenarioSearchRequest(reqdata).then(function (response) {\n          if (response && response.data && response.data.result && response.data.result.length) {\n            _this.setState({\n              suggestions: response.data.result\n            });\n          }\n        }, function (error) {\n          _this.props.openSnackbarRequest(error);\n        });\n      }\n    }, 500);\n    return _this;\n  }\n\n  _createClass(AutoComplete, [{\n    key: \"clearSearch\",\n    value: function clearSearch() {\n      this.props.updateSearchScenarioText(\"\");\n    }\n  }, {\n    key: \"renderInputComponent\",\n    value: function renderInputComponent(inputProps) {\n      var classes = inputProps.classes,\n          _inputProps$inputRef = inputProps.inputRef,\n          _inputRef = _inputProps$inputRef === void 0 ? function () {} : _inputProps$inputRef,\n          ref = inputProps.ref,\n          other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n      return React.createElement(TextField, Object.assign({\n        fullWidth: true,\n        InputProps: {\n          inputRef: function inputRef(node) {\n            ref(node);\n\n            _inputRef(node);\n          },\n          classes: {\n            input: classes.input\n          }\n        }\n      }, other, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"renderSuggestion\",\n    value: function renderSuggestion(suggestion, _ref3) {\n      var query = _ref3.query,\n          isHighlighted = _ref3.isHighlighted;\n      var matches = match(suggestion.name, query);\n      var parts = parse(suggestion.name, matches);\n      return React.createElement(MenuItem, {\n        id: suggestion.name + suggestion.id,\n        selected: isHighlighted,\n        component: \"div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, parts.map(function (part, index) {\n        return part.highlight ? React.createElement(\"span\", {\n          key: String(index),\n          style: {\n            fontWeight: 500\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, part.text) : React.createElement(\"strong\", {\n          key: String(index),\n          style: {\n            fontWeight: 300\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, part.text);\n      })));\n    }\n  }, {\n    key: \"getSuggestions\",\n    value: function getSuggestions(value) {\n      var inputValue = deburr(value.trim()).toLowerCase();\n      var inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.suggestions;\n    }\n  }, {\n    key: \"getSuggestionValue\",\n    value: function getSuggestionValue(suggestion) {\n      document.getElementById(suggestion.name + suggestion.id).scrollIntoView(false);\n      return suggestion.name;\n    }\n  }, {\n    key: \"onSuggestionSelected\",\n    value: function onSuggestionSelected(event, _ref4) {\n      var suggestion = _ref4.suggestion,\n          suggestionValue = _ref4.suggestionValue,\n          suggestionIndex = _ref4.suggestionIndex,\n          sectionIndex = _ref4.sectionIndex,\n          method = _ref4.method;\n      this.props.updateCurrentScenarioId(suggestion.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          isCustomerFound = _this$props.isCustomerFound,\n          searchScenarioName = _this$props.searchScenarioName,\n          isProspectNumber = _this$props.isProspectNumber,\n          customerInfo = _this$props.customerInfo,\n          disableSearch = _this$props.disableSearch;\n      var isOtherSystem = SystemTypeService.isOtherSystem(customerInfo);\n      var isLegacySystem = SystemTypeService.isLegacySystem(customerInfo);\n      var autosuggestProps = {\n        renderInputComponent: this.renderInputComponent,\n        suggestions: this.state.suggestions,\n        onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n        onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n        getSuggestionValue: this.getSuggestionValue,\n        renderSuggestion: this.renderSuggestion,\n        onSuggestionSelected: this.onSuggestionSelected.bind(this)\n      };\n      return React.createElement(\"div\", {\n        className: classes.root + \" bg-grey \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n        inputProps: {\n          classes: classes,\n          placeholder: 'Find an issue ...',\n          value: searchScenarioName,\n          onChange: this.scenarioSearchHandler('searchText'),\n          disabled: disableSearch\n        },\n        theme: {\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        },\n        renderSuggestionsContainer: function renderSuggestionsContainer(options) {\n          return React.createElement(Paper, Object.assign({}, options.containerProps, {\n            square: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215\n            },\n            __self: this\n          }), options.children);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        className: classes.search + (searchScenarioName.length ? ' hidden' : '') + (!isCustomerFound ? ' disable' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: classes.clear + (!searchScenarioName.length ? ' hidden' : ''),\n        onClick: this.clearSearch.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"X\"));\n    }\n  }]);\n\n  return AutoComplete;\n}(React.Component);\n\nAutoComplete.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loginInfo: state.loginInfo,\n    isCustomerFound: state.customerInfo.isCustomerFound,\n    searchScenarioName: state.scenario.searchScenarioName,\n    isProspectNumber: state.customerInfo.isProspectNumber,\n    customerInfo: state.customerInfo.customerInfo,\n    disableSearch: state.scenario.searchDisabled\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    showLoader: function showLoader() {\n      return dispatch(_showLoader());\n    },\n    hideLoader: function hideLoader() {\n      return dispatch(_hideLoader());\n    },\n    openSnackbarRequest: function openSnackbarRequest(data) {\n      return dispatch(_openSnackbarRequest(data));\n    },\n    updateCurrentScenarioId: function updateCurrentScenarioId(id) {\n      return dispatch(_updateCurrentScenarioId(id));\n    },\n    updateSearchScenarioText: function updateSearchScenarioText(text) {\n      return dispatch(_updateSearchScenarioText(text));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(AutoComplete));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/AutoComplete.js"],"names":["React","connect","PropTypes","deburr","Autosuggest","match","parse","TextField","Paper","MenuItem","withStyles","ScenarioService","debounce","openSnackbarRequest","showLoader","hideLoader","updateSearchScenarioText","updateCurrentScenarioId","SystemTypeService","styles","theme","root","height","padding","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","unit","left","right","maxHeight","overflow","suggestion","display","suggestionsList","margin","listStyleType","divider","search","background","SearchSVG","border","width","cursor","top","opacity","clear","fontSize","AutoComplete","state","suggestions","handleSuggestionsFetchRequested","value","setState","getSuggestions","handleSuggestionsClearRequested","scenarioSearchHandler","name","event","newValue","method","props","length","searchScenario","reqdata","searchText","searchScenarioName","channel","lob","scenarioSearchRequest","then","response","data","result","error","inputProps","classes","inputRef","ref","other","node","input","query","isHighlighted","matches","parts","id","map","part","index","highlight","String","fontWeight","text","inputValue","trim","toLowerCase","inputLength","document","getElementById","scrollIntoView","suggestionValue","suggestionIndex","sectionIndex","isCustomerFound","isProspectNumber","customerInfo","disableSearch","isOtherSystem","isLegacySystem","autosuggestProps","renderInputComponent","onSuggestionsFetchRequested","onSuggestionsClearRequested","getSuggestionValue","renderSuggestion","onSuggestionSelected","bind","placeholder","onChange","disabled","options","containerProps","children","clearSearch","Component","propTypes","object","isRequired","mapStateToProps","loginInfo","scenario","searchDisabled","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport SearchSVG from '../../assets/images/search.svg';\nimport ScenarioService from '../../services/scenario.service';\nimport { debounce } from 'lodash';\nimport { openSnackbarRequest } from '../../actions/snackbar.action';\nimport { showLoader, hideLoader } from '../../actions/app.action';\nimport { updateSearchScenarioText, updateCurrentScenarioId } from '../../actions/scenario.action';\nimport SystemTypeService from '../../services/system-type.service';\n\nconst styles = theme => ({\n  root: {\n    height: 75,\n    // position: 'sticky',\n    // top: '0',\n    // margin: '20px',\n    padding: '20px',\n\n  },\n  container: {\n    position: 'relative',\n  },\n  suggestionsContainerOpen: {\n    position: 'relative',\n    zIndex: 10,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0,\n    maxHeight: 300,\n    overflow: 'auto'\n  },\n  suggestion: {\n    display: 'block',\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none',\n  },\n  divider: {\n    height: theme.spacing.unit * 2,\n  },\n  search: {\n    background: 'url(' + SearchSVG + ') no-repeat',\n    border: 'none',\n    width: 20,\n    height: 20,\n    cursor: 'pointer',\n    position: 'absolute',\n    top: 35,\n    right: 40,\n    '&.disable': {\n      opacity: '0.5',\n      cursor: 'not-allowed'\n    }\n  },\n  clear: {\n    cursor: 'pointer',\n    position: 'absolute',\n    top: 35,\n    right: 40,\n    fontSize: 20\n  }\n});\n\nclass AutoComplete extends React.Component {\n  state = {\n    suggestions: [],\n  };\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    this.setState({ suggestions: this.getSuggestions(value) });\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({ suggestions: [] });\n  };\n\n  scenarioSearchHandler = name => (event, { newValue, method }) => {\n    if (method === \"type\") {\n      this.props.updateSearchScenarioText(newValue);\n    }\n    if (newValue && newValue.length > 0 && method === \"type\") {\n      this.searchScenario();\n    }\n    else if (newValue && newValue.length === 0) {\n      this.setState({ suggestions: [] })\n    }\n  };\n\n  searchScenario = debounce(() => {\n    const reqdata = {\n      searchText: this.props.searchScenarioName,\n      channel: \"\",\n      lob: \"\"\n    };\n    if (reqdata.searchText) {\n      ScenarioService.scenarioSearchRequest(reqdata).then(\n        response => {\n          if (response && response.data && response.data.result && response.data.result.length) {\n            this.setState({ suggestions: response.data.result });\n          }\n        },\n        error => {\n          this.props.openSnackbarRequest(error);\n        }\n      )\n    }\n  }, 500);\n\n  clearSearch() {\n    this.props.updateSearchScenarioText(\"\");\n  }\n\n  renderInputComponent(inputProps) {\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\n\n    return (\n      <TextField\n        fullWidth\n        InputProps={{\n          inputRef: node => {\n            ref(node);\n            inputRef(node);\n          },\n          classes: {\n            input: classes.input,\n          },\n        }}\n        {...other}\n      />\n    );\n  }\n\n  renderSuggestion(suggestion, { query, isHighlighted }) {\n    const matches = match(suggestion.name, query);\n    const parts = parse(suggestion.name, matches);\n\n    return (\n      <MenuItem id={suggestion.name + suggestion.id} selected={isHighlighted} component=\"div\">\n        <div>\n          {parts.map((part, index) => {\n            return part.highlight ? (\n              <span key={String(index)} style={{ fontWeight: 500 }}>\n                {part.text}\n              </span>\n            ) : (\n                <strong key={String(index)} style={{ fontWeight: 300 }}>\n                  {part.text}\n                </strong>\n              );\n          })}\n        </div>\n      </MenuItem>\n    );\n  }\n\n  getSuggestions(value) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : this.state.suggestions;\n  }\n\n  getSuggestionValue(suggestion) {\n    document.getElementById(suggestion.name + suggestion.id).scrollIntoView(false)\n    return suggestion.name;\n  }\n\n  onSuggestionSelected(event, { suggestion, suggestionValue, suggestionIndex, sectionIndex, method }) {\n    this.props.updateCurrentScenarioId(suggestion.id);\n  }\n\n  render() {\n    const { classes, isCustomerFound, searchScenarioName, isProspectNumber, customerInfo, disableSearch } = this.props;\n    const isOtherSystem = SystemTypeService.isOtherSystem(customerInfo);\n    const isLegacySystem = SystemTypeService.isLegacySystem(customerInfo);\n    const autosuggestProps = {\n      renderInputComponent: this.renderInputComponent,\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      onSuggestionSelected: this.onSuggestionSelected.bind(this)\n    };\n\n    return (\n      <div className={classes.root + \" bg-grey \"}>\n        <Autosuggest\n          {...autosuggestProps}\n          inputProps={{\n            classes,\n            placeholder: 'Find an issue ...',\n            value: searchScenarioName,\n            onChange: this.scenarioSearchHandler('searchText'),\n            disabled: disableSearch\n          }}\n          theme={{\n            container: classes.container,\n            suggestionsContainerOpen: classes.suggestionsContainerOpen,\n            suggestionsList: classes.suggestionsList,\n            suggestion: classes.suggestion,\n          }}\n          renderSuggestionsContainer={options => (\n            <Paper {...options.containerProps} square>\n              {options.children}\n            </Paper>\n          )}\n        />\n        <button className={classes.search + (searchScenarioName.length ? ' hidden' : '') + (!isCustomerFound ? ' disable' : '')}></button>\n        <span className={classes.clear + (!searchScenarioName.length ? ' hidden' : '')} onClick={this.clearSearch.bind(this)}>X</span>\n      </div>\n    );\n  }\n}\n\nAutoComplete.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return {\n    loginInfo: state.loginInfo,\n    isCustomerFound: state.customerInfo.isCustomerFound,\n    searchScenarioName: state.scenario.searchScenarioName,\n    isProspectNumber: state.customerInfo.isProspectNumber,\n    customerInfo: state.customerInfo.customerInfo,\n    disableSearch: state.scenario.searchDisabled\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  showLoader: () => dispatch(showLoader()),\n  hideLoader: () => dispatch(hideLoader()),\n  openSnackbarRequest: data => dispatch(openSnackbarRequest(data)),\n  updateCurrentScenarioId: id => dispatch(updateCurrentScenarioId(id)),\n  updateSearchScenarioText: text => dispatch(updateSearchScenarioText(text))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles)(AutoComplete));"]},"metadata":{},"sourceType":"module"}