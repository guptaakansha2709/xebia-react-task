{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/claim-dff/claim-dff.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './claim-dff.style';\nimport { Button, TextField, MenuItem } from '@material-ui/core';\nimport { updateClaimDFFNameValuePairs as _updateClaimDFFNameValuePairs, claimDFFSubmitRequest as _claimDFFSubmitRequest } from '../../../../actions/dff.action';\nimport { openSnackbarRequest as _openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport { DFFConstant } from '../../../../constants/dff.constant';\nimport FormValidatorService from '../../../../services/form-validator.service';\n\nvar ClaimDFF =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ClaimDFF, _Component);\n\n  function ClaimDFF() {\n    var _this;\n\n    _classCallCheck(this, ClaimDFF);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClaimDFF).call(this));\n    _this.onSubmitDFF = _this.onSubmitDFF.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ClaimDFF, [{\n    key: \"onChangeFieldValue\",\n    value: function onChangeFieldValue(event, item) {\n      this.props.updateClaimDFFNameValuePairs({\n        id: item.name,\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"disableField\",\n    value: function disableField(item) {\n      if (item && item.name === DFFConstant.INCIDENT_DISPOSITION) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"onSubmitDFF\",\n    value: function onSubmitDFF() {\n      var _this$props = this.props,\n          claimDFFInfo = _this$props.claimDFFInfo,\n          claimDFFNameValuePairs = _this$props.claimDFFNameValuePairs;\n      var errMessage = FormValidatorService.validateClaimDFF(claimDFFInfo, claimDFFNameValuePairs);\n\n      if (errMessage) {\n        this.props.openSnackbarRequest(null, errMessage);\n      } else {\n        this.props.claimDFFSubmitRequest();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          classes = _this$props2.classes,\n          claimDFFInfo = _this$props2.claimDFFInfo,\n          claimDFFNameValuePairs = _this$props2.claimDFFNameValuePairs,\n          textFieldClass = _this$props2.textFieldClass;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        },\n        className: classes.container,\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, claimDFFInfo.map(function (item, index) {\n        return React.createElement(React.Fragment, {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          id: item.name,\n          label: item.dispalyName,\n          className: textFieldClass + (item && (item.type === 'text' || item.type === 'datetime') ? '' : ' hidden '),\n          value: claimDFFNameValuePairs[item.name],\n          onChange: function onChange(e) {\n            return _this2.onChangeFieldValue(e, item);\n          },\n          margin: \"normal\",\n          disabled: _this2.disableField(item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }), React.createElement(TextField, {\n          required: item.mandatoryFlag === 'Y' ? true : false,\n          id: item.name,\n          label: item.dispalyName,\n          value: claimDFFNameValuePairs[item.name],\n          onChange: function onChange(e) {\n            return _this2.onChangeFieldValue(e, item);\n          },\n          type: \"number\",\n          className: textFieldClass + (item && item.type === 'number' ? '' : ' hidden '),\n          margin: \"normal\",\n          disabled: _this2.disableField(item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }), React.createElement(TextField, {\n          select: true,\n          id: item.name,\n          label: item.dispalyName,\n          className: textFieldClass + (item && item.type === 'combo' && item.name !== DFFConstant.INCIDENT_DISPOSITION ? '' : ' hidden '),\n          value: claimDFFNameValuePairs[item.name] || \"\",\n          onChange: function onChange(e) {\n            return _this2.onChangeFieldValue(e, item);\n          },\n          SelectProps: {\n            MenuProps: {\n              className: classes.menu\n            }\n          },\n          disabled: _this2.disableField(item),\n          margin: \"normal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(MenuItem, {\n          value: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Select\")), item.values && item.values.map(function (option) {\n          return React.createElement(MenuItem, {\n            key: option,\n            value: option,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85\n            },\n            __self: this\n          }, option);\n        })));\n      })), React.createElement(\"div\", {\n        className: classes.btnContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-primary\",\n        onClick: this.onSubmitDFF,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return ClaimDFF;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    claimDFFInfo: state.dff.claimDFFInfo,\n    claimDFFNameValuePairs: state.dff.claimDFFNameValuePairs,\n    prospectCircle: state.customerInfo.prospectCircle\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateClaimDFFNameValuePairs: function updateClaimDFFNameValuePairs(id, value) {\n      return dispatch(_updateClaimDFFNameValuePairs(id, value));\n    },\n    claimDFFSubmitRequest: function claimDFFSubmitRequest() {\n      return dispatch(_claimDFFSubmitRequest());\n    },\n    openSnackbarRequest: function openSnackbarRequest(err, msg) {\n      return dispatch(_openSnackbarRequest(err, msg));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ClaimDFF));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/claim-dff/claim-dff.smart.js"],"names":["React","Component","connect","withStyles","styles","Button","TextField","MenuItem","updateClaimDFFNameValuePairs","claimDFFSubmitRequest","openSnackbarRequest","DFFConstant","FormValidatorService","ClaimDFF","onSubmitDFF","bind","event","item","props","id","name","value","target","INCIDENT_DISPOSITION","claimDFFInfo","claimDFFNameValuePairs","errMessage","validateClaimDFF","classes","textFieldClass","preventDefault","container","map","index","dispalyName","type","e","onChangeFieldValue","disableField","mandatoryFlag","MenuProps","className","menu","values","option","btnContainer","mapStateToProps","state","dff","prospectCircle","customerInfo","mapDispatchToProps","dispatch","err","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './claim-dff.style';\nimport { Button, TextField, MenuItem } from '@material-ui/core';\nimport { updateClaimDFFNameValuePairs, claimDFFSubmitRequest } from '../../../../actions/dff.action';\nimport { openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport { DFFConstant } from '../../../../constants/dff.constant';\nimport FormValidatorService from '../../../../services/form-validator.service';\n\nclass ClaimDFF extends Component {\n\n    constructor() {\n        super();\n        this.onSubmitDFF = this.onSubmitDFF.bind(this);\n    }\n\n    onChangeFieldValue(event, item) {\n        this.props.updateClaimDFFNameValuePairs({ id: item.name, value: event.target.value });\n    }\n    disableField(item) {\n        if (item && item.name === DFFConstant.INCIDENT_DISPOSITION) {\n            return true;\n        }\n        return false;\n    }\n\n    onSubmitDFF() {\n        const { claimDFFInfo, claimDFFNameValuePairs } = this.props;\n        const errMessage = FormValidatorService.validateClaimDFF(claimDFFInfo, claimDFFNameValuePairs);\n        if (errMessage) {\n            this.props.openSnackbarRequest(null, errMessage);\n        } else {\n            this.props.claimDFFSubmitRequest();\n        }\n    }\n    render() {\n        const { classes, claimDFFInfo, claimDFFNameValuePairs, textFieldClass } = this.props;\n        return (\n            <React.Fragment>\n                <form onSubmit={event => event.preventDefault()} className={classes.container} noValidate autoComplete=\"off\">\n\n                    {claimDFFInfo.map((item, index) => {\n                        return (\n                            <React.Fragment key={index}>\n                                <TextField\n                                    id={item.name}\n                                    label={item.dispalyName}\n                                    className={textFieldClass + (item && (item.type === 'text' || item.type === 'datetime') ? '' : ' hidden ')}\n                                    value={claimDFFNameValuePairs[item.name]}\n                                    onChange={(e) => this.onChangeFieldValue(e, item)}\n                                    margin=\"normal\"\n                                    disabled={this.disableField(item)}\n                                />\n                                <TextField\n                                    required={(item.mandatoryFlag === 'Y' ? true : false)}\n                                    id={item.name}\n                                    label={item.dispalyName}\n                                    value={claimDFFNameValuePairs[item.name]}\n                                    onChange={(e) => this.onChangeFieldValue(e, item)}\n                                    type=\"number\"\n                                    className={textFieldClass + (item && item.type === 'number' ? '' : ' hidden ')}\n                                    margin=\"normal\"\n                                    disabled={this.disableField(item)}\n                                />\n                                <TextField\n                                    select\n                                    id={item.name}\n                                    label={item.dispalyName}\n                                    className={textFieldClass + (item && (item.type === 'combo' && item.name !== DFFConstant.INCIDENT_DISPOSITION) ? '' : ' hidden ')}\n                                    value={claimDFFNameValuePairs[item.name] || \"\"}\n                                    onChange={(e) => this.onChangeFieldValue(e, item)}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.menu,\n                                        },\n                                    }}\n                                    disabled={this.disableField(item)}\n                                    margin=\"normal\"\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>Select</em>\n                                    </MenuItem>\n                                    {item.values && item.values.map(option => (\n                                        <MenuItem key={option} value={option}>\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </React.Fragment>\n                        )\n                    })}\n                </form>\n                <div className={classes.btnContainer}>\n                    <Button className=\"btn-primary\" onClick={this.onSubmitDFF} variant=\"contained\" size=\"medium\" color=\"primary\">\n                        Submit\n            </Button>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        claimDFFInfo: state.dff.claimDFFInfo,\n        claimDFFNameValuePairs: state.dff.claimDFFNameValuePairs,\n        prospectCircle: state.customerInfo.prospectCircle\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    updateClaimDFFNameValuePairs: (id, value) => dispatch(updateClaimDFFNameValuePairs(id, value)),\n    claimDFFSubmitRequest: () => dispatch(claimDFFSubmitRequest()),\n    openSnackbarRequest: (err, msg) => dispatch(openSnackbarRequest(err, msg)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ClaimDFF));\n"]},"metadata":{},"sourceType":"module"}