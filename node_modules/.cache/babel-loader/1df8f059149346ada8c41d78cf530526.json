{"ast":null,"code":"import { HandsetDetailsActionType } from \"../actiontype/handset-details-card.actiontype\";\nimport HandsetDetailsCardService from '../services/handset-details-card.service';\nimport { hideCardLoader, showCardLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport MultipleTaggingService from '../services/multiple-tagging.service';\nexport var fetchHandsetDetailsCardData = function fetchHandsetDetailsCardData(handsetDetails) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state && state.HandsetDetailsCardData && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardContent) {\n      dispatch(HandsetDetailsApiSuccess(state.HandsetDetailsCardData.HandsetDetailsCardDataResponse));\n      return;\n    }\n\n    var snackbarMessage = {};\n    dispatch(HandsetDetailsApiLoading()); // dispatch(showCardLoader());\n\n    HandsetDetailsCardService.getHandsetDetails().then(function (response) {\n      // dispatch(hideCardLoader());\n      if (response && response.data && response.data.result) {\n        dispatch(HandsetDetailsApiSuccess(response.data.result));\n        dispatch(setHandsetDetailsCardLinksData(response.data.result.cardLinks));\n      } else {\n        snackbarMessage = SnackbarMessages.USAGE_DETAILS_NO_DATA;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n      }\n    }, function (error) {\n      // dispatch(hideCardLoader());\n      dispatch(HandsetDetailsApiFailure(error));\n    });\n  };\n};\n\nvar setHandsetDetailsCardLinksData = function setHandsetDetailsCardLinksData(data) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state && state.HandsetDetailsCardData && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardLinks) {\n      var cardLinksObj = state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardLinks;\n      var scenarioCardLinksObj = MultipleTaggingService.getCardLinksScenarioType(cardLinksObj);\n      dispatch(setHandsetcardLinksDataSuccess(scenarioCardLinksObj));\n    }\n  };\n};\n\nfunction setHandsetcardLinksDataSuccess(response) {\n  return {\n    type: HandsetDetailsActionType.SET_HANDSET_SCENARIO_CARD_LINKS,\n    payload: response\n  };\n}\n\nfunction HandsetDetailsApiLoading() {\n  return {\n    type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_REQUEST\n  };\n}\n\nfunction HandsetDetailsApiSuccess(response) {\n  return {\n    type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_SUCCESS,\n    payload: response\n  };\n}\n\nfunction HandsetDetailsApiFailure(error) {\n  return {\n    type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_FAILURE,\n    payload: error\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/handset-details-tab.action.js"],"names":["HandsetDetailsActionType","HandsetDetailsCardService","hideCardLoader","showCardLoader","SnackbarMessages","openSnackbarRequest","MultipleTaggingService","fetchHandsetDetailsCardData","handsetDetails","dispatch","getState","state","HandsetDetailsCardData","HandsetDetailsCardDataResponse","cardContent","HandsetDetailsApiSuccess","snackbarMessage","HandsetDetailsApiLoading","getHandsetDetails","then","response","data","result","setHandsetDetailsCardLinksData","cardLinks","USAGE_DETAILS_NO_DATA","error","HandsetDetailsApiFailure","cardLinksObj","scenarioCardLinksObj","getCardLinksScenarioType","setHandsetcardLinksDataSuccess","type","SET_HANDSET_SCENARIO_CARD_LINKS","payload","HANDSET_DETAILS_CARD_REQUEST","HANDSET_DETAILS_CARD_SUCCESS","HANDSET_DETAILS_CARD_FAILURE"],"mappings":"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","sourcesContent":["import { HandsetDetailsActionType } from \"../actiontype/handset-details-card.actiontype\";\nimport HandsetDetailsCardService from '../services/handset-details-card.service';\nimport { hideCardLoader, showCardLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport MultipleTaggingService from '../services/multiple-tagging.service';\n\nexport const fetchHandsetDetailsCardData = handsetDetails => (dispatch, getState) => {\n    const state = getState();\n    if (state && state.HandsetDetailsCardData && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardContent) {\n        dispatch(HandsetDetailsApiSuccess(state.HandsetDetailsCardData.HandsetDetailsCardDataResponse));\n        return;\n    }\n    let snackbarMessage = {}\n    dispatch(HandsetDetailsApiLoading());\n    // dispatch(showCardLoader());\n    HandsetDetailsCardService.getHandsetDetails().then(\n        response => {\n            // dispatch(hideCardLoader());\n            if (response && response.data && response.data.result) {\n                dispatch(HandsetDetailsApiSuccess(response.data.result));\n                dispatch(setHandsetDetailsCardLinksData(response.data.result.cardLinks));\n            }\n            else {\n                snackbarMessage = SnackbarMessages.USAGE_DETAILS_NO_DATA;\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n            }\n        },\n        error => {\n            // dispatch(hideCardLoader());\n            dispatch(HandsetDetailsApiFailure(error));\n        }\n    );\n}\nconst setHandsetDetailsCardLinksData = data => (dispatch, getState) => {\n    const state = getState();\n    if (state && state.HandsetDetailsCardData && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse && state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardLinks) {\n        const cardLinksObj = state.HandsetDetailsCardData.HandsetDetailsCardDataResponse.cardLinks;\n        const scenarioCardLinksObj = MultipleTaggingService.getCardLinksScenarioType(cardLinksObj);\n        dispatch(setHandsetcardLinksDataSuccess(scenarioCardLinksObj));\n    }\n\n}\nfunction setHandsetcardLinksDataSuccess(response) {\n    return {\n        type: HandsetDetailsActionType.SET_HANDSET_SCENARIO_CARD_LINKS,\n        payload: response\n    }\n}\nfunction HandsetDetailsApiLoading() {\n    return {\n        type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_REQUEST\n    }\n}\nfunction HandsetDetailsApiSuccess(response) {\n    return {\n        type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_SUCCESS,\n        payload: response\n    }\n}\nfunction HandsetDetailsApiFailure(error) {\n    return {\n        type: HandsetDetailsActionType.HANDSET_DETAILS_CARD_FAILURE,\n        payload: error\n    }\n}"]},"metadata":{},"sourceType":"module"}