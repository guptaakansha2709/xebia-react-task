{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-two/auto-predict-two.smart.js\";\nimport React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-two.style.css';\nimport { Button } from '@material-ui/core';\nimport { togglePredictionDisplay as _togglePredictionDisplay, createSRAndFTR as _createSRAndFTR } from '../../../actions/prediction.action';\nimport ToggleAutoPredict from '../toggle-auto-predict/toggle-auto-predict.dumb';\n\nvar AutoPredictTwo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AutoPredictTwo, _Component);\n\n  function AutoPredictTwo() {\n    _classCallCheck(this, AutoPredictTwo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AutoPredictTwo).apply(this, arguments));\n  }\n\n  _createClass(AutoPredictTwo, [{\n    key: \"getButtonText\",\n    value: function getButtonText(value) {\n      var crmBtnText = \"\";\n\n      if (value) {\n        if (value.indexOf(\"SR>\") !== -1) {\n          crmBtnText = \"CREATE SR\";\n        } else if (value.indexOf(\"FTR>\") !== -1) {\n          crmBtnText = crmBtnText = \"RAISE FTR\";\n        }\n      }\n\n      return crmBtnText;\n    }\n  }, {\n    key: \"choiceHandler\",\n    value: function choiceHandler(scenarioData, crmCode, priority) {\n      this.props.createSRAndFTR(scenarioData, crmCode, priority);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          predictionScenarioP2 = _this$props.predictionScenarioP2,\n          displayP1Desc = _this$props.displayP1Desc,\n          displayP2Desc = _this$props.displayP2Desc,\n          predictionScenarioP2Desc = _this$props.predictionScenarioP2Desc,\n          ftrResponseObj = _this$props.ftrResponseObj,\n          srResponseObj = _this$props.srResponseObj,\n          dffResponseObj = _this$props.dffResponseObj,\n          predictionScenarioP2CRMCode = _this$props.predictionScenarioP2CRMCode,\n          togglePredictionDisplay = _this$props.togglePredictionDisplay;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"prediction-blocks pr-30 pb-30 pl-30 shadow-sprtr prediction-panel-hover\" + (displayP2Desc ? '' : ' hidden') + (!displayP1Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? ' width-65' : '') + (displayP1Desc || ftrResponseObj || srResponseObj || dffResponseObj ? ' width-half' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"fs-90 color-lighter-grey default-line-height\" + (displayP1Desc ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"02\"), React.createElement(\"div\", {\n        className: \"scrollable-actions\" + (predictionScenarioP2Desc ? '' : ' hidden') + (!displayP1Desc ? ' mt-60' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(ScenarioDescription, {\n        scenarioDescription: predictionScenarioP2Desc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        className: \"text-right mt-20\" + (predictionScenarioP2CRMCode && !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-primary button-outlined\",\n        onClick: function onClick() {\n          return _this.choiceHandler(predictionScenarioP2, predictionScenarioP2CRMCode, 'P2');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.getButtonText(predictionScenarioP2CRMCode))), React.createElement(\"div\", {\n        className: !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(ToggleAutoPredict, {\n        from: \"next\",\n        toggleDisplay: togglePredictionDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AutoPredictTwo;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    predictionData: state.prediction.predictionData,\n    isPredictionAvailable: state.prediction.isPredictionAvailable,\n    predictionScenarioP2: state.prediction.predictionScenarioP2,\n    predictionScenarioP3: state.prediction.predictionScenarioP3,\n    predictionScenarioP2Desc: state.prediction.predictionScenarioP2Desc,\n    predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc,\n    predictionScenarioP2CRMCode: state.prediction.predictionScenarioP2CRMCode,\n    displayP1Desc: state.prediction.displayP1Desc,\n    displayP2Desc: state.prediction.displayP2Desc,\n    ftrResponseObj: state.prediction.ftrResponseObj,\n    srResponseObj: state.prediction.srResponseObj,\n    dffResponseObj: state.prediction.dffResponseObj,\n    predictionScenarioP3DescArr: state.prediction.predictionScenarioP3DescArr,\n    predictionScenarioP1ChoiceList: state.prediction.predictionScenarioP1ChoiceList,\n    predictionScenarioP2ChoiceList: state.prediction.predictionScenarioP2ChoiceList\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    togglePredictionDisplay: function togglePredictionDisplay() {\n      return dispatch(_togglePredictionDisplay());\n    },\n    createSRAndFTR: function createSRAndFTR(scenarioData, crmCode, priority) {\n      return dispatch(_createSRAndFTR(scenarioData, crmCode, priority));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictTwo);","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-two/auto-predict-two.smart.js"],"names":["React","Component","ScenarioDescription","connect","Button","togglePredictionDisplay","createSRAndFTR","ToggleAutoPredict","AutoPredictTwo","value","crmBtnText","indexOf","scenarioData","crmCode","priority","props","predictionScenarioP2","displayP1Desc","displayP2Desc","predictionScenarioP2Desc","ftrResponseObj","srResponseObj","dffResponseObj","predictionScenarioP2CRMCode","choiceHandler","getButtonText","mapStateToProps","state","predictionData","prediction","isPredictionAvailable","predictionScenarioP3","predictionScenarioP3Desc","predictionScenarioP3DescArr","predictionScenarioP1ChoiceList","predictionScenarioP2ChoiceList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-two.style.css';\nimport { Button } from '@material-ui/core';\nimport { togglePredictionDisplay, createSRAndFTR } from '../../../actions/prediction.action';\nimport ToggleAutoPredict from '../toggle-auto-predict/toggle-auto-predict.dumb';\n\nclass AutoPredictTwo extends Component {\n\n    getButtonText(value) {\n      let crmBtnText = \"\";\n      if (value) {\n        if (value.indexOf(\"SR>\") !== -1) {\n          crmBtnText = \"CREATE SR\";\n        } else if (value.indexOf(\"FTR>\") !== -1) {\n          crmBtnText = crmBtnText = \"RAISE FTR\";\n        }\n      }\n      return crmBtnText;\n    }\n\n    choiceHandler(scenarioData, crmCode, priority) {\n        this.props.createSRAndFTR(scenarioData, crmCode, priority);\n    }\n\n  render() {\n    const { predictionScenarioP2, displayP1Desc, displayP2Desc, predictionScenarioP2Desc, ftrResponseObj, srResponseObj, dffResponseObj, predictionScenarioP2CRMCode, togglePredictionDisplay } = this.props;\n    return (\n    <React.Fragment>\n        <div className={\"prediction-blocks pr-30 pb-30 pl-30 shadow-sprtr prediction-panel-hover\"  + (displayP2Desc ? '' : ' hidden') + (!displayP1Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? ' width-65' : '') + (displayP1Desc || ftrResponseObj || srResponseObj || dffResponseObj ? ' width-half' : '')}>\n\n            <h3 className={\"fs-90 color-lighter-grey default-line-height\" + (displayP1Desc ? '' : ' hidden')}>02</h3>\n\n            <div className={\"scrollable-actions\" + (predictionScenarioP2Desc ? '' : ' hidden') + (!displayP1Desc ? ' mt-60' : '')}>\n                <ScenarioDescription scenarioDescription={predictionScenarioP2Desc} />\n            </div>\n\n            <p className={\"text-right mt-20\" + (predictionScenarioP2CRMCode && (!ftrResponseObj && !srResponseObj && !dffResponseObj) ? '' : ' hidden')}>\n                <Button className=\"btn-primary button-outlined\" onClick={() => this.choiceHandler(predictionScenarioP2, predictionScenarioP2CRMCode, 'P2')}>{this.getButtonText(predictionScenarioP2CRMCode)}</Button>\n            </p>\n\n            <div className={(!ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden')}>\n                <ToggleAutoPredict from=\"next\" toggleDisplay={togglePredictionDisplay} />\n            </div>\n        </div>\n    </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      predictionData: state.prediction.predictionData,\n      isPredictionAvailable: state.prediction.isPredictionAvailable,\n      predictionScenarioP2: state.prediction.predictionScenarioP2,\n      predictionScenarioP3: state.prediction.predictionScenarioP3,\n      predictionScenarioP2Desc: state.prediction.predictionScenarioP2Desc,\n      predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc,\n      predictionScenarioP2CRMCode: state.prediction.predictionScenarioP2CRMCode,\n      displayP1Desc: state.prediction.displayP1Desc,\n      displayP2Desc: state.prediction.displayP2Desc,\n      ftrResponseObj: state.prediction.ftrResponseObj,\n      srResponseObj: state.prediction.srResponseObj,\n      dffResponseObj: state.prediction.dffResponseObj,\n      predictionScenarioP3DescArr: state.prediction.predictionScenarioP3DescArr,\n      predictionScenarioP1ChoiceList: state.prediction.predictionScenarioP1ChoiceList,\n      predictionScenarioP2ChoiceList: state.prediction.predictionScenarioP2ChoiceList,\n    };\n};\n  \nconst mapDispatchToProps = dispatch => ({\n  togglePredictionDisplay: () => dispatch(togglePredictionDisplay()),\n  createSRAndFTR: (scenarioData, crmCode, priority) => dispatch(createSRAndFTR(scenarioData, crmCode, priority)),\n});\n  \n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictTwo);\n"]},"metadata":{},"sourceType":"module"}