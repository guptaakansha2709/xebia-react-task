{"ast":null,"code":"import { LoginActionType } from \"../actiontype/login.actiontype\";\nimport LoginService from '../services/login.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from \"../services/cookie.service\";\nimport { authorizeUser, unauthorizeUser } from '../actions/authorization.actions';\nimport { resetState } from \"../actions/common.action\";\nimport ApiService from '../services/api.service';\nvar snackbarMessage = {};\nexport var fetchLoginData = function fetchLoginData(loginObj) {\n  return function (dispatch) {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n    LoginService.fetchLoginApi(loginObj).then(function (response) {\n      if (response && response.data) {\n        LoginService.loginDataHandler(response.data);\n        dispatch(authorizeUser());\n        dispatch(loginApiSuccess(response));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.LOGIN_SUCCESS_MSG));\n      }\n    }, function (error) {\n      dispatch(unauthorizeUser());\n\n      if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n        if (error['response']['data'][\"error\"] === \"invalid_token\") {\n          snackbarMessage = \"Session Timed Out\";\n        } else {\n          snackbarMessage = error['response']['data']['error_description'];\n        }\n      } else {\n        snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n      }\n\n      dispatch(loginApiFailure(error));\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\nexport var handleLogout = function handleLogout() {\n  return function (dispatch) {\n    dispatch(unauthorizeUser());\n    dispatch(resetState());\n    var token = CookieManagerService.getItem('AUTH_DETAILS');\n\n    if (!token) {\n      return;\n    } //enable all taggings from sidebar and FTr and SR\n\n\n    dispatch(enableAllTaggings());\n    AnalyticsService.trackEvent({\n      eVar9: \"b2b|dt|homepage|logout|click\",\n      eVar8: \"b2b|dt|homepage\",\n      prop21: null,\n      prop22: null,\n      prop23: null,\n      prop24: null,\n      prop25: null,\n      prop26: null,\n      prop27: null,\n      prop28: null,\n      prop29: null,\n      prop30: null,\n      prop31: null,\n      prop32: null,\n      prop33: null\n    });\n    ApiService.userLogout().then(function (response) {\n      snackbarMessage = SnackbarMessages.LOGOUT_SUCCESS;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }, function (error) {\n      if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n        if (error['response']['data'][\"error\"] === \"invalid_token\") {\n          snackbarMessage = \"Session Timed Out\";\n        } else {\n          snackbarMessage = error['response']['data']['error_description'];\n        }\n      } else {\n        snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n    CookieManagerService.clearCookie('AUTH_DETAILS');\n  };\n};\n\nfunction loginApiLoading() {\n  return {\n    type: LoginActionType.LOGIN_REQUEST\n  };\n}\n\nexport function loginApiSuccess(response) {\n  return {\n    type: LoginActionType.LOGIN_SUCCESS,\n    payload: response.data\n  };\n}\nexport function loginApiFailure(error) {\n  return {\n    type: LoginActionType.LOGIN_FAILURE,\n    payload: error\n  };\n}\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    dispatch({\n      type: LoginActionType.LOGOUT\n    });\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/login.action.js"],"names":["LoginActionType","LoginService","openSnackbarRequest","SnackbarMessages","CookieManagerService","authorizeUser","unauthorizeUser","resetState","ApiService","snackbarMessage","fetchLoginData","loginObj","dispatch","loginApiLoading","fetchLoginApi","then","response","data","loginDataHandler","loginApiSuccess","LOGIN_SUCCESS_MSG","error","LOGIN_FAILURE","loginApiFailure","handleLogout","token","getItem","enableAllTaggings","AnalyticsService","trackEvent","eVar9","eVar8","prop21","prop22","prop23","prop24","prop25","prop26","prop27","prop28","prop29","prop30","prop31","prop32","prop33","userLogout","LOGOUT_SUCCESS","clearCookie","type","LOGIN_REQUEST","LOGIN_SUCCESS","payload","logoutUser","LOGOUT"],"mappings":"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","sourcesContent":["import { LoginActionType } from \"../actiontype/login.actiontype\";\nimport LoginService from '../services/login.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from \"../services/cookie.service\"\nimport { authorizeUser, unauthorizeUser } from '../actions/authorization.actions'\nimport { resetState } from \"../actions/common.action\";\nimport ApiService from '../services/api.service';\n\nlet snackbarMessage = {}\n\nexport const fetchLoginData = loginObj => dispatch => {\n    dispatch(resetState());\n    dispatch(loginApiLoading());\n    LoginService.fetchLoginApi(loginObj).then(\n        response => {\n            if (response && response.data) {\n                LoginService.loginDataHandler(response.data);\n                dispatch(authorizeUser())\n                dispatch(loginApiSuccess(response));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.LOGIN_SUCCESS_MSG));\n            }\n        },\n        error => {\n            dispatch(unauthorizeUser());\n            if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n                if (error['response']['data'][\"error\"] === \"invalid_token\") {\n                    snackbarMessage = \"Session Timed Out\";\n                } else {\n                    snackbarMessage = error['response']['data']['error_description'];\n                }\n            }\n            else {\n                snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n            }\n            dispatch(loginApiFailure(error));\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\nexport const handleLogout = () => dispatch => {\n    dispatch(unauthorizeUser());\n    dispatch(resetState());\n    const token = CookieManagerService.getItem('AUTH_DETAILS');\n    if (!token) {\n        return;\n    }\n    //enable all taggings from sidebar and FTr and SR\n    dispatch(enableAllTaggings());\n\n    AnalyticsService.trackEvent({\n        eVar9: \"b2b|dt|homepage|logout|click\",\n        eVar8: \"b2b|dt|homepage\",\n        prop21: null,\n        prop22: null,\n        prop23: null,\n        prop24: null,\n        prop25: null,\n        prop26: null,\n        prop27: null,\n        prop28: null,\n        prop29: null,\n        prop30: null,\n        prop31: null,\n        prop32: null,\n        prop33: null,\n    })\n\n    ApiService.userLogout().then(\n        response => {\n            snackbarMessage = SnackbarMessages.LOGOUT_SUCCESS;\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        },\n        error => {\n            if (error && error['response'] && error['response']['data'] && error['response']['data']['error_description']) {\n                if (error['response']['data'][\"error\"] === \"invalid_token\") {\n                    snackbarMessage = \"Session Timed Out\";\n                } else {\n                    snackbarMessage = error['response']['data']['error_description'];\n                }\n            }\n            else {\n                snackbarMessage = SnackbarMessages.LOGIN_FAILURE;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n    CookieManagerService.clearCookie('AUTH_DETAILS')\n}\n\nfunction loginApiLoading() {\n    return {\n        type: LoginActionType.LOGIN_REQUEST\n    }\n}\nexport function loginApiSuccess(response) {\n    return {\n        type: LoginActionType.LOGIN_SUCCESS,\n        payload: response.data\n    }\n}\nexport function loginApiFailure(error) {\n    return {\n        type: LoginActionType.LOGIN_FAILURE,\n        payload: error\n    }\n}\n\n\nexport const logoutUser = () => dispatch => {\n    dispatch({\n        type: LoginActionType.LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}