{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/dnd-categories/dnd-categories.smart.js\";\nimport React, { Component } from 'react';\nimport styles from './dnd-categories.style';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { Checkbox, FormControlLabel, FormGroup, FormControl, Button } from '@material-ui/core';\nimport { activateDNDRequest as _activateDNDRequest } from '../../../../actions/sub-header.action';\nimport { openSnackbarRequest as _openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\nimport { closeAppDialogRequest as _closeAppDialogRequest } from '../../../../actions/app-dialog.action';\n\nvar DNDCategories =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DNDCategories, _Component);\n\n  function DNDCategories(props) {\n    var _this;\n\n    _classCallCheck(this, DNDCategories);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DNDCategories).call(this, props));\n\n    _this.handleChangeAddress = function (event, option) {\n      var selectedCategories = _this.state.selectedCategories;\n\n      if (event.target.checked) {\n        if (option.name && option.name.toLowerCase() === 'all') {\n          selectedCategories.splice(0, selectedCategories.length);\n        }\n\n        _this.setState({\n          selectedCategories: selectedCategories.concat(option)\n        });\n      } else {\n        var index = selectedCategories.indexOf(option);\n        selectedCategories.splice(index, 1);\n\n        _this.setState({\n          selectedCategories: selectedCategories\n        });\n      }\n    };\n\n    _this.state = {\n      selectedCategories: []\n    };\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DNDCategories, [{\n    key: \"onSubmit\",\n    value: function onSubmit() {\n      var categories = [];\n      var selectedCategories = this.state.selectedCategories;\n\n      for (var i = 0; i < selectedCategories.length; i++) {\n        categories.push(selectedCategories[i].value);\n      }\n\n      if (categories.length) {\n        this.props.activateDNDRequest(categories.join(\",\"));\n        this.props.closeAppDialogRequest();\n      } else {\n        this.props.openSnackbarRequest(null, SnackbarMessages.SELECT_DND_CATEGORY);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          customerPlanInfo = _this$props.customerPlanInfo;\n      var selectedCategories = this.state.selectedCategories;\n      var dndCategories = customerPlanInfo && customerPlanInfo['DND'] && customerPlanInfo['DND']['cardContent'] && customerPlanInfo['DND']['cardContent']['DND_CATEGORIES'] ? customerPlanInfo['DND']['cardContent']['DND_CATEGORIES'] : [];\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        component: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, dndCategories.length && dndCategories.map(function (item, index) {\n        return React.createElement(FormControlLabel, {\n          className: \"fs-14\",\n          disabled: selectedCategories.length && selectedCategories[0].name === 'All' && item.name !== 'All' ? true : false,\n          key: index,\n          value: item.name,\n          control: React.createElement(Checkbox, {\n            className: \"p-8\",\n            color: \"primary\",\n            checked: selectedCategories.indexOf(item) !== -1,\n            onChange: function onChange(event) {\n              return _this2.handleChangeAddress(event, item);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58\n            },\n            __self: this\n          }),\n          label: item.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        });\n      }))), React.createElement(\"div\", {\n        className: classes.btnContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"bgc-blue disabledButton color-white\",\n        disabled: !selectedCategories.length,\n        onClick: this.onSubmit,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return DNDCategories;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customerPlanInfo: state.customerInfo.customerPlanInfo\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    activateDNDRequest: function activateDNDRequest(data) {\n      return dispatch(_activateDNDRequest(data));\n    },\n    openSnackbarRequest: function openSnackbarRequest(error, msg) {\n      return dispatch(_openSnackbarRequest(error, msg));\n    },\n    closeAppDialogRequest: function closeAppDialogRequest() {\n      return dispatch(_closeAppDialogRequest());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DNDCategories));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/dnd-categories/dnd-categories.smart.js"],"names":["React","Component","styles","withStyles","connect","Checkbox","FormControlLabel","FormGroup","FormControl","Button","activateDNDRequest","openSnackbarRequest","SnackbarMessages","closeAppDialogRequest","DNDCategories","props","handleChangeAddress","event","option","selectedCategories","state","target","checked","name","toLowerCase","splice","length","setState","concat","index","indexOf","onSubmit","bind","categories","i","push","value","join","SELECT_DND_CATEGORY","classes","customerPlanInfo","dndCategories","map","item","btnContainer","mapStateToProps","customerInfo","mapDispatchToProps","dispatch","data","error","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport styles from './dnd-categories.style';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport { Checkbox, FormControlLabel, FormGroup, FormControl, Button } from '@material-ui/core';\nimport { activateDNDRequest } from '../../../../actions/sub-header.action';\nimport { openSnackbarRequest } from '../../../../actions/snackbar.action';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\nimport { closeAppDialogRequest } from '../../../../actions/app-dialog.action';\n\nclass DNDCategories extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCategories: []\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  handleChangeAddress = (event, option) => {\n    const { selectedCategories } = this.state;\n    if (event.target.checked) {\n      if (option.name && option.name.toLowerCase() === 'all') {\n        selectedCategories.splice(0, selectedCategories.length);\n      }\n      this.setState({ selectedCategories: selectedCategories.concat(option) })\n    } else {\n      const index = selectedCategories.indexOf(option);\n      selectedCategories.splice(index, 1);\n      this.setState({ selectedCategories })\n    }\n  };\n\n  onSubmit() {\n    const categories = [];\n    const { selectedCategories } = this.state;\n    for (let i = 0; i < selectedCategories.length; i++) {\n      categories.push(selectedCategories[i].value);\n    }\n    if (categories.length) {\n      this.props.activateDNDRequest(categories.join(\",\"));\n      this.props.closeAppDialogRequest();\n    } else {\n      this.props.openSnackbarRequest(null, SnackbarMessages.SELECT_DND_CATEGORY)\n    }\n  }\n\n  render() {\n    const { classes, customerPlanInfo } = this.props;\n    const { selectedCategories } = this.state;\n    const dndCategories = customerPlanInfo && customerPlanInfo['DND'] && customerPlanInfo['DND']['cardContent'] && customerPlanInfo['DND']['cardContent']['DND_CATEGORIES'] ? customerPlanInfo['DND']['cardContent']['DND_CATEGORIES'] : [];\n    return (\n      <div>\n        <FormControl component=\"fieldset\">\n          <FormGroup>\n            {dndCategories.length && dndCategories.map((item, index) => {\n              return (\n                <FormControlLabel className='fs-14' disabled={selectedCategories.length && selectedCategories[0].name === 'All' && item.name !== 'All' ? true : false} key={index} value={item.name} control={<Checkbox className=\"p-8\" color=\"primary\" checked={selectedCategories.indexOf(item) !== -1} onChange={event => this.handleChangeAddress(event, item)} />} label={item.name} />\n              )\n            })}\n          </FormGroup>\n        </FormControl>\n        <div className={classes.btnContainer}>\n          <Button className=\"bgc-blue disabledButton color-white\" disabled={!selectedCategories.length} onClick={this.onSubmit} variant=\"contained\" size=\"medium\" color=\"primary\">\n            Submit\n            </Button>\n        </div>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    customerPlanInfo: state.customerInfo.customerPlanInfo\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  activateDNDRequest: (data) => dispatch(activateDNDRequest(data)),\n  openSnackbarRequest: (error, msg) => dispatch(openSnackbarRequest(error, msg)),\n  closeAppDialogRequest: () => dispatch(closeAppDialogRequest())\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DNDCategories));\n"]},"metadata":{},"sourceType":"module"}