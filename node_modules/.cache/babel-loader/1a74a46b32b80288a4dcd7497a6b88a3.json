{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/multiple-tagging/multiple-tagging.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport '../../../../index.css';\nimport { closeMultipleTaggingDialog as _closeMultipleTaggingDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport ExternalIcon from \"../../../../assets/images/external.svg\";\nimport Button from '@material-ui/core/Button';\nimport { multipleDynamicTaggingHandler as _multipleDynamicTaggingHandler } from '../../../../actions/card-links.action';\nimport Tooltips from '../../../common/tooltip/tooltip.dumb';\nimport Typography from '@material-ui/core/Typography';\n\nvar MultipleTaggingDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MultipleTaggingDialog, _Component);\n\n  function MultipleTaggingDialog(props) {\n    var _this;\n\n    _classCallCheck(this, MultipleTaggingDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultipleTaggingDialog).call(this, props));\n\n    _this.handleCloseModal = function (event) {\n      _this.props.closeMultipleTaggingDialog();\n    };\n\n    _this.multipleTaggingHandler = function (item) {\n      if (item && item.value && item.additionalInfo && _this.props.multipleTaggingCardType) {\n        var crmCode = item.value;\n\n        _this.props.multipleDynamicTaggingHandler(crmCode, _this.props.multipleTaggingCardType, item.additionalInfo);\n      }\n    };\n\n    _this.handleCloseModal = _this.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(MultipleTaggingDialog, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          multipleTaggingObjectInfo = _this$props.multipleTaggingObjectInfo,\n          multipleTaggingDialogTitle = _this$props.multipleTaggingDialogTitle,\n          multipleTaggingDialogStatus = _this$props.multipleTaggingDialogStatus;\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: multipleTaggingDialogStatus,\n        onClose: this.handleCloseModal,\n        maxWidth: \"sm\",\n        fullWidth: true,\n        \"aria-labelledby\": \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, multipleTaggingDialogTitle, React.createElement(IconButton, {\n        \"aria-label\": \"Close\",\n        className: classes.closeButton,\n        onClick: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }))), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        },\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, multipleTaggingObjectInfo && multipleTaggingObjectInfo.length && React.createElement(Grid, {\n        container: true,\n        className: \"spacing-24\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        fullWidth: true,\n        component: \"fieldset\",\n        className: classes.formControl + \" display-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, multipleTaggingObjectInfo && multipleTaggingObjectInfo.map(function (item, index) {\n        return React.createElement(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          className: classes.taggingblock + \" multi-tag-btn\",\n          key: item['additionalInfo'],\n          size: \"large\",\n          onClick: function onClick() {\n            return _this2.multipleTaggingHandler(item);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          className: \"inline-block mr-10 max-w-200\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(Tooltips, {\n          tooltipText: item['additionalInfo'].toUpperCase(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(Typography, {\n          variant: \"inherit\",\n          noWrap: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, item['additionalInfo'], \" \", React.createElement(\"span\", {\n          className: \"multi-tag-icon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, \" \", React.createElement(\"img\", {\n          src: ExternalIcon,\n          className: classes.tagIcon,\n          alt: \"tagging\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }))))));\n      })))))));\n    }\n  }]);\n\n  return MultipleTaggingDialog;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    closeMultipleTaggingDialog: function closeMultipleTaggingDialog() {\n      return dispatch(_closeMultipleTaggingDialog());\n    },\n    multipleDynamicTaggingHandler: function multipleDynamicTaggingHandler(crmCode, multipleTaggingCardSource, dynamicKey) {\n      return dispatch(_multipleDynamicTaggingHandler(crmCode, multipleTaggingCardSource, dynamicKey));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    multipleTaggingDialogStatus: state.dialogInfo.multipleTaggingDialogStatus,\n    multipleTaggingDialogTitle: state.dialogInfo.multipleTaggingDialogTitle,\n    multipleTaggingObjectInfo: state.multipleTaggingInfo.multipleTaggingObject,\n    multipleTaggingCardType: state.multipleTaggingInfo.multipleTaggingCardType\n  };\n};\n\nMultipleTaggingDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(MultipleTaggingDialog));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/multiple-tagging/multiple-tagging.smart.js"],"names":["React","Component","connect","Dialog","DialogContent","DialogTitle","PropTypes","withStyles","IconButton","CloseIcon","closeMultipleTaggingDialog","styles","Grid","FormControl","Button","multipleDynamicTaggingHandler","Tooltips","Typography","MultipleTaggingDialog","props","handleCloseModal","event","multipleTaggingHandler","item","value","additionalInfo","multipleTaggingCardType","crmCode","bind","multipleTaggingObjectInfo","multipleTaggingDialogTitle","multipleTaggingDialogStatus","classes","closeButton","preventDefault","length","formControl","map","index","taggingblock","toUpperCase","ExternalIcon","tagIcon","mapDispatchToProps","dispatch","multipleTaggingCardSource","dynamicKey","mapStateToProps","state","dialogInfo","multipleTaggingInfo","multipleTaggingObject","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport '../../../../index.css';\nimport { closeMultipleTaggingDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport Grid from '@material-ui/core/Grid';\nimport FormControl from '@material-ui/core/FormControl';\nimport ExternalIcon from '../../../../assets/images/external.svg';\nimport Button from '@material-ui/core/Button';\nimport { multipleDynamicTaggingHandler } from '../../../../actions/card-links.action';\nimport Tooltips from '../../../common/tooltip/tooltip.dumb';\nimport Typography from '@material-ui/core/Typography';\n\nclass MultipleTaggingDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    }\n\n\n    handleCloseModal = (event) => {\n        this.props.closeMultipleTaggingDialog();\n\n    }\n    multipleTaggingHandler = (item) => {\n        if (item && item.value && item.additionalInfo && this.props.multipleTaggingCardType) {\n            const crmCode = item.value;\n            this.props.multipleDynamicTaggingHandler(crmCode, this.props.multipleTaggingCardType, item.additionalInfo);\n        }\n\n    }\n\n    render() {\n        const { multipleTaggingObjectInfo, multipleTaggingDialogTitle, multipleTaggingDialogStatus } = this.props;\n        const { classes } = this.props;\n        return (\n            <React.Fragment>\n                <Dialog\n                    open={multipleTaggingDialogStatus}\n                    onClose={this.handleCloseModal}\n                    maxWidth={`sm`}\n                    fullWidth={true}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        {multipleTaggingDialogTitle}\n                        <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.handleCloseModal}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={event => event.preventDefault()} noValidate autoComplete=\"off\">\n                            {multipleTaggingObjectInfo && multipleTaggingObjectInfo.length &&\n                                <Grid container className=\"spacing-24\">\n                                    <FormControl fullWidth component=\"fieldset\" className={classes.formControl + \" display-block\"}>\n                                        {multipleTaggingObjectInfo && multipleTaggingObjectInfo.map((item, index) => {\n                                            return (\n                                                <Button variant=\"outlined\" color=\"primary\" className={classes.taggingblock + \" multi-tag-btn\"} key={item['additionalInfo']} size=\"large\" onClick={() => this.multipleTaggingHandler(item)}>\n                                                    <span className=\"inline-block mr-10 max-w-200\">\n                                                        <Tooltips tooltipText={item['additionalInfo'].toUpperCase()}>\n                                                            <Typography variant=\"inherit\" noWrap>\n                                                                {item['additionalInfo']} <span className=\"multi-tag-icon\"> <img src={ExternalIcon} className={classes.tagIcon} alt=\"tagging\" /></span>\n                                                            </Typography>\n                                                        </Tooltips>\n                                                    </span>\n\n\n                                                </Button>\n\n                                            )\n                                        })}\n                                    </FormControl>\n                                </Grid>\n                            }\n                        </form>\n\n\n                    </DialogContent>\n                </Dialog>\n            </React.Fragment>\n\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    closeMultipleTaggingDialog: () => dispatch(closeMultipleTaggingDialog()),\n    multipleDynamicTaggingHandler: (crmCode, multipleTaggingCardSource, dynamicKey) => dispatch(multipleDynamicTaggingHandler(crmCode, multipleTaggingCardSource, dynamicKey)),\n});\nconst mapStateToProps = state => {\n    return {\n        multipleTaggingDialogStatus: state.dialogInfo.multipleTaggingDialogStatus,\n        multipleTaggingDialogTitle: state.dialogInfo.multipleTaggingDialogTitle,\n        multipleTaggingObjectInfo: state.multipleTaggingInfo.multipleTaggingObject,\n        multipleTaggingCardType: state.multipleTaggingInfo.multipleTaggingCardType\n    };\n}\n\nMultipleTaggingDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(withStyles(styles)(MultipleTaggingDialog));"]},"metadata":{},"sourceType":"module"}