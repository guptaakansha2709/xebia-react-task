{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/call-drop-dialog/call-drop-dialog.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport '../../../../index.css';\nimport { submitCallDropDialogData as _submitCallDropDialogData, fetchCallDropDetails as _fetchCallDropDetails, setDropcallScenarioName as _setDropcallScenarioName, checkFetchDropcallScenarioId as _checkFetchDropcallScenarioId } from '../../../../actions/call-drop-dialog.action';\nimport { closeCallDropDialog as _closeCallDropDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport { updateCurrentScenarioIdAndStep as _updateCurrentScenarioIdAndStep, handleSystemChecks as _handleSystemChecks, handleDropCallSystemInfo as _handleDropCallSystemInfo } from '../../../../actions/scenario.action';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\n\nvar CallDropDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CallDropDialog, _Component);\n\n  function CallDropDialog(props) {\n    var _this;\n\n    _classCallCheck(this, CallDropDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CallDropDialog).call(this, props));\n\n    _this.handleCallDropScenario = function () {\n      if (_this.props.fetchSetDropCallScenarioId && _this.props.fetchCallDropApiResponse.result.stepId) {\n        var stepId = _this.props.fetchCallDropApiResponse.result.stepId;\n\n        _this.props.updateCurrentScenarioIdAndStep(_this.props.fetchSetDropCallScenarioId, stepId);\n      } else if (_this.props.fetchSetDropCallScenarioId) {\n        _this.props.updateCurrentScenarioIdAndStep(_this.props.fetchSetDropCallScenarioId);\n      }\n\n      if (_this.props.fetchCallDropApiResponse && _this.props.fetchCallDropApiResponse.result) {\n        if (_this.props.fetchCallDropApiResponse.result.systemCheckMap) {\n          _this.props.handleSystemChecks(_this.props.fetchCallDropApiResponse.result.systemCheckMap);\n        }\n\n        if (_this.props.fetchCallDropApiResponse.result.systemInfoMap && _this.props.fetchDropCallsystemInfoObj) {\n          _this.props.handleDropCallSystemInfo(_this.props.fetchDropCallsystemInfoObj);\n        }\n      }\n\n      _this.handleCloseModal();\n    };\n\n    _this.handleCallDropSubmit = function (event) {\n      event.preventDefault();\n      var callDropDialogObj = {};\n      callDropDialogObj = {\n        'scenarioName': _this.props.currentScenarioName ? _this.props.currentScenarioName : SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO,\n        'scenarioId': _this.props.currentScenarioId ? _this.props.currentScenarioId : SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO\n      };\n\n      _this.props.submitCallDropDialogData(callDropDialogObj);\n\n      _this.handleCloseModal();\n    };\n\n    _this.checkFetchScenarioDropCallTagging = function () {\n      //fetch scenario name if scenario drop call is registered\n      if (_this.props.currentScenarioName && _this.props.dropCallScenariotaggingStatus === true) {\n        _this.props.setDropcallScenarioName(_this.props.currentScenarioName);\n\n        _this.props.checkFetchDropcallScenarioId(_this.props.currentScenarioId);\n\n        return true;\n      } else if (_this.props && _this.props.fetchCallDropApiResponse && _this.props.fetchCallDropApiResponse.result && _this.props.fetchCallDropApiResponse.result.scenarioName) {\n        var fetchEdDropCallScenarioName = _this.props.fetchCallDropApiResponse.result.scenarioName;\n        var fetchDroppedCallScenarioId = _this.props.fetchCallDropApiResponse.result.scenarioId;\n\n        _this.props.setDropcallScenarioName(fetchEdDropCallScenarioName);\n\n        if (fetchDroppedCallScenarioId) {\n          _this.props.checkFetchDropcallScenarioId(fetchDroppedCallScenarioId);\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    _this.handleCloseModal = function () {\n      _this.props.closeCallDropDialog();\n    };\n\n    _this.handleCallDropSubmit = _this.handleCallDropSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCloseModal = _this.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCallDropScenario = _this.handleCallDropScenario.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CallDropDialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props) {\n        this.props.fetchCallDropDetails();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          callDropDialogTitle = _this$props.callDropDialogTitle,\n          callDropDialogStatus = _this$props.callDropDialogStatus,\n          fetchSetDropCallScenarioName = _this$props.fetchSetDropCallScenarioName;\n      var classes = this.props.classes;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: callDropDialogStatus,\n        maxWidth: \"sm\",\n        fullWidth: true,\n        onClose: this.handleCloseModal,\n        \"aria-labelledby\": \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, callDropDialogTitle, React.createElement(IconButton, {\n        \"aria-label\": \"Close\",\n        className: classes.closeButton,\n        onClick: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }))), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, !this.checkFetchScenarioDropCallTagging() && React.createElement(\"div\", {\n        className: classes.buttonHeading + ' fs-18',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"No Dropped Call Registered\"), this.checkFetchScenarioDropCallTagging() && fetchSetDropCallScenarioName && React.createElement(Button, {\n        variant: \"contained\",\n        className: classes.button,\n        onClick: this.handleCallDropScenario,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, fetchSetDropCallScenarioName)), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        size: \"large\",\n        className: \"text-capitalize bgc-blue color-white clear\",\n        onClick: this.handleCallDropSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Register DropCall\"))));\n    }\n  }]);\n\n  return CallDropDialog;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    submitCallDropDialogData: function submitCallDropDialogData(data) {\n      return dispatch(_submitCallDropDialogData(data));\n    },\n    closeCallDropDialog: function closeCallDropDialog(data) {\n      return dispatch(_closeCallDropDialog(data));\n    },\n    fetchCallDropDetails: function fetchCallDropDetails(data) {\n      return dispatch(_fetchCallDropDetails(data));\n    },\n    updateCurrentScenarioIdAndStep: function updateCurrentScenarioIdAndStep(scenarioId, stepId) {\n      return dispatch(_updateCurrentScenarioIdAndStep(scenarioId, stepId));\n    },\n    setDropcallScenarioName: function setDropcallScenarioName(scenarioName) {\n      return dispatch(_setDropcallScenarioName(scenarioName));\n    },\n    checkFetchDropcallScenarioId: function checkFetchDropcallScenarioId(scenarioId) {\n      return dispatch(_checkFetchDropcallScenarioId(scenarioId));\n    },\n    handleSystemChecks: function handleSystemChecks(data) {\n      return dispatch(_handleSystemChecks(data));\n    },\n    handleDropCallSystemInfo: function handleDropCallSystemInfo(data) {\n      return dispatch(_handleDropCallSystemInfo(data));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    callDropDialogStatus: state.dialogInfo.callDropDialogStatus,\n    callDropDialogTitle: state.dialogInfo.callDropDialogTitle,\n    submitCallDropApiResponse: state.callDropInfo.submitCallDropApiResponse,\n    fetchCallDropApiResponse: state.callDropInfo.fetchCallDropApiResponse,\n    currentScenarioName: state.scenario.currentScenarioInfo.name,\n    currentScenarioId: state.scenario.currentScenarioInfo.id,\n    dropCallScenariotaggingStatus: state.disabledTaggingInfo.DROP_CALL_SCENARIO_TAGGING,\n    fetchSetDropCallScenarioName: state.callDropInfo.fetchSetDropCallScenarioName,\n    fetchSetDropCallScenarioId: state.callDropInfo.fetchSetDropCallScenarioId,\n    fetchDropCallsystemInfoObj: state.callDropInfo.fetchDropCallsystemInfoObj\n  };\n};\n\nCallDropDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(CallDropDialog));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/call-drop-dialog/call-drop-dialog.smart.js"],"names":["React","Component","connect","Button","Dialog","DialogActions","DialogContent","DialogTitle","PropTypes","withStyles","IconButton","CloseIcon","submitCallDropDialogData","fetchCallDropDetails","setDropcallScenarioName","checkFetchDropcallScenarioId","closeCallDropDialog","styles","updateCurrentScenarioIdAndStep","handleSystemChecks","handleDropCallSystemInfo","SnackbarMessages","CallDropDialog","props","handleCallDropScenario","fetchSetDropCallScenarioId","fetchCallDropApiResponse","result","stepId","systemCheckMap","systemInfoMap","fetchDropCallsystemInfoObj","handleCloseModal","handleCallDropSubmit","event","preventDefault","callDropDialogObj","currentScenarioName","DEFAULT_CALL_DROP_SCENARIO","currentScenarioId","checkFetchScenarioDropCallTagging","dropCallScenariotaggingStatus","scenarioName","fetchEdDropCallScenarioName","fetchDroppedCallScenarioId","scenarioId","bind","callDropDialogTitle","callDropDialogStatus","fetchSetDropCallScenarioName","classes","closeButton","buttonHeading","button","mapDispatchToProps","dispatch","data","mapStateToProps","state","dialogInfo","submitCallDropApiResponse","callDropInfo","scenario","currentScenarioInfo","name","id","disabledTaggingInfo","DROP_CALL_SCENARIO_TAGGING","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport '../../../../index.css';\nimport { submitCallDropDialogData, fetchCallDropDetails, setDropcallScenarioName, checkFetchDropcallScenarioId } from '../../../../actions/call-drop-dialog.action';\nimport { closeCallDropDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport { updateCurrentScenarioIdAndStep, handleSystemChecks, handleDropCallSystemInfo } from '../../../../actions/scenario.action';\nimport { SnackbarMessages } from '../../../../constants/snackbar-messages';\n\nclass CallDropDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCallDropSubmit = this.handleCallDropSubmit.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.handleCallDropScenario = this.handleCallDropScenario.bind(this);\n    }\n    componentDidMount() {\n        if (this.props) {\n            this.props.fetchCallDropDetails();\n        }\n    }\n    handleCallDropScenario = () => {\n        if (this.props.fetchSetDropCallScenarioId && this.props.fetchCallDropApiResponse.result.stepId) {\n            const stepId = this.props.fetchCallDropApiResponse.result.stepId;\n            this.props.updateCurrentScenarioIdAndStep(this.props.fetchSetDropCallScenarioId, stepId)\n        }\n        else if (this.props.fetchSetDropCallScenarioId) {\n            this.props.updateCurrentScenarioIdAndStep(this.props.fetchSetDropCallScenarioId)\n        }\n        if (this.props.fetchCallDropApiResponse && this.props.fetchCallDropApiResponse.result) {\n            if (this.props.fetchCallDropApiResponse.result.systemCheckMap) {\n                this.props.handleSystemChecks(this.props.fetchCallDropApiResponse.result.systemCheckMap);\n            }\n            if (this.props.fetchCallDropApiResponse.result.systemInfoMap && this.props.fetchDropCallsystemInfoObj) {\n                this.props.handleDropCallSystemInfo(this.props.fetchDropCallsystemInfoObj);\n            }\n        }\n        this.handleCloseModal();\n    }\n    handleCallDropSubmit = (event) => {\n        event.preventDefault();\n        let callDropDialogObj = {};\n        callDropDialogObj = {\n            'scenarioName': this.props.currentScenarioName ? this.props.currentScenarioName : SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO,\n            'scenarioId': this.props.currentScenarioId ? this.props.currentScenarioId : SnackbarMessages.DEFAULT_CALL_DROP_SCENARIO,\n        }\n        this.props.submitCallDropDialogData(callDropDialogObj);\n\n        this.handleCloseModal();\n    }\n    checkFetchScenarioDropCallTagging = () => {\n        //fetch scenario name if scenario drop call is registered\n        if (this.props.currentScenarioName && this.props.dropCallScenariotaggingStatus === true) {\n            this.props.setDropcallScenarioName(this.props.currentScenarioName);\n            this.props.checkFetchDropcallScenarioId(this.props.currentScenarioId);\n\n            return true;\n        }\n        else if (this.props && this.props.fetchCallDropApiResponse && this.props.fetchCallDropApiResponse.result && this.props.fetchCallDropApiResponse.result.scenarioName) {\n            const fetchEdDropCallScenarioName = this.props.fetchCallDropApiResponse.result.scenarioName;\n            const fetchDroppedCallScenarioId = this.props.fetchCallDropApiResponse.result.scenarioId;\n            this.props.setDropcallScenarioName(fetchEdDropCallScenarioName);\n            if (fetchDroppedCallScenarioId) {\n                this.props.checkFetchDropcallScenarioId(fetchDroppedCallScenarioId);\n            }\n\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    handleCloseModal = () => {\n        this.props.closeCallDropDialog();\n    }\n\n\n    render() {\n        const { callDropDialogTitle, callDropDialogStatus, fetchSetDropCallScenarioName } = this.props;\n        const { classes } = this.props;\n        return (\n            <React.Fragment>\n                <Dialog\n                    open={callDropDialogStatus}\n                    maxWidth={`sm`}\n                    fullWidth={true}\n                    onClose={this.handleCloseModal}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        {callDropDialogTitle}\n                        <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.handleCloseModal}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        {(!this.checkFetchScenarioDropCallTagging()) && <div className={classes.buttonHeading + ' fs-18'}>{\"No Dropped Call Registered\"}</div>}\n                        {this.checkFetchScenarioDropCallTagging() && fetchSetDropCallScenarioName &&\n                            <Button variant=\"contained\" className={classes.button} onClick={this.handleCallDropScenario}>\n                                {fetchSetDropCallScenarioName}\n                            </Button>\n                        }\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"contained\" size=\"large\" className=\"text-capitalize bgc-blue color-white clear\" onClick={this.handleCallDropSubmit}>Register DropCall</Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n\n        )\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    submitCallDropDialogData: data => dispatch(submitCallDropDialogData(data)),\n    closeCallDropDialog: data => dispatch(closeCallDropDialog(data)),\n    fetchCallDropDetails: data => dispatch(fetchCallDropDetails(data)),\n    updateCurrentScenarioIdAndStep: (scenarioId, stepId) => dispatch(updateCurrentScenarioIdAndStep(scenarioId, stepId)),\n    setDropcallScenarioName: scenarioName => dispatch(setDropcallScenarioName(scenarioName)),\n    checkFetchDropcallScenarioId: scenarioId => dispatch(checkFetchDropcallScenarioId(scenarioId)),\n    handleSystemChecks: data => dispatch(handleSystemChecks(data)),\n    handleDropCallSystemInfo: data => dispatch(handleDropCallSystemInfo(data)),\n});\n\nconst mapStateToProps = state => {\n    return {\n        callDropDialogStatus: state.dialogInfo.callDropDialogStatus,\n        callDropDialogTitle: state.dialogInfo.callDropDialogTitle,\n        submitCallDropApiResponse: state.callDropInfo.submitCallDropApiResponse,\n        fetchCallDropApiResponse: state.callDropInfo.fetchCallDropApiResponse,\n        currentScenarioName: state.scenario.currentScenarioInfo.name,\n        currentScenarioId: state.scenario.currentScenarioInfo.id,\n        dropCallScenariotaggingStatus: state.disabledTaggingInfo.DROP_CALL_SCENARIO_TAGGING,\n        fetchSetDropCallScenarioName: state.callDropInfo.fetchSetDropCallScenarioName,\n        fetchSetDropCallScenarioId: state.callDropInfo.fetchSetDropCallScenarioId,\n        fetchDropCallsystemInfoObj: state.callDropInfo.fetchDropCallsystemInfoObj,\n    };\n}\n\nCallDropDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(withStyles(styles)(CallDropDialog));"]},"metadata":{},"sourceType":"module"}