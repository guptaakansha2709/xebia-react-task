{"ast":null,"code":"import { UWQActionType } from \"../actiontype/universal-work-queue.actiontype\";\nimport UtilService from \"../services/util.service\";\nimport UniversalWorkQueueService from \"../services/universal-work-queue.service\";\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from \"./snackbar.action\";\nimport RequestStatusConstant from \"../constants/request-status.constant\";\nexport var toggleUWQWindowDisplay = function toggleUWQWindowDisplay() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var displayTickets = state.uwq.displayTickets;\n\n    if (!displayTickets) {\n      UtilService.hidePageScroll();\n      dispatch(fetchUWQRequest());\n    } else {\n      UtilService.resetPageScroll();\n      dispatch(displayUWQWindowFlag(!displayTickets));\n    }\n  };\n};\nexport var displayUWQWindowFlag = function displayUWQWindowFlag(payload) {\n  return {\n    type: UWQActionType.TOGGEL_UWQ_TICKET_DISPLAY,\n    payload: payload\n  };\n};\nexport var fetchUWQRequest = function fetchUWQRequest() {\n  return function (dispatch) {\n    dispatch(resetUWQFilterHandler());\n    dispatch(showLoader());\n    dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.LOADING));\n    UniversalWorkQueueService.fetchUWQRequest().then(function (response) {\n      dispatch(hideLoader());\n      dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.SUCCESS));\n\n      if (response && response.data && response.data.result && response.data.result.length) {\n        var result = response.data.result;\n        dispatch(updateUWQTicketList(result));\n        var statusObj = {};\n        var segmentObj = {};\n\n        for (var i = 0; i < result.length; i++) {\n          if (!statusObj[result[i][\"srStatus\"]]) {\n            statusObj[result[i][\"srStatus\"]] = true;\n          }\n\n          if (!segmentObj[result[i][\"customerSegment\"]]) {\n            segmentObj[result[i][\"customerSegment\"]] = true;\n          }\n        }\n\n        var filterObj = {\n          status: Object.keys(statusObj),\n          customerSegment: Object.keys(segmentObj)\n        };\n        dispatch(updateUWQFilterValues(filterObj));\n      } else {\n        dispatch(updateUWQTicketList([]));\n      }\n\n      dispatch(displayUWQWindowFlag(true));\n    }, function (error) {\n      dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.FAILED));\n      dispatch(hideLoader());\n      dispatch(updateUWQTicketList([]));\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var updateUWQTicketRequestStatus = function updateUWQTicketRequestStatus(payload) {\n  return {\n    type: UWQActionType.UPDATE_UWQ_API_REQUEST_STATUS,\n    payload: payload\n  };\n};\nexport var updateUWQTicketList = function updateUWQTicketList(payload) {\n  return {\n    type: UWQActionType.UPDATE_TICKET_LIST,\n    payload: payload\n  };\n};\nexport var updateUWQTicketListOrder = function updateUWQTicketListOrder(payload) {\n  return {\n    type: UWQActionType.UPDATE_TICKET_LIST_ORDER,\n    payload: payload\n  };\n};\nexport var updateUWQTicketListOrderBy = function updateUWQTicketListOrderBy(payload) {\n  return {\n    type: UWQActionType.UPDATE_TICKET_LIST_ORDER_BY,\n    payload: payload\n  };\n};\nexport var updateUWQFilterValues = function updateUWQFilterValues(payload) {\n  return {\n    type: UWQActionType.UPDATE_UWQ_FILTER_VALUES,\n    payload: payload\n  };\n};\nexport var updateUWQFilterForm = function updateUWQFilterForm(payload) {\n  return {\n    type: UWQActionType.UPDATE_UWQ_FILTER_FORM,\n    payload: payload\n  };\n};\nexport var resetUWQFilterForm = function resetUWQFilterForm(payload) {\n  return {\n    type: UWQActionType.RESET_UWQ_FILTER_FORM,\n    payload: payload\n  };\n};\nexport var updateUWQFilterCount = function updateUWQFilterCount(payload) {\n  return {\n    type: UWQActionType.UPDATE_UWQ_FILTER_COUNT,\n    payload: payload\n  };\n};\nexport var resetUWQFilterHandler = function resetUWQFilterHandler() {\n  return function (dispatch) {\n    dispatch(updateUWQFilterCount(0));\n    dispatch(resetUWQFilterForm());\n  };\n};\nexport var onApplyUWQFilter = function onApplyUWQFilter(formData) {\n  return function (dispatch) {\n    dispatch(updateUWQFilterForm(formData));\n    var filterCount = 0;\n\n    for (var key in formData) {\n      if (formData[key]) {\n        filterCount++;\n      }\n    }\n\n    dispatch(updateUWQFilterCount(filterCount));\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/universal-work-queue.action.js"],"names":["UWQActionType","UtilService","UniversalWorkQueueService","showLoader","hideLoader","openSnackbarRequest","RequestStatusConstant","toggleUWQWindowDisplay","dispatch","getState","state","displayTickets","uwq","hidePageScroll","fetchUWQRequest","resetPageScroll","displayUWQWindowFlag","payload","type","TOGGEL_UWQ_TICKET_DISPLAY","resetUWQFilterHandler","updateUWQTicketRequestStatus","LOADING","then","response","SUCCESS","data","result","length","updateUWQTicketList","statusObj","segmentObj","i","filterObj","status","Object","keys","customerSegment","updateUWQFilterValues","error","FAILED","UPDATE_UWQ_API_REQUEST_STATUS","UPDATE_TICKET_LIST","updateUWQTicketListOrder","UPDATE_TICKET_LIST_ORDER","updateUWQTicketListOrderBy","UPDATE_TICKET_LIST_ORDER_BY","UPDATE_UWQ_FILTER_VALUES","updateUWQFilterForm","UPDATE_UWQ_FILTER_FORM","resetUWQFilterForm","RESET_UWQ_FILTER_FORM","updateUWQFilterCount","UPDATE_UWQ_FILTER_COUNT","onApplyUWQFilter","formData","filterCount","key"],"mappings":"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","sourcesContent":["import { UWQActionType } from \"../actiontype/universal-work-queue.actiontype\";\nimport UtilService from \"../services/util.service\";\nimport UniversalWorkQueueService from \"../services/universal-work-queue.service\";\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from \"./snackbar.action\";\nimport RequestStatusConstant from \"../constants/request-status.constant\";\n\nexport const toggleUWQWindowDisplay = () => (dispatch, getState) => {\n    const state = getState();\n    const { displayTickets } = state.uwq;\n\n    if (!displayTickets) {\n        UtilService.hidePageScroll();\n        dispatch(fetchUWQRequest());\n    } else {\n        UtilService.resetPageScroll();\n        dispatch(displayUWQWindowFlag(!displayTickets));\n    }\n}\n\nexport const displayUWQWindowFlag = payload => ({\n    type: UWQActionType.TOGGEL_UWQ_TICKET_DISPLAY,\n    payload\n});\n\nexport const fetchUWQRequest = () => dispatch => {\n    dispatch(resetUWQFilterHandler());\n    dispatch(showLoader());\n    dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.LOADING));\n    UniversalWorkQueueService.fetchUWQRequest().then(\n        response => {\n            dispatch(hideLoader());\n            dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.SUCCESS));\n            if (response && response.data && response.data.result && response.data.result.length) {\n                const result = response.data.result;\n                dispatch(updateUWQTicketList(result));\n                const statusObj = {};\n                const segmentObj = {};\n                for (let i = 0; i < result.length; i++) {\n                    if (!statusObj[result[i][\"srStatus\"]]) {\n                        statusObj[result[i][\"srStatus\"]] = true;\n                    }\n                    if (!segmentObj[result[i][\"customerSegment\"]]) {\n                        segmentObj[result[i][\"customerSegment\"]] = true;\n                    }\n                }\n                const filterObj = {\n                    status: Object.keys(statusObj),\n                    customerSegment: Object.keys(segmentObj),\n                }\n                dispatch(updateUWQFilterValues(filterObj));\n            } else {\n                dispatch(updateUWQTicketList([]));\n            }\n            dispatch(displayUWQWindowFlag(true));\n        },\n        error => {\n            dispatch(updateUWQTicketRequestStatus(RequestStatusConstant.FAILED));\n            dispatch(hideLoader());\n            dispatch(updateUWQTicketList([]));\n            dispatch(openSnackbarRequest(error));\n        }\n    );\n};\n\nexport const updateUWQTicketRequestStatus = payload => ({\n    type: UWQActionType.UPDATE_UWQ_API_REQUEST_STATUS,\n    payload\n});\n\nexport const updateUWQTicketList = payload => ({\n    type: UWQActionType.UPDATE_TICKET_LIST,\n    payload\n});\n\nexport const updateUWQTicketListOrder = payload => ({\n    type: UWQActionType.UPDATE_TICKET_LIST_ORDER,\n    payload\n});\n\nexport const updateUWQTicketListOrderBy = payload => ({\n    type: UWQActionType.UPDATE_TICKET_LIST_ORDER_BY,\n    payload\n});\n\nexport const updateUWQFilterValues = payload => ({\n    type: UWQActionType.UPDATE_UWQ_FILTER_VALUES,\n    payload\n});\n\nexport const updateUWQFilterForm = payload => ({\n    type: UWQActionType.UPDATE_UWQ_FILTER_FORM,\n    payload\n});\n\nexport const resetUWQFilterForm = payload => ({\n    type: UWQActionType.RESET_UWQ_FILTER_FORM,\n    payload\n});\n\nexport const updateUWQFilterCount = payload => ({\n    type: UWQActionType.UPDATE_UWQ_FILTER_COUNT,\n    payload\n});\n\nexport const resetUWQFilterHandler = () => dispatch => {\n    dispatch(updateUWQFilterCount(0));\n    dispatch(resetUWQFilterForm());\n}\n\nexport const onApplyUWQFilter = (formData) => dispatch => {\n    dispatch(updateUWQFilterForm(formData));\n    let filterCount = 0;\n    for (let key in formData) {\n        if (formData[key]) {\n            filterCount++;\n        }\n    }\n    dispatch(updateUWQFilterCount(filterCount));\n}"]},"metadata":{},"sourceType":"module"}