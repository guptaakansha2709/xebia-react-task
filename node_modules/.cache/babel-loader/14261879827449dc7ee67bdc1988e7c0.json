{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-one/auto-predict-one.smart.js\";\nimport React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-one.style.css';\nimport { Button } from '@material-ui/core';\nimport { togglePredictionDisplay as _togglePredictionDisplay, createSRAndFTR as _createSRAndFTR } from '../../../actions/prediction.action';\nimport ToggleAutoPredict from '../toggle-auto-predict/toggle-auto-predict.dumb';\n\nvar AutoPredictOne =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AutoPredictOne, _Component);\n\n  function AutoPredictOne() {\n    _classCallCheck(this, AutoPredictOne);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(AutoPredictOne).apply(this, arguments));\n  }\n\n  _createClass(AutoPredictOne, [{\n    key: \"getButtonText\",\n    value: function getButtonText(value) {\n      var crmBtnText = \"\";\n\n      if (value) {\n        if (value.indexOf(\"SR>\") !== -1) {\n          crmBtnText = \"CREATE SR\";\n        } else if (value.indexOf(\"FTR>\") !== -1) {\n          crmBtnText = crmBtnText = \"RAISE FTR\";\n        }\n      }\n\n      return crmBtnText;\n    }\n  }, {\n    key: \"choiceHandler\",\n    value: function choiceHandler(scenarioData, crmCode, priority) {\n      this.props.createSRAndFTR(scenarioData, crmCode, priority);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          predictionScenarioP1 = _this$props.predictionScenarioP1,\n          displayP1Desc = _this$props.displayP1Desc,\n          displayP2Desc = _this$props.displayP2Desc,\n          predictionScenarioP1Desc = _this$props.predictionScenarioP1Desc,\n          ftrResponseObj = _this$props.ftrResponseObj,\n          srResponseObj = _this$props.srResponseObj,\n          dffResponseObj = _this$props.dffResponseObj,\n          predictionScenarioP1CRMCode = _this$props.predictionScenarioP1CRMCode,\n          predictionScenarioP1ChoiceList = _this$props.predictionScenarioP1ChoiceList,\n          togglePredictionDisplay = _this$props.togglePredictionDisplay;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"prediction-blocks pr-40 pb-30 pl-30 prediction-panel-hover \" + (displayP1Desc ? '' : ' hidden') + (!displayP2Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? ' width-65' : '') + (displayP2Desc || ftrResponseObj || srResponseObj || dffResponseObj ? ' width-half' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"fs-90 color-lighter-grey default-line-height \" + (displayP2Desc ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"01\"), React.createElement(\"div\", {\n        className: \"scrollable-actions \" + (predictionScenarioP1Desc ? '' : ' hidden') + (!displayP2Desc ? ' mt-60' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(ScenarioDescription, {\n        scenarioDescription: predictionScenarioP1Desc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        className: \"text-right mt-20\" + (predictionScenarioP1CRMCode && !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-primary button-outlined\",\n        onClick: function onClick() {\n          return _this.choiceHandler(predictionScenarioP1, predictionScenarioP1CRMCode, 'P1');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.getButtonText(predictionScenarioP1CRMCode))), React.createElement(\"p\", {\n        className: \"text-right mt-20 suggestion-btn\" + (!predictionScenarioP1CRMCode && predictionScenarioP1ChoiceList.length && !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, predictionScenarioP1ChoiceList.map(function (item, index) {\n        return React.createElement(Button, {\n          key: index,\n          variant: \"outlined\",\n          color: \"primary\",\n          className: \"fs-14 button-outlined mr-10\",\n          onClick: function onClick() {\n            return _this.choiceHandler(predictionScenarioP1, item['crmCode'], 'P1');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, item.displayText);\n      })), React.createElement(\"div\", {\n        className: !displayP2Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(ToggleAutoPredict, {\n        from: \"next\",\n        toggleDisplay: togglePredictionDisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return AutoPredictOne;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    predictionData: state.prediction.predictionData,\n    isPredictionAvailable: state.prediction.isPredictionAvailable,\n    predictionScenarioP1: state.prediction.predictionScenarioP1,\n    predictionScenarioP3: state.prediction.predictionScenarioP3,\n    predictionScenarioP1Desc: state.prediction.predictionScenarioP1Desc,\n    predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc,\n    predictionScenarioP1CRMCode: state.prediction.predictionScenarioP1CRMCode,\n    displayP1Desc: state.prediction.displayP1Desc,\n    displayP2Desc: state.prediction.displayP2Desc,\n    ftrResponseObj: state.prediction.ftrResponseObj,\n    srResponseObj: state.prediction.srResponseObj,\n    dffResponseObj: state.prediction.dffResponseObj,\n    predictionScenarioP3DescArr: state.prediction.predictionScenarioP3DescArr,\n    predictionScenarioP1ChoiceList: state.prediction.predictionScenarioP1ChoiceList,\n    predictionScenarioP2ChoiceList: state.prediction.predictionScenarioP2ChoiceList\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    togglePredictionDisplay: function togglePredictionDisplay() {\n      return dispatch(_togglePredictionDisplay());\n    },\n    createSRAndFTR: function createSRAndFTR(scenarioData, crmCode, priority) {\n      return dispatch(_createSRAndFTR(scenarioData, crmCode, priority));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictOne);","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/prediction/auto-predict-one/auto-predict-one.smart.js"],"names":["React","Component","ScenarioDescription","connect","Button","togglePredictionDisplay","createSRAndFTR","ToggleAutoPredict","AutoPredictOne","value","crmBtnText","indexOf","scenarioData","crmCode","priority","props","predictionScenarioP1","displayP1Desc","displayP2Desc","predictionScenarioP1Desc","ftrResponseObj","srResponseObj","dffResponseObj","predictionScenarioP1CRMCode","predictionScenarioP1ChoiceList","choiceHandler","getButtonText","length","map","item","index","displayText","mapStateToProps","state","predictionData","prediction","isPredictionAvailable","predictionScenarioP3","predictionScenarioP3Desc","predictionScenarioP3DescArr","predictionScenarioP2ChoiceList","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ScenarioDescription from '../../scenario/scenario-description/scenario-description.dumb';\nimport { connect } from 'react-redux';\nimport './auto-predict-one.style.css';\nimport { Button } from '@material-ui/core';\nimport { togglePredictionDisplay, createSRAndFTR } from '../../../actions/prediction.action';\nimport ToggleAutoPredict from '../toggle-auto-predict/toggle-auto-predict.dumb';\n\nclass AutoPredictOne extends Component {\n\n    getButtonText(value) {\n      let crmBtnText = \"\";\n      if (value) {\n        if (value.indexOf(\"SR>\") !== -1) {\n          crmBtnText = \"CREATE SR\";\n        } else if (value.indexOf(\"FTR>\") !== -1) {\n          crmBtnText = crmBtnText = \"RAISE FTR\";\n        }\n      }\n      return crmBtnText;\n    }\n\n    choiceHandler(scenarioData, crmCode, priority) {\n        this.props.createSRAndFTR(scenarioData, crmCode, priority);\n    }\n\n  render() {\n    const { predictionScenarioP1, displayP1Desc, displayP2Desc, predictionScenarioP1Desc, ftrResponseObj, srResponseObj, dffResponseObj, predictionScenarioP1CRMCode, predictionScenarioP1ChoiceList, togglePredictionDisplay } = this.props;\n    return (\n    <React.Fragment>\n        <div className={\"prediction-blocks pr-40 pb-30 pl-30 prediction-panel-hover \" + (displayP1Desc ? '' : ' hidden') + (!displayP2Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? ' width-65' : '') + (displayP2Desc || ftrResponseObj || srResponseObj || dffResponseObj ? ' width-half' : '')}>\n\n          <h3 className={\"fs-90 color-lighter-grey default-line-height \" + (displayP2Desc ? '' : ' hidden')}>01</h3>\n\n          <div className={\"scrollable-actions \" + (predictionScenarioP1Desc ? '' : ' hidden') + (!displayP2Desc ? ' mt-60' : '')}>\n              <ScenarioDescription scenarioDescription={predictionScenarioP1Desc} />\n          </div>\n\n          <p className={\"text-right mt-20\" + (predictionScenarioP1CRMCode && (!ftrResponseObj && !srResponseObj && !dffResponseObj) ? '' : ' hidden')}>\n              <Button className=\"btn-primary button-outlined\" onClick={() => this.choiceHandler(predictionScenarioP1, predictionScenarioP1CRMCode, 'P1')}>{this.getButtonText(predictionScenarioP1CRMCode)}</Button>\n          </p>\n\n          <p className={\"text-right mt-20 suggestion-btn\" + (!predictionScenarioP1CRMCode && predictionScenarioP1ChoiceList.length && (!ftrResponseObj && !srResponseObj && !dffResponseObj) ? '' : ' hidden')}>\n              {predictionScenarioP1ChoiceList.map((item, index) => {\n                  return (\n                  <Button  key={index} variant=\"outlined\" color=\"primary\" className=\"fs-14 button-outlined mr-10\" onClick={() => this.choiceHandler(predictionScenarioP1, item['crmCode'], 'P1')}>\n                      {item.displayText}\n                  </Button>\n                  );\n\n              })}\n          </p>\n\n          <div className={(!displayP2Desc && !ftrResponseObj && !srResponseObj && !dffResponseObj ? '' : ' hidden')}>\n            <ToggleAutoPredict from=\"next\" toggleDisplay={togglePredictionDisplay} />\n          </div>\n\n        </div>\n    </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n      predictionData: state.prediction.predictionData,\n      isPredictionAvailable: state.prediction.isPredictionAvailable,\n      predictionScenarioP1: state.prediction.predictionScenarioP1,\n      predictionScenarioP3: state.prediction.predictionScenarioP3,\n      predictionScenarioP1Desc: state.prediction.predictionScenarioP1Desc,\n      predictionScenarioP3Desc: state.prediction.predictionScenarioP3Desc,\n      predictionScenarioP1CRMCode: state.prediction.predictionScenarioP1CRMCode,\n      displayP1Desc: state.prediction.displayP1Desc,\n      displayP2Desc: state.prediction.displayP2Desc,\n      ftrResponseObj: state.prediction.ftrResponseObj,\n      srResponseObj: state.prediction.srResponseObj,\n      dffResponseObj: state.prediction.dffResponseObj,\n      predictionScenarioP3DescArr: state.prediction.predictionScenarioP3DescArr,\n      predictionScenarioP1ChoiceList: state.prediction.predictionScenarioP1ChoiceList,\n      predictionScenarioP2ChoiceList: state.prediction.predictionScenarioP2ChoiceList,\n    };\n};\n  \nconst mapDispatchToProps = dispatch => ({\n  togglePredictionDisplay: () => dispatch(togglePredictionDisplay()),\n  createSRAndFTR: (scenarioData, crmCode, priority) => dispatch(createSRAndFTR(scenarioData, crmCode, priority)),\n});\n  \n\nexport default connect(mapStateToProps, mapDispatchToProps)(AutoPredictOne);\n"]},"metadata":{},"sourceType":"module"}