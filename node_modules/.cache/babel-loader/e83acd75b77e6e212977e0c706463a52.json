{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SnackbarMessages } from \"../constants/snackbar-messages\";\n\nvar FormValidatorService =\n/*#__PURE__*/\nfunction () {\n  function FormValidatorService() {\n    _classCallCheck(this, FormValidatorService);\n  }\n\n  _createClass(FormValidatorService, null, [{\n    key: \"validateDFF\",\n    value: function validateDFF(dffInfo, formData) {\n      var errMessage = \"\";\n\n      for (var i = 0; i < dffInfo.length; i++) {\n        if (dffInfo[i].mandatoryFlag === 'Y' && !formData[dffInfo[i]['name']].value) {\n          errMessage = dffInfo[i]['name'] + \" cannot be blank.\";\n          break;\n        }\n      }\n\n      return errMessage;\n    }\n  }, {\n    key: \"validateTaskUpdateFields\",\n    value: function validateTaskUpdateFields(taskfieldsInfo, formData) {\n      var errMessage = \"\";\n\n      for (var i = 0; i < taskfieldsInfo.length; i++) {\n        if (!formData[taskfieldsInfo[i]['columnName']].value) {\n          errMessage = taskfieldsInfo[i]['columnName'] + \" cannot be blank.\";\n          break;\n        }\n      }\n\n      return errMessage;\n    }\n  }, {\n    key: \"validateArc\",\n    value: function validateArc(arcInfo) {\n      var errMessage = \"\";\n\n      if (arcInfo && (!arcInfo.selectedArcIssueChannel || !arcInfo.selectedArcIssueCircle || !arcInfo.selectedArcIssueCity || !arcInfo.selectedArcIssueLocation || !arcInfo.selectedArcIssueStoreNameAddr || !arcInfo.selectedArcIssueSubType || !arcInfo.selectedArcIssueStoreType || !arcInfo.selectedArcIssueVoc || !arcInfo.selectedArcNotes)) {\n        errMessage = SnackbarMessages.ARC_VALIDATION_ERROR_MSG;\n      }\n\n      return errMessage;\n    }\n  }, {\n    key: \"validateClaimDFF\",\n    value: function validateClaimDFF(dffInfo, formData) {\n      var errMessage = \"\";\n\n      for (var i = 0; i < dffInfo.length; i++) {\n        if (dffInfo[i].name && !formData[dffInfo[i]['name']]) {\n          errMessage = dffInfo[i]['dispalyName'] + \" cannot be blank.\";\n          break;\n        } else if (dffInfo[i].type === 'date') {\n          if (formData[dffInfo[i]['name']].length !== 19) {\n            errMessage = \"Please enter valid Date and Time.\";\n            break;\n          } else {\n            var str = formData[dffInfo[i]['name']].split(' ')[0];\n            var patt = new RegExp(\"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\\d\\\\d)\");\n            var res = patt.test(str);\n\n            if (!res) {\n              errMessage = \"Please enter valid Date and Time.\";\n              break;\n            }\n\n            var dateArr = str.split('-');\n            var cDate = new Date();\n            var fDate = new Date();\n            fDate.setDate(parseInt(dateArr[0]));\n            fDate.setMonth(parseInt(dateArr[1]) - 1);\n            fDate.setFullYear(parseInt(dateArr[2]));\n            fDate.setHours(0);\n            fDate.setMinutes(0);\n            fDate.setSeconds(0);\n\n            if (cDate.getTime() < fDate.getTime()) {\n              errMessage = \"Future Date is not allowed.\";\n              break;\n            }\n          }\n        }\n      }\n\n      return errMessage;\n    }\n  }]);\n\n  return FormValidatorService;\n}();\n\nexport default FormValidatorService;","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/services/form-validator.service.js"],"names":["SnackbarMessages","FormValidatorService","dffInfo","formData","errMessage","i","length","mandatoryFlag","value","taskfieldsInfo","arcInfo","selectedArcIssueChannel","selectedArcIssueCircle","selectedArcIssueCity","selectedArcIssueLocation","selectedArcIssueStoreNameAddr","selectedArcIssueSubType","selectedArcIssueStoreType","selectedArcIssueVoc","selectedArcNotes","ARC_VALIDATION_ERROR_MSG","name","type","str","split","patt","RegExp","res","test","dateArr","cDate","Date","fDate","setDate","parseInt","setMonth","setFullYear","setHours","setMinutes","setSeconds","getTime"],"mappings":"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","sourcesContent":["\nimport { SnackbarMessages } from \"../constants/snackbar-messages\";\n\nclass FormValidatorService {\n    static validateDFF(dffInfo, formData) {\n        let errMessage = \"\";\n        for (let i = 0; i < dffInfo.length; i++) {\n            if (dffInfo[i].mandatoryFlag === 'Y' && !formData[dffInfo[i]['name']].value) {\n                errMessage = dffInfo[i]['name'] + \" cannot be blank.\";\n                break;\n            }\n        }\n        return errMessage;\n    }\n\n    static validateTaskUpdateFields(taskfieldsInfo, formData) {\n        let errMessage = \"\";\n        for (let i = 0; i < taskfieldsInfo.length; i++) {\n            if (!formData[taskfieldsInfo[i]['columnName']].value) {\n                errMessage = taskfieldsInfo[i]['columnName'] + \" cannot be blank.\";\n                break;\n            }\n        }\n        return errMessage;\n    }\n\n    static validateArc(arcInfo) {\n        let errMessage = \"\";\n        if (arcInfo && (!arcInfo.selectedArcIssueChannel || !arcInfo.selectedArcIssueCircle || !arcInfo.selectedArcIssueCity || !arcInfo.selectedArcIssueLocation || !arcInfo.selectedArcIssueStoreNameAddr || !arcInfo.selectedArcIssueSubType || !arcInfo.selectedArcIssueStoreType || !arcInfo.selectedArcIssueVoc || !arcInfo.selectedArcNotes)) {\n            errMessage = SnackbarMessages.ARC_VALIDATION_ERROR_MSG\n        }\n        return errMessage;\n    }\n    static validateClaimDFF(dffInfo, formData) {\n        let errMessage = \"\";\n        for (let i = 0; i < dffInfo.length; i++) {\n            if (dffInfo[i].name && !formData[dffInfo[i]['name']]) {\n                errMessage = dffInfo[i]['dispalyName'] + \" cannot be blank.\";\n                break;\n            } else if (dffInfo[i].type === 'date') {\n                if (formData[dffInfo[i]['name']].length !== 19) {\n                    errMessage = \"Please enter valid Date and Time.\";\n                    break;\n                } else {\n                    var str = formData[dffInfo[i]['name']].split(' ')[0];\n                    var patt = new RegExp(\"(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\\d\\\\d)\");\n                    var res = patt.test(str);\n                    if (!res) {\n                        errMessage = \"Please enter valid Date and Time.\";\n                        break;\n                    }\n                    var dateArr = str.split('-');\n                    var cDate = new Date();\n                    var fDate = new Date();\n                    fDate.setDate(parseInt(dateArr[0]));\n                    fDate.setMonth(parseInt(dateArr[1]) - 1);\n                    fDate.setFullYear(parseInt(dateArr[2]));\n                    fDate.setHours(0);\n                    fDate.setMinutes(0);\n                    fDate.setSeconds(0);\n                    if (cDate.getTime() < fDate.getTime()) {\n                        errMessage = \"Future Date is not allowed.\";\n                        break;\n                    }\n                }\n            }\n        }\n        return errMessage;\n    }\n}\n\nexport default FormValidatorService;\n"]},"metadata":{},"sourceType":"module"}