{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport CustomHttpService from './custom-http.service';\nimport Config from '../config/config';\nimport EncodeDecodeType from '../actiontype/encode-decode-type';\nimport CookieManagerService from './cookie.service';\nimport { AppConstant } from '../constants/app.constant';\n\nvar MapMyIndiaService =\n/*#__PURE__*/\nfunction () {\n  function MapMyIndiaService() {\n    _classCallCheck(this, MapMyIndiaService);\n  }\n\n  _createClass(MapMyIndiaService, null, [{\n    key: \"generateToken\",\n    value: function generateToken() {\n      var url = Config.mapMyIndiaURL + \"token\";\n      return CustomHttpService.get(url, {}, EncodeDecodeType.MAP_MY_INDIA);\n    }\n  }, {\n    key: \"searchPlace\",\n    value: function searchPlace(searchText) {\n      var token = \"\";\n      var authDetails = CookieManagerService.getItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n\n      if (authDetails) {\n        authDetails = JSON.parse(authDetails);\n        token = authDetails['token'];\n      }\n\n      var config = {\n        headers: {\n          'x-mmi-token': token\n        }\n      };\n      var url = Config.mapMyIndiaURL + \"places/query?q=\" + searchText;\n      return CustomHttpService.get(url, config, EncodeDecodeType.MAP_MY_INDIA);\n    }\n  }, {\n    key: \"validateMapMyIndiaToken\",\n    value: function validateMapMyIndiaToken() {\n      var flag = true;\n      var mapTokenData = CookieManagerService.getItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n\n      if (mapTokenData) {\n        try {\n          mapTokenData = JSON.parse(mapTokenData);\n\n          if ((Date.now() - mapTokenData[\"time\"]) / 1000 > mapTokenData[\"expires_in\"]) {\n            flag = false;\n          }\n        } catch (e) {\n          return false;\n        }\n      } else {\n        flag = false;\n      }\n\n      return flag;\n    }\n  }]);\n\n  return MapMyIndiaService;\n}();\n\nexport default MapMyIndiaService;","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/services/map-my-india.service.js"],"names":["CustomHttpService","Config","EncodeDecodeType","CookieManagerService","AppConstant","MapMyIndiaService","url","mapMyIndiaURL","get","MAP_MY_INDIA","searchText","token","authDetails","getItem","MAP_MY_INDIA_AUTH_DETAILS","JSON","parse","config","headers","flag","mapTokenData","Date","now","e"],"mappings":";;AAAA,OAAOA,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;AACA,SAASC,WAAT,QAA4B,2BAA5B;;IAEMC,iB;;;;;;;;;oCAEqB;AACnB,UAAMC,GAAG,GAAGL,MAAM,CAACM,aAAP,GAAuB,OAAnC;AACA,aAAOP,iBAAiB,CAACQ,GAAlB,CAAsBF,GAAtB,EAA2B,EAA3B,EAA+BJ,gBAAgB,CAACO,YAAhD,CAAP;AACH;;;gCAEkBC,U,EAAY;AAC3B,UAAIC,KAAK,GAAG,EAAZ;AACA,UAAIC,WAAW,GAAGT,oBAAoB,CAACU,OAArB,CAA6BT,WAAW,CAACU,yBAAzC,CAAlB;;AACA,UAAGF,WAAH,EAAgB;AACZA,QAAAA,WAAW,GAAGG,IAAI,CAACC,KAAL,CAAWJ,WAAX,CAAd;AACAD,QAAAA,KAAK,GAAGC,WAAW,CAAC,OAAD,CAAnB;AACH;;AACD,UAAMK,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,yBAAeP;AADV;AADE,OAAf;AAKA,UAAML,GAAG,GAAGL,MAAM,CAACM,aAAP,GAAuB,iBAAvB,GAA2CG,UAAvD;AACA,aAAOV,iBAAiB,CAACQ,GAAlB,CAAsBF,GAAtB,EAA2BW,MAA3B,EAAmCf,gBAAgB,CAACO,YAApD,CAAP;AACH;;;8CAEgC;AAC7B,UAAIU,IAAI,GAAG,IAAX;AACA,UAAIC,YAAY,GAAGjB,oBAAoB,CAACU,OAArB,CAA6BT,WAAW,CAACU,yBAAzC,CAAnB;;AACA,UAAGM,YAAH,EAAiB;AACb,YAAI;AACAA,UAAAA,YAAY,GAAGL,IAAI,CAACC,KAAL,CAAWI,YAAX,CAAf;;AACA,cAAG,CAACC,IAAI,CAACC,GAAL,KAAaF,YAAY,CAAC,MAAD,CAA1B,IAAsC,IAAtC,GAA6CA,YAAY,CAAC,YAAD,CAA5D,EAA4E;AACxED,YAAAA,IAAI,GAAG,KAAP;AACH;AACJ,SALD,CAKE,OAAOI,CAAP,EAAU;AACR,iBAAO,KAAP;AACH;AACJ,OATD,MASO;AACHJ,QAAAA,IAAI,GAAG,KAAP;AACH;;AACD,aAAOA,IAAP;AACH;;;;;;AAGL,eAAed,iBAAf","sourcesContent":["import CustomHttpService from './custom-http.service';\nimport Config from '../config/config';\nimport EncodeDecodeType from '../actiontype/encode-decode-type';\nimport CookieManagerService from './cookie.service';\nimport { AppConstant } from '../constants/app.constant';\n\nclass MapMyIndiaService {\n\n    static generateToken() {\n        const url = Config.mapMyIndiaURL + \"token\";\n        return CustomHttpService.get(url, {}, EncodeDecodeType.MAP_MY_INDIA);\n    }\n\n    static searchPlace(searchText) {\n        let token = \"\";\n        let authDetails = CookieManagerService.getItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n        if(authDetails) {\n            authDetails = JSON.parse(authDetails);\n            token = authDetails['token'];\n        }\n        const config = {\n            headers: {\n                'x-mmi-token': token,\n            }\n        };\n        const url = Config.mapMyIndiaURL + \"places/query?q=\" + searchText;\n        return CustomHttpService.get(url, config, EncodeDecodeType.MAP_MY_INDIA);\n    }\n\n    static validateMapMyIndiaToken() {\n        let flag = true;\n        let mapTokenData = CookieManagerService.getItem(AppConstant.MAP_MY_INDIA_AUTH_DETAILS);\n        if(mapTokenData) {\n            try {\n                mapTokenData = JSON.parse(mapTokenData);\n                if((Date.now() - mapTokenData[\"time\"]) / 1000 > mapTokenData[\"expires_in\"]) {\n                    flag = false;\n                }\n            } catch (e) {\n                return false;\n            }\n        } else {\n            flag = false;\n        }\n        return flag;\n    }\n}\n\nexport default MapMyIndiaService;"]},"metadata":{},"sourceType":"module"}