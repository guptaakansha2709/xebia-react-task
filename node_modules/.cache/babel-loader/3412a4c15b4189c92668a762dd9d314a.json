{"ast":null,"code":"import { updateCurrentScenarioId } from './scenario.action';\nimport { tagFTRRequest } from './ftr.action';\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\nimport { fetchDFFRequest } from './dff.action';\nimport { CardLinkConstant } from '../constants/card-link.constant';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport FTRService from '../services/ftr.service';\nimport DFFService from '../services/fetch-dff.service';\nimport ScenarioService from '../services/scenario.service';\nimport { openSelfHelpDialog, openMultipleTaggingDialog } from './dialog.action';\nimport { selectSMSCategory, getSelfCareMessages } from './sms-dialog.action';\nimport SMSCategory from '../constants/sms-category.enum';\nimport { MultipleTaggingActionType } from '../actiontype/multiple-tagging.actiontype';\nimport MultipleTaggingService from '../services/multiple-tagging.service';\nexport var cardLinksHandler = function cardLinksHandler(cardLinks, type, key) {\n  return function (dispatch) {\n    if (!cardLinks) {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n    } else {\n      switch (type) {\n        case CardLinkConstant.SCENARIO_TYPE:\n          dispatch(scenarioIdHandler(cardLinks));\n          break;\n\n        case CardLinkConstant.CRM_CODE_TYPE:\n          dispatch(crmCodingHandler(cardLinks, key));\n          break;\n\n        case CardLinkConstant.SELFCARE_SMS:\n          dispatch(selfCareSMSHandler(cardLinks));\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n};\nexport var scenarioIdHandler = function scenarioIdHandler(cardLinks) {\n  return function (dispatch) {\n    if (cardLinks && cardLinks.length) {\n      for (var i = 0; i < cardLinks.length; i++) {\n        if (cardLinks[i]['type'] && cardLinks[i]['type'].toLowerCase().trim() === CardLinkConstant.SCENARIO_TYPE) {\n          if (cardLinks[i]['value']) {\n            dispatch(updateCurrentScenarioId(cardLinks[i]['value']));\n          } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n          }\n\n          break;\n        }\n      }\n    }\n  };\n};\nexport var selfCareSMSHandler = function selfCareSMSHandler(cardLinks) {\n  return function (dispatch) {\n    if (cardLinks && cardLinks.length) {\n      for (var i = 0; i < cardLinks.length; i++) {\n        if (cardLinks[i]['type'] && cardLinks[i]['type'].trim() === CardLinkConstant.SELFCARE_SMS) {\n          if (cardLinks[i]['value']) {\n            dispatch(selectSMSCategory(SMSCategory.SELF_CARE));\n            dispatch(openSelfHelpDialog({\n              title: 'SELF HELP'\n            }));\n            dispatch(getSelfCareMessages(cardLinks[i]['value']));\n          } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n          }\n\n          break;\n        }\n      }\n    }\n  };\n};\nexport var crmCodingHandler = function crmCodingHandler(cardLinks, key) {\n  return function (dispatch) {\n    if (cardLinks && cardLinks.length) {\n      var crmCodingCardLinksObj = MultipleTaggingService.getCardLinksCrmCodeType(cardLinks, CardLinkConstant.CRM_CODE_TYPE);\n\n      if (crmCodingCardLinksObj && crmCodingCardLinksObj.length > 1) {\n        dispatch(multipleTaggingCardLinksObj(crmCodingCardLinksObj));\n        dispatch(setMultipleTaggingCardType(key));\n      } else {\n        if (crmCodingCardLinksObj && crmCodingCardLinksObj[0] && crmCodingCardLinksObj[0]['value']) {\n          var crmCode = crmCodingCardLinksObj[0]['value'];\n          dispatch(singleCardTaggingHandler(crmCode, key));\n        } else {\n          dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n        }\n      }\n    }\n  };\n};\nexport var singleCardTaggingHandler = function singleCardTaggingHandler(crmCode, key, multipleDynamicTaggingKey) {\n  return function (dispatch) {\n    if (crmCode.indexOf(\"SR>\") !== -1) {\n      dispatch(dffHandler(key, crmCode, multipleDynamicTaggingKey));\n    } else if (crmCode.indexOf(\"FTR>\") !== -1) {\n      dispatch(tagFTRHandler(key, crmCode, multipleDynamicTaggingKey));\n    }\n  };\n};\nexport var multipleDynamicTaggingHandler = function multipleDynamicTaggingHandler(crmCode, multipleTaggingCardSource, dynamicKey) {\n  return function (dispatch) {\n    if (crmCode && dynamicKey && multipleTaggingCardSource) {\n      var multipleDynamicTaggingKey = MultipleTaggingService.getMultipleDynamicKey(multipleTaggingCardSource, dynamicKey);\n      dispatch(singleCardTaggingHandler(crmCode, CardLinkConstant.MULTIPLE_DYNAMIC_TAGGING, multipleDynamicTaggingKey));\n    }\n  };\n};\n\nvar setMultipleTaggingCardType = function setMultipleTaggingCardType(cardType) {\n  return function (dispatch) {\n    dispatch(setMultipleTaggingCardSuccess(cardType));\n    dispatch(openMultipleTaggingDialog({\n      title: 'MULTIPLE TAGGING'\n    }));\n  };\n};\n\nfunction setMultipleTaggingCardSuccess(response) {\n  return {\n    type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_CARD_TYPE,\n    payload: response\n  };\n}\n\nvar multipleTaggingCardLinksObj = function multipleTaggingCardLinksObj(cardLinkObj) {\n  return function (dispatch) {\n    dispatch(multipleTaggingCardLinksObjSuccess(cardLinkObj));\n  };\n};\n\nfunction multipleTaggingCardLinksObjSuccess(response) {\n  return {\n    type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_OBJ_SUCCESS,\n    payload: response\n  };\n}\n\nexport var tagFTRHandler = function tagFTRHandler(key, crmCode, multipleDynamicTaggingKey) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var source = FTRService.getFTRSource(key, multipleDynamicTaggingKey);\n\n    if (isTaggingDone(state, source, multipleDynamicTaggingKey)) {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n      var cardSource = MultipleTaggingService.getCardSource(key, multipleDynamicTaggingKey);\n      var reqData = {\n        notes: cardSource,\n        tagging: crmCode\n      };\n      dispatch(tagFTRRequest(reqData, source, multipleDynamicTaggingKey));\n    }\n  };\n};\n\nfunction isTaggingDone(data, source, multipleDynamicTaggingKey) {\n  if (data && data.disabledTaggingInfo && data.disabledTaggingInfo[source]) {\n    if (multipleDynamicTaggingKey && data.disabledTaggingInfo[source][multipleDynamicTaggingKey]) {\n      return true;\n    } else if (!multipleDynamicTaggingKey) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport var dffHandler = function dffHandler(key, crmCode, multipleDynamicTaggingKey) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var source = DFFService.getDFFSource(key, multipleDynamicTaggingKey);\n\n    if (isTaggingDone(state, source, multipleDynamicTaggingKey)) {\n      dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n    } else {\n      var reqData = {\n        transactionId: CookieManagerService.getItem(AppConstant.CORRELATION_ID),\n        subType: ''\n      };\n      var notes = '';\n      reqData.subType = ScenarioService.getSubtype(crmCode);\n      dispatch(setMultipleTaggingDffCardHandlerObject(key, crmCode, source, multipleDynamicTaggingKey));\n      dispatch(fetchDFFRequest(reqData, notes, source));\n    }\n  };\n};\n\nvar setMultipleTaggingDffCardHandlerObject = function setMultipleTaggingDffCardHandlerObject(crmCode, notes, source, multipleDynamicTaggingKey) {\n  return function (dispatch) {\n    var dataObj = {\n      crmCode: crmCode,\n      notes: notes,\n      source: source,\n      multipleDynamicTaggingKey: multipleDynamicTaggingKey\n    };\n    dispatch(setMultipleTaggingCardSRObjectSuccess(dataObj));\n  };\n};\n\nfunction setMultipleTaggingCardSRObjectSuccess(response) {\n  return {\n    type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_SR_CARD_OBJECT,\n    payload: response\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/card-links.action.js"],"names":["updateCurrentScenarioId","tagFTRRequest","CookieManagerService","AppConstant","fetchDFFRequest","CardLinkConstant","SnackbarMessages","openSnackbarRequest","FTRService","DFFService","ScenarioService","openSelfHelpDialog","openMultipleTaggingDialog","selectSMSCategory","getSelfCareMessages","SMSCategory","MultipleTaggingActionType","MultipleTaggingService","cardLinksHandler","cardLinks","type","key","dispatch","DATA_NOT_CONFIGURED","SCENARIO_TYPE","scenarioIdHandler","CRM_CODE_TYPE","crmCodingHandler","SELFCARE_SMS","selfCareSMSHandler","length","i","toLowerCase","trim","SELF_CARE","title","crmCodingCardLinksObj","getCardLinksCrmCodeType","multipleTaggingCardLinksObj","setMultipleTaggingCardType","crmCode","singleCardTaggingHandler","multipleDynamicTaggingKey","indexOf","dffHandler","tagFTRHandler","multipleDynamicTaggingHandler","multipleTaggingCardSource","dynamicKey","getMultipleDynamicKey","MULTIPLE_DYNAMIC_TAGGING","cardType","setMultipleTaggingCardSuccess","response","SET_MULTIPLE_TAGGING_CARD_TYPE","payload","cardLinkObj","multipleTaggingCardLinksObjSuccess","SET_MULTIPLE_TAGGING_OBJ_SUCCESS","getState","state","source","getFTRSource","isTaggingDone","DUPLICATE_FTR","cardSource","getCardSource","reqData","notes","tagging","data","disabledTaggingInfo","getDFFSource","DUPLICATE_SR","transactionId","getItem","CORRELATION_ID","subType","getSubtype","setMultipleTaggingDffCardHandlerObject","dataObj","setMultipleTaggingCardSRObjectSuccess","SET_MULTIPLE_TAGGING_SR_CARD_OBJECT"],"mappings":"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","sourcesContent":["import { updateCurrentScenarioId } from './scenario.action';\nimport { tagFTRRequest } from './ftr.action';\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\nimport { fetchDFFRequest } from './dff.action';\nimport { CardLinkConstant } from '../constants/card-link.constant';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport FTRService from '../services/ftr.service';\nimport DFFService from '../services/fetch-dff.service';\nimport ScenarioService from '../services/scenario.service';\nimport { openSelfHelpDialog, openMultipleTaggingDialog } from './dialog.action';\nimport { selectSMSCategory, getSelfCareMessages } from './sms-dialog.action';\nimport SMSCategory from '../constants/sms-category.enum';\nimport { MultipleTaggingActionType } from '../actiontype/multiple-tagging.actiontype';\nimport MultipleTaggingService from '../services/multiple-tagging.service';\n\n\nexport const cardLinksHandler = (cardLinks, type, key) => (dispatch) => {\n    if (!cardLinks) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n    } else {\n        switch (type) {\n            case CardLinkConstant.SCENARIO_TYPE:\n                dispatch(scenarioIdHandler(cardLinks));\n                break;\n            case CardLinkConstant.CRM_CODE_TYPE:\n                dispatch(crmCodingHandler(cardLinks, key));\n                break;\n            case CardLinkConstant.SELFCARE_SMS:\n                dispatch(selfCareSMSHandler(cardLinks));\n                break;\n            default:\n                break;\n        }\n    }\n}\n\n\nexport const scenarioIdHandler = (cardLinks) => (dispatch) => {\n    if (cardLinks && cardLinks.length) {\n        for (let i = 0; i < cardLinks.length; i++) {\n            if (cardLinks[i]['type'] && cardLinks[i]['type'].toLowerCase().trim() === CardLinkConstant.SCENARIO_TYPE) {\n                if (cardLinks[i]['value']) {\n                    dispatch(updateCurrentScenarioId(cardLinks[i]['value']));\n                } else {\n                    dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n                }\n                break;\n            }\n        }\n    }\n}\n\nexport const selfCareSMSHandler = (cardLinks) => (dispatch) => {\n    if (cardLinks && cardLinks.length) {\n        for (let i = 0; i < cardLinks.length; i++) {\n            if (cardLinks[i]['type'] && cardLinks[i]['type'].trim() === CardLinkConstant.SELFCARE_SMS) {\n                if (cardLinks[i]['value']) {\n                    dispatch(selectSMSCategory(SMSCategory.SELF_CARE));\n                    dispatch(openSelfHelpDialog({ title: 'SELF HELP' }));\n                    dispatch(getSelfCareMessages(cardLinks[i]['value']));\n                } else {\n                    dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n                }\n                break;\n            }\n        }\n    }\n}\n\n\n\nexport const crmCodingHandler = (cardLinks, key) => (dispatch) => {\n    if (cardLinks && cardLinks.length) {\n        const crmCodingCardLinksObj = MultipleTaggingService.getCardLinksCrmCodeType(cardLinks, CardLinkConstant.CRM_CODE_TYPE);\n        if (crmCodingCardLinksObj && crmCodingCardLinksObj.length > 1) {\n            dispatch(multipleTaggingCardLinksObj(crmCodingCardLinksObj));\n            dispatch(setMultipleTaggingCardType(key));\n\n        }\n        else {\n            if (crmCodingCardLinksObj && crmCodingCardLinksObj[0] && crmCodingCardLinksObj[0]['value']) {\n                const crmCode = crmCodingCardLinksObj[0]['value'];\n                dispatch(singleCardTaggingHandler(crmCode, key));\n            } else {\n                dispatch(openSnackbarRequest(null, SnackbarMessages.DATA_NOT_CONFIGURED));\n            }\n        }\n    }\n}\nexport const singleCardTaggingHandler = (crmCode, key, multipleDynamicTaggingKey) => dispatch => {\n    if (crmCode.indexOf(\"SR>\") !== -1) {\n        dispatch(dffHandler(key, crmCode, multipleDynamicTaggingKey));\n    } else if (crmCode.indexOf(\"FTR>\") !== -1) {\n        dispatch(tagFTRHandler(key, crmCode, multipleDynamicTaggingKey));\n    }\n}\nexport const multipleDynamicTaggingHandler = (crmCode, multipleTaggingCardSource, dynamicKey) => dispatch => {\n    if (crmCode && dynamicKey && multipleTaggingCardSource) {\n        const multipleDynamicTaggingKey = MultipleTaggingService.getMultipleDynamicKey(multipleTaggingCardSource, dynamicKey);\n        dispatch(singleCardTaggingHandler(crmCode, CardLinkConstant.MULTIPLE_DYNAMIC_TAGGING, multipleDynamicTaggingKey));\n    }\n}\n\nconst setMultipleTaggingCardType = cardType => dispatch => {\n    dispatch(setMultipleTaggingCardSuccess(cardType));\n    dispatch(openMultipleTaggingDialog({ title: 'MULTIPLE TAGGING' }));\n}\nfunction setMultipleTaggingCardSuccess(response) { return { type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_CARD_TYPE, payload: response } }\n\nconst multipleTaggingCardLinksObj = cardLinkObj => dispatch => {\n    dispatch(multipleTaggingCardLinksObjSuccess(cardLinkObj));\n\n}\nfunction multipleTaggingCardLinksObjSuccess(response) { return { type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_OBJ_SUCCESS, payload: response } }\n\nexport const tagFTRHandler = (key, crmCode, multipleDynamicTaggingKey) => (dispatch, getState) => {\n    const state = getState();\n    const source = FTRService.getFTRSource(key, multipleDynamicTaggingKey);\n    if (isTaggingDone(state, source, multipleDynamicTaggingKey)) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_FTR));\n    } else {\n        const cardSource = MultipleTaggingService.getCardSource(key, multipleDynamicTaggingKey);\n        const reqData = {\n            notes: cardSource,\n            tagging: crmCode\n        }\n        dispatch(tagFTRRequest(reqData, source, multipleDynamicTaggingKey));\n    }\n}\n\nfunction isTaggingDone(data, source, multipleDynamicTaggingKey) {\n    if (data && data.disabledTaggingInfo && data.disabledTaggingInfo[source]) {\n        if (multipleDynamicTaggingKey && data.disabledTaggingInfo[source][multipleDynamicTaggingKey]) {\n            return true;\n        } else if (!multipleDynamicTaggingKey) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nexport const dffHandler = (key, crmCode, multipleDynamicTaggingKey) => (dispatch, getState) => {\n    const state = getState();\n    const source = DFFService.getDFFSource(key, multipleDynamicTaggingKey);\n    if (isTaggingDone(state, source, multipleDynamicTaggingKey)) {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DUPLICATE_SR));\n    } else {\n        const reqData = {\n            transactionId: CookieManagerService.getItem(AppConstant.CORRELATION_ID),\n            subType: ''\n        }\n        const notes = '';\n        reqData.subType = ScenarioService.getSubtype(crmCode);\n        dispatch(setMultipleTaggingDffCardHandlerObject(key, crmCode, source, multipleDynamicTaggingKey));\n        dispatch(fetchDFFRequest(reqData, notes, source));\n    }\n}\nconst setMultipleTaggingDffCardHandlerObject = (crmCode, notes, source, multipleDynamicTaggingKey) => dispatch => {\n    const dataObj = {\n        crmCode: crmCode,\n        notes: notes,\n        source: source,\n        multipleDynamicTaggingKey: multipleDynamicTaggingKey,\n    }\n    dispatch(setMultipleTaggingCardSRObjectSuccess(dataObj))\n\n}\nfunction setMultipleTaggingCardSRObjectSuccess(response) { return { type: MultipleTaggingActionType.SET_MULTIPLE_TAGGING_SR_CARD_OBJECT, payload: response } }"]},"metadata":{},"sourceType":"module"}