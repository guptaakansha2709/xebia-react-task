{"ast":null,"code":"import { LsiPingStatusActionType } from \"../actiontype/lsi-ping-status.actiontype\";\nimport LsiPingStatusService from '../services/lsi-ping-status.service';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { AppConstant } from \"../constants/app.constant\";\nexport var fetchLsiPingStatusData = function fetchLsiPingStatusData() {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (!state.customerInfo || !state.customerInfo.lsiNumberInput) {\n      return false;\n    } // if (state && state.LsiPingStatusTabData) {\n    //     if(state.LsiPingStatusTabData.LsiPingStatusApiResponse) {\n    //         dispatch(LsiPingStatusApiSuccess(state.LsiPingStatusTabData.LsiPingStatusApiResponse));\n    //         return;\n    //     }\n    // }\n\n\n    var snackbarMessage = {};\n    dispatch(fetchLsiPingStatusApiLoading());\n    dispatch(LsiPingStatusShowLoader());\n    dispatch(updateLsiLinkStatusValue(null));\n    LsiPingStatusService.fetchLsiPingStatusApi(state.customerInfo.lsiNumberInput).then(function (response) {\n      dispatch(LsiPingStatusHideLoader());\n\n      if (response && response.data && response.data.result) {\n        if (response.data.result.netcoolPingResponse) {\n          dispatch(LsiPingStatusApiSuccess(response.data.result.netcoolPingResponse, response.data.result.netcoolPingLinkStatus));\n        } else {\n          dispatch(LsiPingStatusApiSuccess(response.data.result, \"\"));\n        }\n      } else {\n        snackbarMessage = SnackbarMessages.LSI_PING_NO_DATA;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        dispatch(LsiPingStatusApiFailure(response.data.result));\n      }\n    }, function (error) {\n      dispatch(LsiPingStatusHideLoader());\n      dispatch(LsiPingStatusApiFailure(error));\n    });\n  };\n};\n\nvar setLsiPingStatusData = function setLsiPingStatusData(data) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state && state.LsiPingStatusTabData && state.LsiPingStatusTabData.LsiPingStatusApiResponse) {\n      dispatch(LsiPingStatusApiSuccess(data));\n    }\n  };\n};\n\nfunction fetchLsiPingStatusApiLoading() {\n  return {\n    type: LsiPingStatusActionType.LSI_PING_STATUS_REQUEST\n  };\n}\n\nfunction LsiPingStatusApiSuccess(pingStatus, linkStatus) {\n  return {\n    type: LsiPingStatusActionType.LSI_PING_STATUS_SUCCESS,\n    pingStatus: pingStatus,\n    linkStatus: linkStatus\n  };\n}\n\nexport function updateLsiPingStatusValue(response) {\n  return {\n    type: LsiPingStatusActionType.UPDATE_LSI_PING_STATUS_VALUE,\n    payload: response\n  };\n}\nexport function updateLsiLinkStatusValue(response) {\n  return {\n    type: LsiPingStatusActionType.UPDATE_LSI_LINK_STATUS_VALUE,\n    payload: response\n  };\n}\n\nfunction LsiPingStatusApiFailure(error) {\n  return {\n    type: LsiPingStatusActionType.LSI_PING_STATUS_FAILURE,\n    payload: error\n  };\n}\n\nexport var openSnackbarRequestForCopiedToClipboard = function openSnackbarRequestForCopiedToClipboard() {\n  return function (dispatch, getState) {\n    var snackbarMessage = SnackbarMessages.LSI_PING_DATA_COPIED_TO_CLIPBOARD;\n    dispatch(openSnackbarRequest(null, snackbarMessage));\n  };\n};\n\nfunction LsiPingStatusShowLoader() {\n  return {\n    type: LsiPingStatusActionType.SHOW_LOADER,\n    loader: true\n  };\n}\n\nfunction LsiPingStatusHideLoader() {\n  return {\n    type: LsiPingStatusActionType.HIDE_LOADER,\n    loader: false\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/lsi-ping-status.action.js"],"names":["LsiPingStatusActionType","LsiPingStatusService","SnackbarMessages","openSnackbarRequest","AppConstant","fetchLsiPingStatusData","dispatch","getState","state","customerInfo","lsiNumberInput","snackbarMessage","fetchLsiPingStatusApiLoading","LsiPingStatusShowLoader","updateLsiLinkStatusValue","fetchLsiPingStatusApi","then","response","LsiPingStatusHideLoader","data","result","netcoolPingResponse","LsiPingStatusApiSuccess","netcoolPingLinkStatus","LSI_PING_NO_DATA","LsiPingStatusApiFailure","error","setLsiPingStatusData","LsiPingStatusTabData","LsiPingStatusApiResponse","type","LSI_PING_STATUS_REQUEST","pingStatus","linkStatus","LSI_PING_STATUS_SUCCESS","updateLsiPingStatusValue","UPDATE_LSI_PING_STATUS_VALUE","payload","UPDATE_LSI_LINK_STATUS_VALUE","LSI_PING_STATUS_FAILURE","openSnackbarRequestForCopiedToClipboard","LSI_PING_DATA_COPIED_TO_CLIPBOARD","SHOW_LOADER","loader","HIDE_LOADER"],"mappings":"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","sourcesContent":["import { LsiPingStatusActionType } from \"../actiontype/lsi-ping-status.actiontype\";\nimport LsiPingStatusService from '../services/lsi-ping-status.service';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { AppConstant } from \"../constants/app.constant\";\n\n\nexport const fetchLsiPingStatusData = () => (dispatch, getState) => {\n\n    const state = getState();\n    if (!state.customerInfo || !state.customerInfo.lsiNumberInput) {\n        return false;\n    }\n\n    // if (state && state.LsiPingStatusTabData) {\n    //     if(state.LsiPingStatusTabData.LsiPingStatusApiResponse) {\n    //         dispatch(LsiPingStatusApiSuccess(state.LsiPingStatusTabData.LsiPingStatusApiResponse));\n    //         return;\n    //     }\n    // }\n\n    let snackbarMessage = {}\n    dispatch(fetchLsiPingStatusApiLoading());\n    dispatch(LsiPingStatusShowLoader());\n    dispatch(updateLsiLinkStatusValue(null));\n    LsiPingStatusService.fetchLsiPingStatusApi(state.customerInfo.lsiNumberInput).then(\n        response => {\n            dispatch(LsiPingStatusHideLoader());\n            if (response && response.data && response.data.result) {\n                if (response.data.result.netcoolPingResponse) {\n                    dispatch(LsiPingStatusApiSuccess(response.data.result.netcoolPingResponse, response.data.result.netcoolPingLinkStatus));\n                } else {\n                    dispatch(LsiPingStatusApiSuccess(response.data.result, \"\"));\n                }\n\n            } else {\n                snackbarMessage = SnackbarMessages.LSI_PING_NO_DATA;\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n                dispatch(LsiPingStatusApiFailure(response.data.result));\n            }\n        },\n        error => {\n            dispatch(LsiPingStatusHideLoader());\n            dispatch(LsiPingStatusApiFailure(error));\n        }\n    );\n}\n\nconst setLsiPingStatusData = (data) => (dispatch, getState) => {\n    const state = getState();\n    if (state && state.LsiPingStatusTabData && state.LsiPingStatusTabData.LsiPingStatusApiResponse) {\n        dispatch(LsiPingStatusApiSuccess(data));\n    }\n}\n\nfunction fetchLsiPingStatusApiLoading() {\n    return {\n        type: LsiPingStatusActionType.LSI_PING_STATUS_REQUEST\n    }\n}\nfunction LsiPingStatusApiSuccess(pingStatus, linkStatus) {\n    return {\n        type: LsiPingStatusActionType.LSI_PING_STATUS_SUCCESS,\n        pingStatus,\n        linkStatus\n    }\n}\n\nexport function updateLsiPingStatusValue(response) {\n    return {\n        type: LsiPingStatusActionType.UPDATE_LSI_PING_STATUS_VALUE,\n        payload: response\n    }\n}\n\nexport function updateLsiLinkStatusValue(response) {\n    return {\n        type: LsiPingStatusActionType.UPDATE_LSI_LINK_STATUS_VALUE,\n        payload: response\n    }\n}\n\nfunction LsiPingStatusApiFailure(error) {\n    return {\n        type: LsiPingStatusActionType.LSI_PING_STATUS_FAILURE,\n        payload: error\n    }\n}\n\nexport const openSnackbarRequestForCopiedToClipboard = () => (dispatch, getState) => {\n    let snackbarMessage = SnackbarMessages.LSI_PING_DATA_COPIED_TO_CLIPBOARD;\n    dispatch(openSnackbarRequest(null, snackbarMessage));\n}\n\nfunction LsiPingStatusShowLoader() {\n    return {\n        type: LsiPingStatusActionType.SHOW_LOADER,\n        loader: true\n    }\n}\n\nfunction LsiPingStatusHideLoader() {\n    return {\n        type: LsiPingStatusActionType.HIDE_LOADER,\n        loader: false\n    }\n}\n"]},"metadata":{},"sourceType":"module"}