{"ast":null,"code":"import { CallTransferDialogActionType } from \"../actiontype/call-transfer-dialog.actiontype\";\nimport CallTransferDialogService from '../services/call-transfer-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from './app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { callTransferFTRRequest } from './ftr.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nvar snackbarMessage = {};\nvar callTransferApiResponse = {};\nexport var fetctCallTransferDialogData = function fetctCallTransferDialogData(callTransferDialogObj) {\n  return function (dispatch, getState) {\n    dispatch(fetchCallTransferApiLoading());\n    dispatch(showLoader());\n    CallTransferDialogService.fetchCallTransferApi().then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        callTransferApiResponse = response.data.result;\n        var callTransfercategory = Object.keys(response.data.result);\n        dispatch(fetchCallTransferCategoryApiSuccess(callTransfercategory));\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(fetchCallTransferApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\nexport var fetchCalltransferSubcategory = function fetchCalltransferSubcategory(selectedCallTransferCategory) {\n  return function (dispatch) {\n    if (callTransferApiResponse && selectedCallTransferCategory) {\n      for (var key in callTransferApiResponse) {\n        if (key === selectedCallTransferCategory) {\n          var selectedSubCatgegoryApiResponse = callTransferApiResponse[key];\n          dispatch(fetchCallTransferSubCategoryApiSuccess(selectedSubCatgegoryApiResponse));\n          break;\n        }\n      }\n    }\n  };\n};\nexport var callTransferFTRHandler = function callTransferFTRHandler(callTransferdata) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var scenarioName = state.scenario.currentScenarioInfo.name;\n    var transferTagging = callTransferdata['tagging'];\n\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.TRANSFER_FTR_TAGGING]) {\n      snackbarMessage = SnackbarMessages.DUPLICATE_CALL_TRANSFER;\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n      return;\n    } //to do\n    // let transferTagging = \"Test2 L2/Transfer Tagging>Request>FTR>Data and Devices>Mobile Internet>Handset settings>OTA settings sent\";\n\n\n    if (callTransferdata && callTransferdata.categoryName && callTransferdata.categoryName === 'L2/Transfer' && scenarioName) {\n      transferTagging = transferTagging.slice(transferTagging.indexOf('>'));\n      transferTagging = scenarioName + transferTagging;\n    } else {\n      transferTagging = callTransferdata && callTransferdata['tagging'] ? callTransferdata['tagging'] : null;\n    }\n\n    var reqData = {\n      notes: state.scenario.scenarioNotes,\n      scenarioName: state.scenario.currentScenarioInfo.name,\n      smsTemplate: null,\n      tagging: transferTagging,\n      transactionId: state.scenario.scenarioStatus.transactionId\n    };\n    dispatch(makeCallTransferFtrCall(reqData));\n  };\n};\nexport var makeCallTransferFtrCall = function makeCallTransferFtrCall(callTransferdata) {\n  return function (dispatch, getState) {\n    dispatch(callTransferFTRRequest(callTransferdata));\n  };\n};\n\nfunction fetchCallTransferApiLoading() {\n  return {\n    type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_REQUEST\n  };\n}\n\nfunction fetchCallTransferCategoryApiSuccess(response) {\n  return {\n    type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_SUCCESS,\n    payload: response\n  };\n}\n\nfunction fetchCallTransferApiFailure(error) {\n  return {\n    type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_FAILURE,\n    payload: error\n  };\n}\n\nfunction fetchCallTransferSubCategoryApiSuccess(response) {\n  return {\n    type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_SUBCATEGORY,\n    payload: response\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/call-transfer-dialog.action.js"],"names":["CallTransferDialogActionType","CallTransferDialogService","openSnackbarRequest","showLoader","hideLoader","SnackbarMessages","callTransferFTRRequest","DisabledTaggingStatus","snackbarMessage","callTransferApiResponse","fetctCallTransferDialogData","callTransferDialogObj","dispatch","getState","fetchCallTransferApiLoading","fetchCallTransferApi","then","response","data","result","callTransfercategory","Object","keys","fetchCallTransferCategoryApiSuccess","DEFAULT_ERROR_MSG","error","fetchCallTransferApiFailure","fetchCalltransferSubcategory","selectedCallTransferCategory","key","selectedSubCatgegoryApiResponse","fetchCallTransferSubCategoryApiSuccess","callTransferFTRHandler","callTransferdata","state","scenarioName","scenario","currentScenarioInfo","name","transferTagging","disabledTaggingInfo","TRANSFER_FTR_TAGGING","DUPLICATE_CALL_TRANSFER","categoryName","slice","indexOf","reqData","notes","scenarioNotes","smsTemplate","tagging","transactionId","scenarioStatus","makeCallTransferFtrCall","type","FETCH_CALL_TRANSFER_DIALOG_REQUEST","FETCH_CALL_TRANSFER_DIALOG_SUCCESS","payload","FETCH_CALL_TRANSFER_DIALOG_FAILURE","FETCH_CALL_TRANSFER_SUBCATEGORY"],"mappings":"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","sourcesContent":["import { CallTransferDialogActionType } from \"../actiontype/call-transfer-dialog.actiontype\";\nimport CallTransferDialogService from '../services/call-transfer-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from './app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { callTransferFTRRequest } from './ftr.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nlet snackbarMessage = {};\nlet callTransferApiResponse = {};\nexport const fetctCallTransferDialogData = callTransferDialogObj => (dispatch, getState) => {\n    \n    dispatch(fetchCallTransferApiLoading());\n    dispatch(showLoader());\n    CallTransferDialogService.fetchCallTransferApi().then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                callTransferApiResponse = response.data.result;\n                const callTransfercategory = Object.keys(response.data.result);\n                dispatch(fetchCallTransferCategoryApiSuccess(callTransfercategory));\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n            }\n\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(fetchCallTransferApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\n\nexport const fetchCalltransferSubcategory = selectedCallTransferCategory => dispatch => {\n    if (callTransferApiResponse && selectedCallTransferCategory) {\n        for (var key in callTransferApiResponse) {\n            if (key === selectedCallTransferCategory) {\n                const selectedSubCatgegoryApiResponse = callTransferApiResponse[key];\n                dispatch(fetchCallTransferSubCategoryApiSuccess(selectedSubCatgegoryApiResponse));\n                break;\n            }\n        }\n    }\n}\nexport const callTransferFTRHandler = (callTransferdata) => (dispatch, getState) => {\n    const state = getState();\n    const scenarioName = state.scenario.currentScenarioInfo.name;\n    let transferTagging = callTransferdata['tagging'];\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.TRANSFER_FTR_TAGGING]) {\n        snackbarMessage = SnackbarMessages.DUPLICATE_CALL_TRANSFER;\n        dispatch(openSnackbarRequest(null, snackbarMessage));\n        return;\n    }\n    //to do\n    // let transferTagging = \"Test2 L2/Transfer Tagging>Request>FTR>Data and Devices>Mobile Internet>Handset settings>OTA settings sent\";\n    if (callTransferdata && callTransferdata.categoryName && callTransferdata.categoryName === 'L2/Transfer' && scenarioName) {\n        transferTagging = transferTagging.slice(transferTagging.indexOf('>'));\n        transferTagging = scenarioName + transferTagging;\n    }\n    else {\n        transferTagging = callTransferdata && callTransferdata['tagging'] ? callTransferdata['tagging'] : null\n    }\n    const reqData = {\n        notes: state.scenario.scenarioNotes,\n        scenarioName: state.scenario.currentScenarioInfo.name,\n        smsTemplate: null,\n        tagging: transferTagging,\n        transactionId: state.scenario.scenarioStatus.transactionId\n    }\n    dispatch(makeCallTransferFtrCall(reqData));\n\n}\nexport const makeCallTransferFtrCall = (callTransferdata) => (dispatch, getState) => {\n    dispatch(callTransferFTRRequest(callTransferdata));\n}\n\nfunction fetchCallTransferApiLoading() { return { type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_REQUEST } }\nfunction fetchCallTransferCategoryApiSuccess(response) { return { type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_SUCCESS, payload: response } }\nfunction fetchCallTransferApiFailure(error) { return { type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_DIALOG_FAILURE, payload: error } }\nfunction fetchCallTransferSubCategoryApiSuccess(response) { return { type: CallTransferDialogActionType.FETCH_CALL_TRANSFER_SUBCATEGORY, payload: response } }\n"]},"metadata":{},"sourceType":"module"}