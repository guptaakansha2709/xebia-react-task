{"ast":null,"code":"import AuthorizationActionType from \"../actiontype/authorization.actiontype\";\nimport ApiService from \"../services/api.service\";\nimport { loginApiSuccess, loginApiFailure, handleLogout } from \"../actions/login.action\";\nimport CookieManagerService from \"../services/cookie.service\";\nexport var authorizeUser = function authorizeUser() {\n  return {\n    type: AuthorizationActionType.USER_AUTHORIZED\n  };\n};\nexport var unauthorizeUser = function unauthorizeUser() {\n  return {\n    type: AuthorizationActionType.USER_UNAUTHORIZED\n  };\n};\n\nvar checkAuthTokenLoading = function checkAuthTokenLoading() {\n  return {\n    type: AuthorizationActionType.CHECK_AUTH_TOKEN_LOADING\n  };\n};\n\nexport var checkAuthToken = function checkAuthToken() {\n  return function (dispatch) {\n    var token = CookieManagerService.getItem('AUTH_DETAILS');\n\n    if (token) {\n      try {\n        var tokenJson = JSON.parse(token);\n\n        if (tokenJson) {\n          var accessToken = tokenJson.access_token;\n\n          if (accessToken) {\n            dispatch(checkAuthTokenLoading());\n            ApiService.checkAuthToken(accessToken).then(function (response) {\n              dispatch(authorizeUser());\n              dispatch(loginApiSuccess(response));\n            }, function (err) {\n              if (err && err.response && err.response.status && err.response.status === 400 && err.response.data && err.response.data.error === \"invalid_token\") {\n                dispatch(handleLogout());\n              }\n\n              dispatch(loginApiFailure(err));\n              dispatch(unauthorizeUser());\n            });\n          }\n        } else {\n          dispatch(unauthorizeUser());\n        }\n      } catch (e) {\n        dispatch(unauthorizeUser());\n      }\n    } else {\n      dispatch(unauthorizeUser());\n    }\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/authorization.actions.js"],"names":["AuthorizationActionType","ApiService","loginApiSuccess","loginApiFailure","handleLogout","CookieManagerService","authorizeUser","type","USER_AUTHORIZED","unauthorizeUser","USER_UNAUTHORIZED","checkAuthTokenLoading","CHECK_AUTH_TOKEN_LOADING","checkAuthToken","dispatch","token","getItem","tokenJson","JSON","parse","accessToken","access_token","then","response","err","status","data","error","e"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,wCAApC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,YAA3C,QAA+D,yBAA/D;AACA,OAAOC,oBAAP,MAAiC,4BAAjC;AAGA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC/B,SAAO;AAAEC,IAAAA,IAAI,EAAEP,uBAAuB,CAACQ;AAAhC,GAAP;AACH,CAFM;AAGP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC,SAAO;AAAEF,IAAAA,IAAI,EAAEP,uBAAuB,CAACU;AAAhC,GAAP;AACH,CAFM;;AAIP,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAChC,SAAO;AAAEJ,IAAAA,IAAI,EAAEP,uBAAuB,CAACY;AAAhC,GAAP;AACH,CAFD;;AAIA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAE5C,QAAMC,KAAK,GAAGV,oBAAoB,CAACW,OAArB,CAA6B,cAA7B,CAAd;;AACA,QAAID,KAAJ,EAAW;AACP,UAAI;AACA,YAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAlB;;AACA,YAAIE,SAAJ,EAAe;AACX,cAAMG,WAAW,GAAGH,SAAS,CAACI,YAA9B;;AACA,cAAID,WAAJ,EAAiB;AAEbN,YAAAA,QAAQ,CAACH,qBAAqB,EAAtB,CAAR;AAEAV,YAAAA,UAAU,CAACY,cAAX,CAA0BO,WAA1B,EAAuCE,IAAvC,CACI,UAAAC,QAAQ,EAAI;AACRT,cAAAA,QAAQ,CAACR,aAAa,EAAd,CAAR;AACAQ,cAAAA,QAAQ,CAACZ,eAAe,CAACqB,QAAD,CAAhB,CAAR;AACH,aAJL,EAKI,UAAAC,GAAG,EAAI;AACH,kBAAIA,GAAG,IAAIA,GAAG,CAACD,QAAX,IAAuBC,GAAG,CAACD,QAAJ,CAAaE,MAApC,IAA8CD,GAAG,CAACD,QAAJ,CAAaE,MAAb,KAAwB,GAAtE,IAA6ED,GAAG,CAACD,QAAJ,CAAaG,IAA1F,IAAkGF,GAAG,CAACD,QAAJ,CAAaG,IAAb,CAAkBC,KAAlB,KAA4B,eAAlI,EAAmJ;AAC/Ib,gBAAAA,QAAQ,CAACV,YAAY,EAAb,CAAR;AACH;;AACDU,cAAAA,QAAQ,CAACX,eAAe,CAACqB,GAAD,CAAhB,CAAR;AACAV,cAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AAEH,aAZL;AAeH;AACJ,SAtBD,MAuBK;AACDK,UAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACH;AACJ,OA5BD,CA6BA,OAAOmB,CAAP,EAAU;AACNd,QAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACH;AACJ,KAjCD,MAkCK;AACDK,MAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACH;AAEJ,GAzC6B;AAAA,CAAvB","sourcesContent":["import AuthorizationActionType from \"../actiontype/authorization.actiontype\";\nimport ApiService from \"../services/api.service\";\nimport { loginApiSuccess, loginApiFailure, handleLogout } from \"../actions/login.action\"\nimport CookieManagerService from \"../services/cookie.service\"\n\n\nexport const authorizeUser = () => {\n    return { type: AuthorizationActionType.USER_AUTHORIZED }\n}\nexport const unauthorizeUser = () => {\n    return { type: AuthorizationActionType.USER_UNAUTHORIZED }\n}\n\nconst checkAuthTokenLoading = () => {\n    return { type: AuthorizationActionType.CHECK_AUTH_TOKEN_LOADING }\n}\n\nexport const checkAuthToken = () => dispatch => {\n\n    const token = CookieManagerService.getItem('AUTH_DETAILS')\n    if (token) {\n        try {\n            const tokenJson = JSON.parse(token);\n            if (tokenJson) {\n                const accessToken = tokenJson.access_token\n                if (accessToken) {\n\n                    dispatch(checkAuthTokenLoading());\n\n                    ApiService.checkAuthToken(accessToken).then(\n                        response => {\n                            dispatch(authorizeUser());\n                            dispatch(loginApiSuccess(response));\n                        },\n                        err => {\n                            if (err && err.response && err.response.status && err.response.status === 400 && err.response.data && err.response.data.error === \"invalid_token\") {\n                                dispatch(handleLogout())\n                            }\n                            dispatch(loginApiFailure(err));\n                            dispatch(unauthorizeUser());\n\n                        }\n                    )\n\n                }\n            }\n            else {\n                dispatch(unauthorizeUser());\n            }\n        }\n        catch (e) {\n            dispatch(unauthorizeUser());\n        }\n    }\n    else {\n        dispatch(unauthorizeUser());\n    }\n\n}"]},"metadata":{},"sourceType":"module"}