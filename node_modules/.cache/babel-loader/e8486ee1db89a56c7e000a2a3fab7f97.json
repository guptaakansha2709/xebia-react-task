{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/feedback-dialog/feedback-dialog.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport '../../../../index.css';\nimport { submitFeedbackDialogData as _submitFeedbackDialogData, updateCheckedFields as _updateCheckedFields, updateFeedbackTypes as _updateFeedbackTypes, updateSelectedTab as _updateSelectedTab, submitFeedbackModal as _submitFeedbackModal } from '../../../../actions/feedback-dialog.action';\nimport { closeFeedbackDialog as _closeFeedbackDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport FeedbackTabPanel from './feedback-tab-panel.smart';\n\nvar FeedbackDialog =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FeedbackDialog, _Component);\n\n  function FeedbackDialog(props) {\n    var _this;\n\n    _classCallCheck(this, FeedbackDialog);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FeedbackDialog).call(this, props));\n\n    _this.handleFeedbackFormSubmit = function (event, feedbackTypes) {\n      event.preventDefault();\n\n      _this.props.submitFeedbackModal(feedbackTypes);\n\n      _this.handleCloseModal();\n    };\n\n    _this.handleChangeFeedbackType = function (event) {\n      _this.setState({\n        selectedCategory: event.target.value\n      });\n    };\n\n    _this.handleChange = function (event, value) {\n      _this.props.updateSelectedTab(value);\n    };\n\n    _this.handleCheckBoxChange = function (key) {\n      return function (event) {\n        var feedbackTypes = _this.props.feedbackTypes;\n        var checkedCount = _this.props.checkedValues;\n        var tabValue = _this.props.selectedTab;\n\n        for (var i = 0; i < feedbackTypes.length; i++) {\n          if (feedbackTypes[i].key === key) {\n            feedbackTypes[i].checked = !feedbackTypes[i].checked;\n\n            if (feedbackTypes[i].checked === false) {\n              checkedCount -= 1;\n\n              if (tabValue === feedbackTypes[i].problemAt) {\n                tabValue = null;\n              }\n            } else {\n              checkedCount += 1;\n            }\n          }\n        }\n\n        if (tabValue === null) {\n          for (var i = 0; i < feedbackTypes.length; i++) {\n            if (feedbackTypes[i].checked) {\n              tabValue = feedbackTypes[i].problemAt;\n              break;\n            }\n          }\n        }\n\n        _this.props.updateCheckedFields(checkedCount);\n\n        _this.props.updateFeedbackTypes(feedbackTypes);\n\n        _this.props.updateSelectedTab(tabValue);\n      };\n    };\n\n    _this.handleCloseModal = function () {\n      _this.props.closeFeedbackDialog();\n    };\n\n    _this.handleFeedbackFormSubmit = _this.handleFeedbackFormSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChangeFeedbackType = _this.handleChangeFeedbackType.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleCloseModal = _this.handleCloseModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(FeedbackDialog, [{\n    key: \"a11yProps\",\n    value: function a11yProps(index) {\n      return {\n        id: \"full-width-tab-\".concat(index),\n        'aria-controls': \"full-width-tabpanel-\".concat(index)\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var feedbackDialogTitle = this.props.feedbackDialogTitle;\n      var feedbackDialogStatus = this.props.feedbackDialogStatus;\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          checkedValues = _this$props.checkedValues,\n          feedbackTypes = _this$props.feedbackTypes,\n          selectedTab = _this$props.selectedTab;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Dialog, {\n        open: feedbackDialogStatus,\n        onClose: this.handleCloseModal,\n        maxWidth: \"sm\",\n        fullWidth: true,\n        \"aria-labelledby\": \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"form-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, feedbackDialogTitle, React.createElement(IconButton, {\n        \"aria-label\": \"Close\",\n        className: classes.closeButton,\n        onClick: this.handleCloseModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }))), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        },\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        component: \"fieldset\",\n        className: classes.formControl + \" inline-block-important\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.props.feedbackTypes.map(function (item) {\n        return React.createElement(FormControlLabel, {\n          key: item.problemAt,\n          className: \"width-25\",\n          control: React.createElement(Checkbox, {\n            checked: item.checked,\n            onChange: _this2.handleCheckBoxChange(item.key),\n            value: item.problemAt,\n            color: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }),\n          label: item.problemAt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          },\n          __self: this\n        });\n      })), checkedValues > 0 && React.createElement(\"div\", {\n        className: \"padding-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        square: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        value: selectedTab,\n        indicatorColor: \"primary\",\n        textColor: \"primary\",\n        onChange: this.handleChange,\n        variant: \"scrollable\",\n        scrollButtons: \"auto\",\n        \"aria-label\": \"scrollable auto tabs example\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, this.props.feedbackTypes.map(function (item) {\n        return item.checked && React.createElement(Tab, Object.assign({\n          key: item.problemAt,\n          className: \"width-20\",\n          value: item.problemAt,\n          label: item.problemAt\n        }, _this2.a11yProps(item.problemAt), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }));\n      }))), React.createElement(FeedbackTabPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })))), React.createElement(DialogActions, {\n        className: \"custom-blue-button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        size: \"large\",\n        className: \"color-white\",\n        onClick: function onClick(e) {\n          return _this2.handleFeedbackFormSubmit(e, feedbackTypes);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"SUBMIT\"))));\n    }\n  }]);\n\n  return FeedbackDialog;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    submitFeedbackDialogData: function submitFeedbackDialogData(data) {\n      return dispatch(_submitFeedbackDialogData(data));\n    },\n    closeFeedbackDialog: function closeFeedbackDialog(data) {\n      return dispatch(_closeFeedbackDialog(data));\n    },\n    updateCheckedFields: function updateCheckedFields(data) {\n      return dispatch(_updateCheckedFields(data));\n    },\n    updateFeedbackTypes: function updateFeedbackTypes(data) {\n      return dispatch(_updateFeedbackTypes(data));\n    },\n    updateSelectedTab: function updateSelectedTab(data) {\n      return dispatch(_updateSelectedTab(data));\n    },\n    submitFeedbackModal: function submitFeedbackModal(data) {\n      return dispatch(_submitFeedbackModal(data));\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    feedbackDialogStatus: state.dialogInfo.feedbackDialogStatus,\n    feedbackDialogTitle: state.dialogInfo.feedbackDialogTitle,\n    feedbackCallApiResponse: state.feedbackCallInfo.feedbackCallApiResponse,\n    checkedValues: state.b2bFeedbackData.checkedTabs,\n    feedbackTypes: state.b2bFeedbackData.feedbackTypes,\n    selectedTab: state.b2bFeedbackData.selectedTab\n  };\n};\n\nFeedbackDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(FeedbackDialog));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/shared/dialogs/feedback-dialog/feedback-dialog.smart.js"],"names":["React","Component","connect","Button","Dialog","DialogActions","DialogContent","DialogTitle","PropTypes","withStyles","FormControlLabel","FormControl","IconButton","CloseIcon","Checkbox","submitFeedbackDialogData","updateCheckedFields","updateFeedbackTypes","updateSelectedTab","submitFeedbackModal","closeFeedbackDialog","styles","Tabs","Tab","Paper","FeedbackTabPanel","FeedbackDialog","props","handleFeedbackFormSubmit","event","feedbackTypes","preventDefault","handleCloseModal","handleChangeFeedbackType","setState","selectedCategory","target","value","handleChange","handleCheckBoxChange","key","checkedCount","checkedValues","tabValue","selectedTab","i","length","checked","problemAt","bind","index","id","feedbackDialogTitle","feedbackDialogStatus","classes","closeButton","formControl","map","item","a11yProps","e","mapDispatchToProps","dispatch","data","mapStateToProps","state","dialogInfo","feedbackCallApiResponse","feedbackCallInfo","b2bFeedbackData","checkedTabs","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport '../../../../index.css';\nimport { submitFeedbackDialogData, updateCheckedFields, updateFeedbackTypes, updateSelectedTab, submitFeedbackModal } from '../../../../actions/feedback-dialog.action';\nimport { closeFeedbackDialog } from '../../../../actions/dialog.action';\nimport styles from '../dialog-style'\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport FeedbackTabPanel  from './feedback-tab-panel.smart';\n\nclass FeedbackDialog extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleFeedbackFormSubmit = this.handleFeedbackFormSubmit.bind(this);\n        this.handleChangeFeedbackType = this.handleChangeFeedbackType.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n    }\n\n    a11yProps(index) {\n        return {\n          id: `full-width-tab-${index}`,\n          'aria-controls': `full-width-tabpanel-${index}`,\n        };\n    }\n    \n    \n    handleFeedbackFormSubmit = (event, feedbackTypes) => {\n        event.preventDefault();\n        this.props.submitFeedbackModal(feedbackTypes);\n        this.handleCloseModal();\n\n    }\n\n    handleChangeFeedbackType = event => {\n        this.setState({ selectedCategory: event.target.value });\n    };\n    handleChange = (event, value) => {\n        this.props.updateSelectedTab(value);\n    };\n\n    handleCheckBoxChange = (key) => event => {\n        let feedbackTypes = this.props.feedbackTypes;\n        let checkedCount = this.props.checkedValues;\n        let tabValue = this.props.selectedTab;\n        for(var i=0; i< feedbackTypes.length; i++) {\n            if (feedbackTypes[i].key === key) {\n                feedbackTypes[i].checked = !feedbackTypes[i].checked;\n                if (feedbackTypes[i].checked === false) {\n                    checkedCount -= 1;\n                    if (tabValue === feedbackTypes[i].problemAt) {\n                        tabValue = null;\n                    }\n                } else {\n                    checkedCount += 1;\n                }\n            }\n        }\n        if (tabValue === null) {\n            for(var i=0; i< feedbackTypes.length; i++) {\n                if (feedbackTypes[i].checked) {\n                    tabValue = feedbackTypes[i].problemAt;\n                    break;\n                }\n            }\n        } \n        \n        this.props.updateCheckedFields(checkedCount);\n        this.props.updateFeedbackTypes(feedbackTypes);\n        this.props.updateSelectedTab(tabValue);\n    }\n\n    handleCloseModal = () => {\n        this.props.closeFeedbackDialog();\n    }\n\n    \n    render() {\n        const feedbackDialogTitle = this.props.feedbackDialogTitle;\n        const feedbackDialogStatus = this.props.feedbackDialogStatus;\n        const { classes, checkedValues,  feedbackTypes, selectedTab } = this.props;  \n        return (\n            <React.Fragment>\n                <Dialog\n                    open={feedbackDialogStatus}\n                    onClose={this.handleCloseModal}\n                    maxWidth={`sm`}\n                    fullWidth={true}\n                    aria-labelledby=\"form-dialog-title\"\n                >\n                    <DialogTitle id=\"form-dialog-title\">\n                        {feedbackDialogTitle}\n                        <IconButton aria-label=\"Close\" className={classes.closeButton} onClick={this.handleCloseModal}>\n                            <CloseIcon />\n                        </IconButton>\n                    </DialogTitle>\n                    <DialogContent>\n                        <form onSubmit={event => event.preventDefault()} noValidate autoComplete=\"off\">\n                            <FormControl component=\"fieldset\" className={(classes.formControl) + \" inline-block-important\"}>\n                                { this.props.feedbackTypes.map(item => (\n                                    <FormControlLabel\n                                        key = {item.problemAt}\n                                        className=\"width-25\"\n                                        control={\n                                            <Checkbox \n                                                checked={item.checked} \n                                                onChange={this.handleCheckBoxChange(item.key)} \n                                                value={item.problemAt} \n                                                color=\"primary\"/>\n                                        }\n                                        label={item.problemAt}\n                                    />\n                                    ))\n                                }\n                            </FormControl>\n                            {checkedValues>0 && \n                                <div className=\"padding-20\">\n                                <Paper square>\n                                    <Tabs\n                                        value={selectedTab}\n                                        indicatorColor=\"primary\"\n                                        textColor=\"primary\"\n                                        onChange={this.handleChange}\n                                        variant=\"scrollable\"\n                                        scrollButtons=\"auto\"\n                                        aria-label=\"scrollable auto tabs example\"\n                                    >\n                                        {this.props.feedbackTypes.map(item => (\n                                            item.checked && \n                                            <Tab key={item.problemAt} className=\"width-20\" value={item.problemAt} label={item.problemAt} {...this.a11yProps(item.problemAt)}/>\n                                        ))}\n                                    </Tabs>\n                                </Paper>\n                                \n                                    <FeedbackTabPanel></FeedbackTabPanel>\n                                </div>\n                            }\n                            \n                        </form>\n\n                    </DialogContent>\n                    <DialogActions className=\"custom-blue-button\">\n                        <Button variant=\"contained\" size=\"large\" className=\"color-white\" onClick={(e) => this.handleFeedbackFormSubmit(e, feedbackTypes)}>SUBMIT</Button>\n                    </DialogActions>\n                </Dialog>\n            </React.Fragment>\n\n        )\n    }\n}\n\n\n\nconst mapDispatchToProps = dispatch => ({\n    submitFeedbackDialogData: data => dispatch(submitFeedbackDialogData(data)),\n    closeFeedbackDialog: data => dispatch(closeFeedbackDialog(data)),\n    updateCheckedFields: data => dispatch(updateCheckedFields(data)),\n    updateFeedbackTypes: data => dispatch(updateFeedbackTypes(data)), \n    updateSelectedTab: data => dispatch(updateSelectedTab(data)),\n    submitFeedbackModal: data => dispatch(submitFeedbackModal(data))\n});\nconst mapStateToProps = state => {\n    return {\n        feedbackDialogStatus: state.dialogInfo.feedbackDialogStatus,\n        feedbackDialogTitle: state.dialogInfo.feedbackDialogTitle,\n        feedbackCallApiResponse: state.feedbackCallInfo.feedbackCallApiResponse,\n        checkedValues: state.b2bFeedbackData.checkedTabs,\n        feedbackTypes: state.b2bFeedbackData.feedbackTypes,\n        selectedTab: state.b2bFeedbackData.selectedTab\n    };\n}\n\nFeedbackDialog.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default connect(\n    mapStateToProps, mapDispatchToProps\n)(withStyles(styles)(FeedbackDialog));"]},"metadata":{},"sourceType":"module"}