{"ast":null,"code":"import { FTRActionType } from \"../actiontype/ftr.actiontype\";\nimport FTRService from '../services/ftr.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { AppConstant } from '../constants/app.constant';\nimport { diaplayFTRMessageDialog } from '../actions/app-dialog.action';\nimport { disabledFtrTagging, disabledScenarioFTRTagging, disabledSubHeaderOutstandingFTRTagging, disabledBillComoparatorFTRTagging, disabledPlanUsageCardFTRTagging, disabledMultipleDynamicFTRTagging } from './disabled-tagging.action';\nimport { openBookmarkScenario } from './scenario.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledCallTransferTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { predictionFTRResponseHandler } from \"./prediction.action\";\nvar snackbarMessage = {};\nexport var tagFTRRequest = function tagFTRRequest(reqData, source, multipleDynamicTaggingKey) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    dispatch(showLoader());\n    FTRService.tagFTRRequest(reqData).then(function (response) {\n      var successMessage = FTRService.getAndCheckFtrSuccessMessage(source, state);\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        var obj = {\n          interactionId: response.data.result.tagId,\n          successMessage: successMessage,\n          faultTrace: response.data.result.faultTrace,\n          message: response.data.result.message\n        };\n        dispatch(ftrResponseHandler(obj, source, multipleDynamicTaggingKey));\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n\n      if (bookmarkOnCRMCodeClick && source === DisabledTaggingStatus.SCENARIO_FTR_TAGGING) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(openSnackbarRequest(error));\n\n      if (bookmarkOnCRMCodeClick && source === DisabledTaggingStatus.SCENARIO_FTR_TAGGING) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    });\n  };\n};\nexport var callTransferFTRRequest = function callTransferFTRRequest(reqData) {\n  return function (dispatch) {\n    dispatch(showLoader());\n    FTRService.callTransferFTRRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result) {\n        var obj = {\n          interactionId: response.data.result.tagId,\n          successMessage: AppConstant.FTR_SUCCESS_MESSAGE,\n          faultTrace: response.data.result.faultTrace,\n          message: response.data.result.message\n        };\n\n        if (response.data.result.tagId) {\n          dispatch(disabledCallTransferTagging(true));\n          dispatch(onCallTransferFTRSuccess(obj));\n          dispatch(diaplayFTRMessageDialog());\n          dispatch(disabledFtrTagging());\n        } else {\n          var message = response.data.result.message;\n          dispatch(openSnackbarRequest(null, message));\n        }\n      } else {\n        dispatch(openSnackbarRequest(null));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\n\nfunction onCallTransferFTRSuccess(payload) {\n  return {\n    type: FTRActionType.CALL_TRANSFER_FTR_REQUEST,\n    payload: payload\n  };\n}\n\nfunction onTagFTRSuccess(payload) {\n  return {\n    type: FTRActionType.SCENARIO_FTR_REQUEST,\n    payload: payload\n  };\n}\n\nexport var ftrResponseHandler = function ftrResponseHandler(response, source, multipleDynamicTaggingKey) {\n  return function (dispatch) {\n    dispatch(onTagFTRSuccess(response));\n    dispatch(diplayFTRDialogHandler(response, source));\n\n    if (response && response.interactionId) {\n      dispatch(duplicateFTRHandler(source, multipleDynamicTaggingKey));\n    }\n  };\n};\nexport var duplicateFTRHandler = function duplicateFTRHandler(source, multipleDynamicTaggingKey) {\n  return function (dispatch) {\n    switch (source) {\n      case DisabledTaggingStatus.SCENARIO_FTR_TAGGING:\n        dispatch(disabledScenarioFTRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.SUB_HEADER_OUTSTANDING_FTR_TAGGING:\n        dispatch(disabledSubHeaderOutstandingFTRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.BILL_COMPARATOR_FTR_TAGGING:\n        dispatch(disabledBillComoparatorFTRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.PLAN_USAGE_FTR_TAGGING:\n        dispatch(disabledPlanUsageCardFTRTagging(true));\n        break;\n\n      case DisabledTaggingStatus.MULTIPLE_DYNAMIC_TAGGING:\n        dispatch(disabledMultipleDynamicFTRTagging(true, multipleDynamicTaggingKey));\n        break;\n\n      default:\n        break;\n    }\n  };\n};\nexport var diplayFTRDialogHandler = function diplayFTRDialogHandler(response, source) {\n  return function (dispatch) {\n    switch (source) {\n      case DisabledTaggingStatus.PREDICTION_FTR_TAGGING:\n        dispatch(predictionFTRResponseHandler(response));\n        break;\n\n      default:\n        dispatch(diaplayFTRMessageDialog());\n        break;\n    }\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/ftr.action.js"],"names":["FTRActionType","FTRService","showLoader","hideLoader","openSnackbarRequest","AppConstant","diaplayFTRMessageDialog","disabledFtrTagging","disabledScenarioFTRTagging","disabledSubHeaderOutstandingFTRTagging","disabledBillComoparatorFTRTagging","disabledPlanUsageCardFTRTagging","disabledMultipleDynamicFTRTagging","openBookmarkScenario","SnackbarMessages","disabledCallTransferTagging","DisabledTaggingStatus","predictionFTRResponseHandler","snackbarMessage","tagFTRRequest","reqData","source","multipleDynamicTaggingKey","dispatch","getState","state","bookmarkOnCRMCodeClick","scenario","then","response","successMessage","getAndCheckFtrSuccessMessage","data","result","obj","interactionId","tagId","faultTrace","message","ftrResponseHandler","SCENARIO_FTR_TAGGING","error","callTransferFTRRequest","FTR_SUCCESS_MESSAGE","onCallTransferFTRSuccess","DEFAULT_ERROR_MSG","payload","type","CALL_TRANSFER_FTR_REQUEST","onTagFTRSuccess","SCENARIO_FTR_REQUEST","diplayFTRDialogHandler","duplicateFTRHandler","SUB_HEADER_OUTSTANDING_FTR_TAGGING","BILL_COMPARATOR_FTR_TAGGING","PLAN_USAGE_FTR_TAGGING","MULTIPLE_DYNAMIC_TAGGING","PREDICTION_FTR_TAGGING"],"mappings":"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","sourcesContent":["import { FTRActionType } from \"../actiontype/ftr.actiontype\";\nimport FTRService from '../services/ftr.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { AppConstant } from '../constants/app.constant';\nimport { diaplayFTRMessageDialog } from '../actions/app-dialog.action';\nimport { disabledFtrTagging, disabledScenarioFTRTagging, disabledSubHeaderOutstandingFTRTagging, disabledBillComoparatorFTRTagging, disabledPlanUsageCardFTRTagging, disabledMultipleDynamicFTRTagging } from './disabled-tagging.action';\nimport { openBookmarkScenario } from './scenario.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledCallTransferTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { predictionFTRResponseHandler } from \"./prediction.action\";\nlet snackbarMessage = {}\n\nexport const tagFTRRequest = (reqData, source, multipleDynamicTaggingKey) => (dispatch, getState) => {\n    const state = getState();\n    const bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    dispatch(showLoader());\n    FTRService.tagFTRRequest(reqData).then(\n        response => {\n            const successMessage = FTRService.getAndCheckFtrSuccessMessage(source, state);\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                const obj = {\n                    interactionId: response.data.result.tagId,\n                    successMessage: successMessage,\n                    faultTrace: response.data.result.faultTrace,\n                    message: response.data.result.message\n                }\n                dispatch(ftrResponseHandler(obj, source, multipleDynamicTaggingKey));\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n            if (bookmarkOnCRMCodeClick && (source === DisabledTaggingStatus.SCENARIO_FTR_TAGGING)) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(openSnackbarRequest(error));\n            if (bookmarkOnCRMCodeClick && (source === DisabledTaggingStatus.SCENARIO_FTR_TAGGING)) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        }\n    );\n};\n\nexport const callTransferFTRRequest = reqData => dispatch => {\n    dispatch(showLoader());\n    FTRService.callTransferFTRRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result) {\n                const obj = {\n                    interactionId: response.data.result.tagId,\n                    successMessage: AppConstant.FTR_SUCCESS_MESSAGE,\n                    faultTrace: response.data.result.faultTrace,\n                    message: response.data.result.message\n                }\n                if (response.data.result.tagId) {\n                    dispatch(disabledCallTransferTagging(true));\n                    dispatch(onCallTransferFTRSuccess(obj));\n                    dispatch(diaplayFTRMessageDialog());\n                    dispatch(disabledFtrTagging());\n                }\n                else {\n                    const message = response.data.result.message;\n                    dispatch(openSnackbarRequest(null, message));\n                }\n\n            } else {\n                dispatch(openSnackbarRequest(null));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n};\n\nfunction onCallTransferFTRSuccess(payload) {\n    return {\n        type: FTRActionType.CALL_TRANSFER_FTR_REQUEST,\n        payload\n    }\n}\n\nfunction onTagFTRSuccess(payload) {\n    return {\n        type: FTRActionType.SCENARIO_FTR_REQUEST,\n        payload\n    }\n}\n\nexport const ftrResponseHandler = (response, source, multipleDynamicTaggingKey) => dispatch => {\n    dispatch(onTagFTRSuccess(response));\n    dispatch(diplayFTRDialogHandler(response, source));\n    if (response && response.interactionId) {\n        dispatch(duplicateFTRHandler(source, multipleDynamicTaggingKey));\n    }\n}\n\nexport const duplicateFTRHandler = (source, multipleDynamicTaggingKey) => dispatch => {\n    switch (source) {\n        case DisabledTaggingStatus.SCENARIO_FTR_TAGGING:\n            dispatch(disabledScenarioFTRTagging(true));\n            break;\n        case DisabledTaggingStatus.SUB_HEADER_OUTSTANDING_FTR_TAGGING:\n            dispatch(disabledSubHeaderOutstandingFTRTagging(true));\n            break;\n        case DisabledTaggingStatus.BILL_COMPARATOR_FTR_TAGGING:\n            dispatch(disabledBillComoparatorFTRTagging(true));\n            break;\n        case DisabledTaggingStatus.PLAN_USAGE_FTR_TAGGING:\n            dispatch(disabledPlanUsageCardFTRTagging(true)); break;\n        case DisabledTaggingStatus.MULTIPLE_DYNAMIC_TAGGING:\n            dispatch(disabledMultipleDynamicFTRTagging(true, multipleDynamicTaggingKey));\n            break;\n        default:\n            break;\n    }\n};\n\nexport const diplayFTRDialogHandler = (response, source) => dispatch => {\n    switch (source) {\n        case DisabledTaggingStatus.PREDICTION_FTR_TAGGING:\n            dispatch(predictionFTRResponseHandler(response));\n            break;\n        default:\n            dispatch(diaplayFTRMessageDialog());\n            break;\n    }\n}"]},"metadata":{},"sourceType":"module"}