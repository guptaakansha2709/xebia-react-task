{"ast":null,"code":"import { FeedbackDialogActionType } from \"../actiontype/feedback-dialog.actiontype\";\nimport FeedbackDialogService from '../services/feedback-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nvar snackbarMessage = {};\nexport var submitFeedbackDialogData = function submitFeedbackDialogData(feedbackDialogObj) {\n  return function (dispatch) {\n    dispatch(feedbackApiLoading());\n    dispatch(showLoader());\n    FeedbackDialogService.fetchFeedbackApi(feedbackDialogObj).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data) {\n        dispatch(feedbackApiSuccess(response));\n\n        if (response.data.result && response.data.result.tagId) {\n          snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG + \" \" + response['data']['result']['tagId'];\n        } else {\n          snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG;\n        }\n      } else {\n        snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(feedbackApiFailure(error));\n\n      if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n        snackbarMessage = error['response']['data']['error'];\n      } else {\n        snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n      }\n\n      dispatch(openSnackbarRequest(null, snackbarMessage));\n    });\n  };\n};\nexport var updateFeedbackTypes = function updateFeedbackTypes(feedbackTypes) {\n  return function (dispatch, getState) {\n    dispatch(setFeedbackTypes(feedbackTypes));\n  };\n};\nexport var updateSelectedTab = function updateSelectedTab(selectedTab) {\n  return function (dispatch) {\n    dispatch(setSelectedTab(selectedTab));\n  };\n};\nexport var updateCheckedFields = function updateCheckedFields(checkedFieldsNumber) {\n  return function (dispatch) {\n    dispatch(setCheckedValues(checkedFieldsNumber));\n  };\n};\nexport var submitFeedbackModal = function submitFeedbackModal(feedbackTypes) {\n  return function (dispatch, getState) {\n    FeedbackDialogService.fetchFeedbackApi(feedbackTypes).then(function (response) {\n      dispatch(purgeFeedbackData());\n      dispatch(openSnackbarRequest(null, response.data.result));\n    }, function (error) {\n      dispatch(purgeFeedbackData());\n      dispatch(openSnackbarRequest(null, error.response.data.result));\n    });\n  };\n};\n\nfunction feedbackApiLoading() {\n  return {\n    type: FeedbackDialogActionType.FEEDBACK_DIALOG_REQUEST\n  };\n}\n\nfunction feedbackApiSuccess(response) {\n  return {\n    type: FeedbackDialogActionType.FEEDBACK_DIALOG_SUCCESS,\n    payload: response.data\n  };\n}\n\nfunction feedbackApiFailure(error) {\n  return {\n    type: FeedbackDialogActionType.FEEDBACK_DIALOG_FAILURE,\n    payload: error\n  };\n}\n\nfunction setFeedbackTypes(data) {\n  return {\n    type: FeedbackDialogActionType.SET_FEEDBACK_TYPES_DATA,\n    payload: data\n  };\n}\n\nfunction setCheckedValues(data) {\n  return {\n    type: FeedbackDialogActionType.SET_CHECKED_VALUES_DATA,\n    payload: data\n  };\n}\n\nfunction setSelectedTab(data) {\n  return {\n    type: FeedbackDialogActionType.SET_SELECTED_TAB_DATA,\n    payload: data\n  };\n}\n\nfunction purgeFeedbackData() {\n  return {\n    type: FeedbackDialogActionType.PURGE_FEEDBACK_DATA\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/feedback-dialog.action.js"],"names":["FeedbackDialogActionType","FeedbackDialogService","openSnackbarRequest","showLoader","hideLoader","SnackbarMessages","snackbarMessage","submitFeedbackDialogData","feedbackDialogObj","dispatch","feedbackApiLoading","fetchFeedbackApi","then","response","data","feedbackApiSuccess","result","tagId","FEEDBACK_SUCCESS_MSG","error","feedbackApiFailure","DEFAULT_ERROR_MSG","updateFeedbackTypes","feedbackTypes","getState","setFeedbackTypes","updateSelectedTab","selectedTab","setSelectedTab","updateCheckedFields","checkedFieldsNumber","setCheckedValues","submitFeedbackModal","purgeFeedbackData","type","FEEDBACK_DIALOG_REQUEST","FEEDBACK_DIALOG_SUCCESS","payload","FEEDBACK_DIALOG_FAILURE","SET_FEEDBACK_TYPES_DATA","SET_CHECKED_VALUES_DATA","SET_SELECTED_TAB_DATA","PURGE_FEEDBACK_DATA"],"mappings":"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","sourcesContent":["import { FeedbackDialogActionType } from \"../actiontype/feedback-dialog.actiontype\";\nimport FeedbackDialogService from '../services/feedback-dialog.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\n\nlet snackbarMessage = {}\nexport const submitFeedbackDialogData = feedbackDialogObj => dispatch => {\n    dispatch(feedbackApiLoading());\n    dispatch(showLoader());\n    FeedbackDialogService.fetchFeedbackApi(feedbackDialogObj).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data) {\n                dispatch(feedbackApiSuccess(response));\n                if (response.data.result && response.data.result.tagId) {\n                    snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG + \" \" + response['data']['result']['tagId'];\n                }\n                else {\n                    snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG\n                }\n            }\n            else {\n                snackbarMessage = SnackbarMessages.FEEDBACK_SUCCESS_MSG\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(feedbackApiFailure(error));\n            if (error['response'] && error['response']['data'] && error['response']['data']['error']) {\n                snackbarMessage = error['response']['data']['error'];\n            }\n            else {\n                snackbarMessage = SnackbarMessages.DEFAULT_ERROR_MSG;\n            }\n            dispatch(openSnackbarRequest(null, snackbarMessage));\n        }\n    );\n}\n\nexport const updateFeedbackTypes = (feedbackTypes) => (dispatch, getState) => {\n    dispatch(setFeedbackTypes(feedbackTypes));\n}\n\nexport const updateSelectedTab = (selectedTab) => dispatch => {\n    dispatch(setSelectedTab(selectedTab));\n}\n\nexport const updateCheckedFields = (checkedFieldsNumber) => dispatch => {\n    dispatch(setCheckedValues(checkedFieldsNumber));\n}\n\nexport const submitFeedbackModal = (feedbackTypes) => (dispatch, getState) => {\n    FeedbackDialogService.fetchFeedbackApi(feedbackTypes).then(\n        response => {\n            dispatch(purgeFeedbackData());\n            dispatch(openSnackbarRequest(null, response.data.result));\n        }, error => {\n            dispatch(purgeFeedbackData());\n            dispatch(openSnackbarRequest(null, error.response.data.result));\n        }\n    )\n    \n    \n}\n\nfunction feedbackApiLoading() { return { type: FeedbackDialogActionType.FEEDBACK_DIALOG_REQUEST } }\nfunction feedbackApiSuccess(response) { return { type: FeedbackDialogActionType.FEEDBACK_DIALOG_SUCCESS, payload: response.data } }\nfunction feedbackApiFailure(error) { return { type: FeedbackDialogActionType.FEEDBACK_DIALOG_FAILURE, payload: error } }\nfunction setFeedbackTypes(data) { return { type: FeedbackDialogActionType.SET_FEEDBACK_TYPES_DATA, payload: data} }\nfunction setCheckedValues(data) { return { type: FeedbackDialogActionType.SET_CHECKED_VALUES_DATA, payload: data} }\nfunction setSelectedTab(data) { return { type: FeedbackDialogActionType.SET_SELECTED_TAB_DATA, payload: data} }\nfunction purgeFeedbackData() { return {type: FeedbackDialogActionType.PURGE_FEEDBACK_DATA} }"]},"metadata":{},"sourceType":"module"}