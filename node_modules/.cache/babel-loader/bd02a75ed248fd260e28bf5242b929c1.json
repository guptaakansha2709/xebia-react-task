{"ast":null,"code":"import { DFFActionType } from \"../actiontype/dff.actiontype\";\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport DFFService from '../services/fetch-dff.service';\nimport { openDFFDialogRequest, openClaimDFFDialogRequest } from '../actions/app-dialog.action';\nimport { scenarioSRRequest, insuranceClaimRequest } from './sr.action';\nimport { closeAppDialogRequest } from '../actions/app-dialog.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport { updatePredictionDFFResponse } from \"./prediction.action\";\nimport { DFFConstant } from \"../constants/dff.constant\";\nimport ScenarioService from \"../services/scenario.service\";\nimport { openBookmarkScenario } from './scenario.action';\nexport var fetchDFFRequest = function fetchDFFRequest(reqData, notes, source) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var dffObj = {\n      dffInfo: [],\n      dffNameValuePairs: {}\n    };\n    dispatch(showLoader());\n    dispatch(updateDFFSource(source));\n    DFFService.fetchDFFRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result && response.data.result.length) {\n        dffObj.dffInfo = response.data.result;\n        dffObj.dffNameValuePairs = DFFService.getDFFNameValuePairs(dffObj.dffInfo);\n        dispatch(updateScenarioDFFInfo(dffObj));\n        dispatch(updateDFFNotes(notes));\n        dispatch(diplayDFFDialogHandler(dffObj, source));\n      } else {\n        dispatch(updateScenarioDFFInfo(dffObj));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DFF_NOT_FOUND));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(updateScenarioDFFInfo(dffObj));\n      dispatch(openSnackbarRequest(error));\n    });\n  };\n};\nexport var fetchClaimDFFRequest = function fetchClaimDFFRequest(reqData, notes, source) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    var dffObj = {\n      claimDFFInfo: [],\n      claimDFFNameValuePairs: {}\n    };\n    dispatch(showLoader());\n    dispatch(updateDFFSource(source));\n    DFFService.fetchClaimDFFRequest(reqData).then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data && response.data.result && response.data.result.length) {\n        dffObj.claimDFFInfo = DFFService.manageClaimDFFinfo(response.data.result);\n        dffObj.claimDFFNameValuePairs = DFFService.getClaimDFFNameValuePairs(dffObj.claimDFFInfo);\n        dispatch(updateScenarioClaimDFFInfo(dffObj));\n        dispatch(updateDFFNotes(notes));\n        dispatch(diplayDFFDialogHandler(dffObj, source));\n      } else {\n        dispatch(updateScenarioClaimDFFInfo(dffObj));\n        dispatch(openSnackbarRequest(null, SnackbarMessages.DFF_NOT_FOUND));\n      }\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(updateScenarioClaimDFFInfo(dffObj));\n      dispatch(openSnackbarRequest(error));\n\n      if (bookmarkOnCRMCodeClick) {\n        dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n      }\n    });\n  };\n};\nexport var updateScenarioDFFInfo = function updateScenarioDFFInfo(value) {\n  return {\n    type: DFFActionType.UPDATE_SCENARIO_DFF_INFO,\n    payload: value\n  };\n};\nexport var updateScenarioClaimDFFInfo = function updateScenarioClaimDFFInfo(value) {\n  return {\n    type: DFFActionType.UPDATE_SCENARIO_CLAIM_DFF_INFO,\n    payload: value\n  };\n};\nexport var updateDFFNameValuePairs = function updateDFFNameValuePairs(data) {\n  return {\n    type: DFFActionType.UPDATE_SCENARIO_DFF_FIELD_VALUES,\n    payload: data\n  };\n};\nexport var updateClaimDFFNameValuePairs = function updateClaimDFFNameValuePairs(data) {\n  return {\n    type: DFFActionType.UPDATE_SCENARIO_CLAIM_DFF_FIELD_VALUES,\n    payload: data\n  };\n};\nexport var updateDFFNotes = function updateDFFNotes(data) {\n  return {\n    type: DFFActionType.UPDATE_DFF_NOTES,\n    payload: data\n  };\n};\nexport var updateDFFSource = function updateDFFSource(value) {\n  return {\n    type: DFFActionType.UPDATE_DFF_SOURCE,\n    payload: value\n  };\n};\nexport var dffSubmitRequest = function dffSubmitRequest(source) {\n  return function (dispatch, getState) {\n    dispatch(autoFillDFFHandler());\n    dispatch(closeAppDialogRequest());\n    var state = getState();\n    var reqData = {};\n    var dffNameValuePairs = DFFService.manageDFFValues(state.dff.dffNameValuePairs);\n\n    if (source === \"prediction\") {\n      var predictionTagScenario = state.prediction.predictionTagScenario || {};\n      reqData = {\n        'tagging': predictionTagScenario.crmCode,\n        'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n        'scenarioName': predictionTagScenario.additionalInfo.scenario_name,\n        'transactionId': predictionTagScenario.transactionId,\n        'dffNameValuePairs': dffNameValuePairs,\n        'locationSMS': predictionTagScenario.locationSMS || \"\",\n        'smsTemplate': predictionTagScenario.smsTemplate || \"\"\n      };\n    } else if (state && state.multipleTaggingInfo && state.multipleTaggingInfo.multipleTaggingSrDataObj && state.multipleTaggingInfo.multipleTaggingObject && state.multipleTaggingInfo.multipleTaggingObject.length > 0) {\n      reqData = {\n        'tagging': state.multipleTaggingInfo.multipleTaggingSrDataObj.notes,\n        'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n        // 'notes': state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey,\n        'scenarioName': null,\n        'transactionId': state.scenario.scenarioStatus.transactionId,\n        'dffNameValuePairs': dffNameValuePairs,\n        'locationSMS': null,\n        'smsTemplate': null\n      };\n    } else {\n      reqData = {\n        'tagging': state.scenario.crmCode,\n        'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n        'scenarioName': state.scenario.currentScenarioInfo.name,\n        'transactionId': state.scenario.scenarioStatus.transactionId,\n        'dffNameValuePairs': dffNameValuePairs,\n        'locationSMS': state.scenario.locationSMS,\n        'smsTemplate': state.scenario.smsTemplate\n      };\n    }\n\n    dispatch(scenarioSRRequest(reqData));\n  };\n};\nexport var claimDFFSubmitRequest = function claimDFFSubmitRequest() {\n  return function (dispatch, getState) {\n    dispatch(closeAppDialogRequest());\n    var state = getState();\n    var reqData = {\n      'tagging': state.scenario.crmCode,\n      'scenarioName': state.scenario.currentScenarioInfo.name,\n      'transactionId': state.scenario.scenarioStatus.transactionId,\n      'locationSMS': state.scenario.locationSMS,\n      'smsTemplate': state.scenario.smsTemplate,\n      formData: state.dff.claimDFFNameValuePairs\n    };\n    dispatch(insuranceClaimRequest(reqData));\n  };\n};\nexport var diplayDFFDialogHandler = function diplayDFFDialogHandler(dffObj, source) {\n  return function (dispatch) {\n    switch (source) {\n      case DisabledTaggingStatus.PREDICTION_SR_TAGGING:\n        dispatch(updatePredictionDFFResponse(dffObj));\n        break;\n\n      case DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_TAGGING:\n        dispatch(openClaimDFFDialogRequest());\n        break;\n\n      default:\n        dispatch(openDFFDialogRequest());\n        break;\n    }\n  };\n};\nexport var autoFillDFFHandler = function autoFillDFFHandler() {\n  return function (dispatch, getState) {\n    var state = getState();\n    var dffInfo = state.dff.dffInfo;\n\n    for (var i = 0; i < dffInfo.length; i++) {\n      if (dffInfo[i].name && dffInfo[i].name.toUpperCase() === DFFConstant.CAPTURE_LOCATION_FIELD) {\n        dispatch(updateDFFCaptureLocation(dffInfo[i].name));\n      } else if (dffInfo[i].name && dffInfo[i].name.toUpperCase() === DFFConstant.CUSTOMER_LAT_LONG_FIELD) {\n        dispatch(updateCustomerLatLong(dffInfo[i].name));\n      }\n    }\n  };\n};\nexport var updateDFFCaptureLocation = function updateDFFCaptureLocation(name) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var leapCaptureLoaction = state.leap.leapCaptureLoaction;\n    var value = \"\";\n\n    if (leapCaptureLoaction) {\n      value = 'Cell_id: \"' + (leapCaptureLoaction[\"cellId\"] || \"NA\") + '\" | Site_name: \"' + (leapCaptureLoaction[\"address\"] || \"NA\") + '\" | site_id: \"' + (leapCaptureLoaction[\"siteId\"] || \"NA\") + '\" | network: \"' + (leapCaptureLoaction[\"network\"] || \"NA\") + '\" | site_long: \"' + (leapCaptureLoaction[\"longitude\"] || \"NA\") + '\" |  site_lat: \"' + (leapCaptureLoaction[\"lattitde\"] || \"NA\") + '\"';\n    } else {\n      value = 'Cid>NA;Lid>NA;Lat>NA;Lon>NA;Az>NA;D&T>NA;Add>NA';\n    }\n\n    dispatch(updateDFFNameValuePairs({\n      id: name,\n      value: value\n    }));\n  };\n};\nexport var updateCustomerLatLong = function updateCustomerLatLong(name) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var leapLatLong = state.leap.leapLatLong;\n    dispatch(updateDFFNameValuePairs({\n      id: name,\n      value: leapLatLong\n    }));\n  };\n};","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/dff.action.js"],"names":["DFFActionType","showLoader","hideLoader","openSnackbarRequest","SnackbarMessages","DFFService","openDFFDialogRequest","openClaimDFFDialogRequest","scenarioSRRequest","insuranceClaimRequest","closeAppDialogRequest","DisabledTaggingStatus","updatePredictionDFFResponse","DFFConstant","ScenarioService","openBookmarkScenario","fetchDFFRequest","reqData","notes","source","dispatch","getState","state","dffObj","dffInfo","dffNameValuePairs","updateDFFSource","then","response","data","result","length","getDFFNameValuePairs","updateScenarioDFFInfo","updateDFFNotes","diplayDFFDialogHandler","DFF_NOT_FOUND","error","fetchClaimDFFRequest","bookmarkOnCRMCodeClick","scenario","claimDFFInfo","claimDFFNameValuePairs","manageClaimDFFinfo","getClaimDFFNameValuePairs","updateScenarioClaimDFFInfo","value","type","UPDATE_SCENARIO_DFF_INFO","payload","UPDATE_SCENARIO_CLAIM_DFF_INFO","updateDFFNameValuePairs","UPDATE_SCENARIO_DFF_FIELD_VALUES","updateClaimDFFNameValuePairs","UPDATE_SCENARIO_CLAIM_DFF_FIELD_VALUES","UPDATE_DFF_NOTES","UPDATE_DFF_SOURCE","dffSubmitRequest","autoFillDFFHandler","manageDFFValues","dff","predictionTagScenario","prediction","crmCode","getNotesAsPerCharacterConstraint","dffNotes","additionalInfo","scenario_name","transactionId","locationSMS","smsTemplate","multipleTaggingInfo","multipleTaggingSrDataObj","multipleTaggingObject","scenarioStatus","currentScenarioInfo","name","claimDFFSubmitRequest","formData","PREDICTION_SR_TAGGING","SCENARIO_INSURANCE_CLAIM_TAGGING","i","toUpperCase","CAPTURE_LOCATION_FIELD","updateDFFCaptureLocation","CUSTOMER_LAT_LONG_FIELD","updateCustomerLatLong","leapCaptureLoaction","leap","id","leapLatLong"],"mappings":"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","sourcesContent":["import {\n    DFFActionType\n} from \"../actiontype/dff.actiontype\";\nimport {\n    showLoader,\n    hideLoader\n} from '../actions/app.action';\nimport {\n    openSnackbarRequest\n} from '../actions/snackbar.action';\nimport {\n    SnackbarMessages\n} from '../constants/snackbar-messages';\nimport DFFService from '../services/fetch-dff.service';\nimport {\n    openDFFDialogRequest,\n    openClaimDFFDialogRequest\n} from '../actions/app-dialog.action';\nimport {\n    scenarioSRRequest,\n    insuranceClaimRequest\n} from './sr.action';\nimport {\n    closeAppDialogRequest\n} from '../actions/app-dialog.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nimport {\n    updatePredictionDFFResponse\n} from \"./prediction.action\";\nimport {\n    DFFConstant\n} from \"../constants/dff.constant\";\nimport ScenarioService from \"../services/scenario.service\";\nimport { openBookmarkScenario } from './scenario.action';\n\n\n\nexport const fetchDFFRequest = (reqData, notes, source) => (dispatch, getState) => {\n    const state = getState();\n    const dffObj = {\n        dffInfo: [],\n        dffNameValuePairs: {}\n    }\n    dispatch(showLoader());\n    dispatch(updateDFFSource(source));\n    DFFService.fetchDFFRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result && response.data.result.length) {\n                dffObj.dffInfo = response.data.result;\n                dffObj.dffNameValuePairs = DFFService.getDFFNameValuePairs(dffObj.dffInfo);\n                dispatch(updateScenarioDFFInfo(dffObj));\n                dispatch(updateDFFNotes(notes));\n                dispatch(diplayDFFDialogHandler(dffObj, source));\n            } else {\n                dispatch(updateScenarioDFFInfo(dffObj));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.DFF_NOT_FOUND));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(updateScenarioDFFInfo(dffObj));\n            dispatch(openSnackbarRequest(error));\n        }\n    )\n}\n\nexport const fetchClaimDFFRequest = (reqData, notes, source) => (dispatch, getState) => {\n    const state = getState();\n    const bookmarkOnCRMCodeClick = state.scenario.bookmarkOnCRMCodeClick;\n    const dffObj = {\n        claimDFFInfo: [],\n        claimDFFNameValuePairs: {}\n    }\n    dispatch(showLoader());\n    dispatch(updateDFFSource(source));\n    DFFService.fetchClaimDFFRequest(reqData).then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data && response.data.result && response.data.result.length) {\n                dffObj.claimDFFInfo = DFFService.manageClaimDFFinfo(response.data.result);\n                dffObj.claimDFFNameValuePairs = DFFService.getClaimDFFNameValuePairs(dffObj.claimDFFInfo);\n                dispatch(updateScenarioClaimDFFInfo(dffObj));\n                dispatch(updateDFFNotes(notes));\n                dispatch(diplayDFFDialogHandler(dffObj, source));\n            } else {\n                dispatch(updateScenarioClaimDFFInfo(dffObj));\n                dispatch(openSnackbarRequest(null, SnackbarMessages.DFF_NOT_FOUND));\n            }\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(updateScenarioClaimDFFInfo(dffObj));\n            dispatch(openSnackbarRequest(error));\n            if (bookmarkOnCRMCodeClick) {\n                dispatch(openBookmarkScenario(bookmarkOnCRMCodeClick));\n            }\n        }\n    )\n}\n\n\nexport const updateScenarioDFFInfo = value => ({\n    type: DFFActionType.UPDATE_SCENARIO_DFF_INFO,\n    payload: value\n});\n\nexport const updateScenarioClaimDFFInfo = value => ({\n    type: DFFActionType.UPDATE_SCENARIO_CLAIM_DFF_INFO,\n    payload: value\n});\n\nexport const updateDFFNameValuePairs = data => ({\n    type: DFFActionType.UPDATE_SCENARIO_DFF_FIELD_VALUES,\n    payload: data\n});\n\nexport const updateClaimDFFNameValuePairs = data => ({\n    type: DFFActionType.UPDATE_SCENARIO_CLAIM_DFF_FIELD_VALUES,\n    payload: data\n});\n\nexport const updateDFFNotes = data => ({\n    type: DFFActionType.UPDATE_DFF_NOTES,\n    payload: data\n});\n\nexport const updateDFFSource = value => ({\n    type: DFFActionType.UPDATE_DFF_SOURCE,\n    payload: value\n});\n\nexport const dffSubmitRequest = source => (dispatch, getState) => {\n    dispatch(autoFillDFFHandler());\n    dispatch(closeAppDialogRequest());\n    const state = getState();\n    let reqData = {};\n    const dffNameValuePairs = DFFService.manageDFFValues(state.dff.dffNameValuePairs);\n    if (source === \"prediction\") {\n        const predictionTagScenario = state.prediction.predictionTagScenario || {};\n        reqData = {\n            'tagging': predictionTagScenario.crmCode,\n            'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n            'scenarioName': predictionTagScenario.additionalInfo.scenario_name,\n            'transactionId': predictionTagScenario.transactionId,\n            'dffNameValuePairs': dffNameValuePairs,\n            'locationSMS': predictionTagScenario.locationSMS || \"\",\n            'smsTemplate': predictionTagScenario.smsTemplate || \"\",\n        };\n\n    }\n    else if (state && state.multipleTaggingInfo && state.multipleTaggingInfo.multipleTaggingSrDataObj && state.multipleTaggingInfo.multipleTaggingObject && state.multipleTaggingInfo.multipleTaggingObject.length > 0) {\n        reqData = {\n            'tagging': state.multipleTaggingInfo.multipleTaggingSrDataObj.notes,\n            'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n            // 'notes': state.multipleTaggingInfo.multipleTaggingSrDataObj.multipleDynamicTaggingKey,\n            'scenarioName': null,\n            'transactionId': state.scenario.scenarioStatus.transactionId,\n            'dffNameValuePairs': dffNameValuePairs,\n            'locationSMS': null,\n            'smsTemplate': null,\n        };\n    }\n    else {\n        reqData = {\n            'tagging': state.scenario.crmCode,\n            'notes': ScenarioService.getNotesAsPerCharacterConstraint(state.dff.dffNotes),\n            'scenarioName': state.scenario.currentScenarioInfo.name,\n            'transactionId': state.scenario.scenarioStatus.transactionId,\n            'dffNameValuePairs': dffNameValuePairs,\n            'locationSMS': state.scenario.locationSMS,\n            'smsTemplate': state.scenario.smsTemplate,\n        };\n    }\n    dispatch(scenarioSRRequest(reqData));\n}\n\nexport const claimDFFSubmitRequest = () => (dispatch, getState) => {\n    dispatch(closeAppDialogRequest());\n    const state = getState();\n    const reqData = {\n        'tagging': state.scenario.crmCode,\n        'scenarioName': state.scenario.currentScenarioInfo.name,\n        'transactionId': state.scenario.scenarioStatus.transactionId,\n        'locationSMS': state.scenario.locationSMS,\n        'smsTemplate': state.scenario.smsTemplate,\n        formData: state.dff.claimDFFNameValuePairs\n    };\n    dispatch(insuranceClaimRequest(reqData));\n}\n\nexport const diplayDFFDialogHandler = (dffObj, source) => dispatch => {\n    switch (source) {\n        case DisabledTaggingStatus.PREDICTION_SR_TAGGING:\n            dispatch(updatePredictionDFFResponse(dffObj));\n            break;\n        case DisabledTaggingStatus.SCENARIO_INSURANCE_CLAIM_TAGGING:\n            dispatch(openClaimDFFDialogRequest());\n            break;\n        default:\n            dispatch(openDFFDialogRequest());\n            break;\n    }\n}\n\nexport const autoFillDFFHandler = () => (dispatch, getState) => {\n    const state = getState();\n    const dffInfo = state.dff.dffInfo;\n    for (let i = 0; i < dffInfo.length; i++) {\n        if (dffInfo[i].name && dffInfo[i].name.toUpperCase() === DFFConstant.CAPTURE_LOCATION_FIELD) {\n            dispatch(updateDFFCaptureLocation(dffInfo[i].name));\n        } else if (dffInfo[i].name && dffInfo[i].name.toUpperCase() === DFFConstant.CUSTOMER_LAT_LONG_FIELD) {\n            dispatch(updateCustomerLatLong(dffInfo[i].name));\n        }\n    }\n}\n\nexport const updateDFFCaptureLocation = (name) => (dispatch, getState) => {\n    const state = getState();\n    const leapCaptureLoaction = state.leap.leapCaptureLoaction;\n    let value = \"\";\n    if (leapCaptureLoaction) {\n        value = 'Cell_id: \"' + (leapCaptureLoaction[\"cellId\"] || \"NA\") + '\" | Site_name: \"' + (leapCaptureLoaction[\"address\"] || \"NA\") + '\" | site_id: \"' + (leapCaptureLoaction[\"siteId\"] || \"NA\") + '\" | network: \"' + (leapCaptureLoaction[\"network\"] || \"NA\") + '\" | site_long: \"' + (leapCaptureLoaction[\"longitude\"] || \"NA\") + '\" |  site_lat: \"' + (leapCaptureLoaction[\"lattitde\"] || \"NA\") + '\"';\n    } else {\n        value = 'Cid>NA;Lid>NA;Lat>NA;Lon>NA;Az>NA;D&T>NA;Add>NA';\n    }\n    dispatch(updateDFFNameValuePairs({\n        id: name,\n        value: value\n    }));\n}\n\nexport const updateCustomerLatLong = (name) => (dispatch, getState) => {\n    const state = getState();\n    const leapLatLong = state.leap.leapLatLong;\n    dispatch(updateDFFNameValuePairs({\n        id: name,\n        value: leapLatLong\n    }));\n}"]},"metadata":{},"sourceType":"module"}