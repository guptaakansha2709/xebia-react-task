{"ast":null,"code":"import { CustomerInfoActionType } from \"../actiontype/customer-info.actiontype\";\nimport CustomerInfoService from '../services/customer-info.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\nimport { resetState } from '../actions/common.action';\nimport { autoSetAccountNumber, onLSINumberChange, autoLSINumberChange } from '../actions/update-customer-data.actions';\nimport SRDetailsTabService from '../services/sr-details-tab.service';\nimport AnalyticsService from '../services/analytics-service';\nexport function setCustomerAccountNumber(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_NUMBER,\n    payload: payload\n  };\n}\nexport function setCustomerSRNumber(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_SR_NUMBER,\n    payload: payload\n  };\n}\nexport function setCustomerLSINumber(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_LSI_NUMBER,\n    payload: payload\n  };\n}\nexport function setCurrentLSIDetails(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CURRENT_LSI_DETAILS,\n    payload: payload\n  };\n}\nexport function setCustomerLSINumberInput(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_LSI_NUMBER_FIELD_VALUE,\n    payload: payload\n  };\n}\nexport function setCustomerSRNumberInput(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_SR_NUMBER_FIELD_VALUE,\n    payload: payload\n  };\n}\nexport function setCustomerAccountNumberInput(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_NUMBER_FIELD_VALUE,\n    payload: payload\n  };\n}\nexport function resetCurrentLSIDetails() {\n  return {\n    type: CustomerInfoActionType.RESET_CURRENT_LSI_DETAILS\n  };\n}\nexport function showCardLoader() {\n  return {\n    type: CustomerInfoActionType.SHOW_CARD_LOADER,\n    payload: true\n  };\n}\nexport function hideCardLoader() {\n  return {\n    type: CustomerInfoActionType.HIDE_CARD_LOADER,\n    payload: false\n  };\n}\nexport function setCustomerAccountDetails(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_DETAILS,\n    payload: payload\n  };\n}\nexport var fetchCustomerLSIDetails = function fetchCustomerLSIDetails(accountNumber, requestFromAccountNumberInput) {\n  return function (dispatch, getState) {\n    var state = getState();\n    var currentLsiNumber = state.customerInfo.customerLSINumber;\n    return new Promise(function (resolve, reject) {\n      var reqData = {\n        accountNumber: accountNumber\n      };\n\n      if (accountNumber) {\n        dispatch(showCardLoader());\n        if (requestFromAccountNumberInput) dispatch(showLoader());\n        CookieManagerService.setItem(AppConstant.ACCOUNT_NUMBER, accountNumber);\n        CustomerInfoService.fetchCustomerLSIDetailsFromAccountNumber(reqData).then(function (response) {\n          dispatch(hideCardLoader());\n          if (requestFromAccountNumberInput) dispatch(hideLoader());\n\n          if (response && response.data) {\n            if (response.data.result && response.data.result.lsiDetails) {\n              dispatch(setCustmerInfo(response.data.result.lsiDetails));\n              resolve();\n            } else {\n              dispatch(setCustmerInfo(null));\n              dispatch(openSnackbarRequest(null, SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND));\n            }\n          } else {\n            dispatch(setCustmerInfo(null));\n            dispatch(openSnackbarRequest(null, SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND));\n          } // throw new Error(\"error error\")\n\n        }, function (error) {\n          dispatch(hideCardLoader());\n          if (requestFromAccountNumberInput) dispatch(hideLoader());\n          dispatch(setCustmerInfo(null));\n          dispatch(openSnackbarRequest(error));\n          reject(error);\n        });\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_ACCOUNT_NUMBER));\n      }\n    });\n  };\n};\nexport var fetchCustomerAccountDetails = function fetchCustomerAccountDetails(lsiNumber) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var reqData = {\n        lsiNumber: lsiNumber\n      };\n\n      if (lsiNumber) {\n        dispatch(showLoader());\n        CookieManagerService.setItem(AppConstant.TRANSACTION_ID, Math.floor(Math.random() * 100000000));\n        CookieManagerService.setItem(AppConstant.LSI_NUMBER, lsiNumber);\n        CustomerInfoService.fetchCustomerAccountDetailsFromOptimus(reqData).then(function (response) {\n          dispatch(hideLoader());\n\n          if (response && response.data) {\n            if (response.data.result) {\n              if (response.data.result.ecrm_nba) dispatch(autoSetAccountNumber(response.data.result.ecrm_nba));else {\n                var snackbarMessage = SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND_OPTIMUS + \" :: LSI: \" + lsiNumber;\n                dispatch(openSnackbarRequest(null, snackbarMessage));\n              }\n              dispatch(setCustomerAccountDetails(response.data.result));\n            } else {\n              // dispatch();\n              dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n            }\n          } else {\n            // dispatch();\n            dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n          }\n        }, function (error) {\n          // dispatch(fetchCustomerAccountDetailsFromCRM(lsiNumber))\n          dispatch(hideLoader());\n\n          if (error && error.response && error.response.data && error.response.data.result) {\n            dispatch(openSnackbarRequest(error, error.response.data.result));\n          }\n        });\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_LSI_NUMBER));\n      }\n    });\n  };\n};\nexport var fetchCustomerAccountDetailsFromCRM = function fetchCustomerAccountDetailsFromCRM(lsiNumber) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var reqData = {\n        lsiNumber: lsiNumber\n      };\n\n      if (lsiNumber) {\n        SRDetailsTabService.fetchSRDetailsTabApi().then(function (response) {\n          dispatch(hideLoader());\n\n          if (response && response.data) {// if (response.data.result) {\n            //     if(response.data.result.ecrm_nba)\n            //         dispatch(autoSetAccountNumber(response.data.result.ecrm_nba));\n            //     else {\n            //         let snackbarMessage = SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND_OPTIMUS + \" :: LSI: \" + lsiNumber\n            //         dispatch(openSnackbarRequest(null, snackbarMessage));\n            //     }\n            //     dispatch(setCustomerAccountDetails(response.data.result));\n            // } else {\n            //     dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n            // }\n          } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n          }\n        }, function (error) {\n          dispatch(hideLoader());\n\n          if (error && error.response && error.response.data && error.response.data.result) {\n            dispatch(openSnackbarRequest(error, error.response.data.result));\n          }\n        });\n        dispatch(showLoader());\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_LSI_NUMBER));\n      }\n    });\n  };\n};\nexport var fetchSRDetails = function fetchSRDetails(srNumber) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var reqData = {\n        srNumber: srNumber\n      };\n\n      if (srNumber) {\n        dispatch(showLoader());\n        CookieManagerService.setItem(AppConstant.SR_NUMBER, srNumber);\n        CustomerInfoService.fetchDetailsFromSRNumber(reqData).then(function (response) {\n          dispatch(hideLoader());\n\n          if (response && response.data) {\n            if (response.data.result && response.data.result.serviceRequestDetails && response.data.result.serviceRequestDetails.length > 0) {\n              dispatch(onLSINumberChange(response.data.result.serviceRequestDetails[0].logicalResource[0].circuitId));\n            } else {\n              dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n            }\n          } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n          }\n        }, function (error) {\n          dispatch(hideLoader());\n\n          if (error.response && error.response.status === 409) {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_SR_NUMBER));\n          } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n          }\n        });\n      } else {\n        dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_SR_NUMBER));\n      }\n    });\n  };\n};\nexport var resetCustomerInfoRequest = function resetCustomerInfoRequest() {\n  return function (dispatch) {\n    CookieManagerService.removeItem(AppConstant.MSISDN);\n    CookieManagerService.removeItem(AppConstant.CORRELATION_ID);\n    dispatch({\n      type: CustomerInfoActionType.RESET_CUSTOMER,\n      payload: false\n    });\n  };\n};\n\nfunction setCustmerInfo(payload) {\n  return {\n    type: CustomerInfoActionType.SET_CUSOMER_INFO,\n    payload: payload\n  };\n}\n\nfunction setCustmerPlanInfo(payload) {\n  return {\n    type: CustomerInfoActionType.CUSOMER_PLAN_INFO,\n    payload: payload\n  };\n}\n\nexport function setProspectFlag(payload) {\n  return {\n    type: CustomerInfoActionType.SET_PROSPECT_NUMBER_FLAG,\n    payload: payload\n  };\n}\nexport function setProspectCircle(payload) {\n  return {\n    type: CustomerInfoActionType.SET_PROSPECT_CIRCLE,\n    payload: payload\n  };\n}\nexport function enableAutoFillLSI() {\n  return {\n    type: CustomerInfoActionType.ENABLE_AUTO_FILL_LSI\n  };\n}\nexport function disableAutoFillLSI() {\n  return {\n    type: CustomerInfoActionType.DISABLE_AUTO_FILL_LSI\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/customer-info.action.js"],"names":["CustomerInfoActionType","CustomerInfoService","showLoader","hideLoader","openSnackbarRequest","SnackbarMessages","CookieManagerService","AppConstant","resetState","autoSetAccountNumber","onLSINumberChange","autoLSINumberChange","SRDetailsTabService","AnalyticsService","setCustomerAccountNumber","payload","type","SET_CUSTOMER_ACCOUNT_NUMBER","setCustomerSRNumber","SET_CUSTOMER_SR_NUMBER","setCustomerLSINumber","SET_CUSTOMER_LSI_NUMBER","setCurrentLSIDetails","SET_CURRENT_LSI_DETAILS","setCustomerLSINumberInput","SET_CUSTOMER_LSI_NUMBER_FIELD_VALUE","setCustomerSRNumberInput","SET_CUSTOMER_SR_NUMBER_FIELD_VALUE","setCustomerAccountNumberInput","SET_CUSTOMER_ACCOUNT_NUMBER_FIELD_VALUE","resetCurrentLSIDetails","RESET_CURRENT_LSI_DETAILS","showCardLoader","SHOW_CARD_LOADER","hideCardLoader","HIDE_CARD_LOADER","setCustomerAccountDetails","SET_CUSTOMER_ACCOUNT_DETAILS","fetchCustomerLSIDetails","accountNumber","requestFromAccountNumberInput","dispatch","getState","state","currentLsiNumber","customerInfo","customerLSINumber","Promise","resolve","reject","reqData","setItem","ACCOUNT_NUMBER","fetchCustomerLSIDetailsFromAccountNumber","then","response","data","result","lsiDetails","setCustmerInfo","ACCOUNT_NUMBER_NOT_FOUND","error","INVALID_ACCOUNT_NUMBER","fetchCustomerAccountDetails","lsiNumber","TRANSACTION_ID","Math","floor","random","LSI_NUMBER","fetchCustomerAccountDetailsFromOptimus","ecrm_nba","snackbarMessage","ACCOUNT_NUMBER_NOT_FOUND_OPTIMUS","CUSTOMER_NOT_FOUND_OPTIMUS","INVALID_LSI_NUMBER","fetchCustomerAccountDetailsFromCRM","fetchSRDetailsTabApi","fetchSRDetails","srNumber","SR_NUMBER","fetchDetailsFromSRNumber","serviceRequestDetails","length","logicalResource","circuitId","SR_NUMBER_NOT_FOUND","status","INVALID_SR_NUMBER","resetCustomerInfoRequest","removeItem","MSISDN","CORRELATION_ID","RESET_CUSTOMER","SET_CUSOMER_INFO","setCustmerPlanInfo","CUSOMER_PLAN_INFO","setProspectFlag","SET_PROSPECT_NUMBER_FLAG","setProspectCircle","SET_PROSPECT_CIRCLE","enableAutoFillLSI","ENABLE_AUTO_FILL_LSI","disableAutoFillLSI","DISABLE_AUTO_FILL_LSI"],"mappings":"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","sourcesContent":["import { CustomerInfoActionType } from \"../actiontype/customer-info.actiontype\";\nimport CustomerInfoService from '../services/customer-info.service';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { openSnackbarRequest } from '../actions/snackbar.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport CookieManagerService from '../services/cookie.service';\nimport { AppConstant } from '../constants/app.constant';\nimport { resetState } from '../actions/common.action';\nimport {autoSetAccountNumber, onLSINumberChange, autoLSINumberChange} from '../actions/update-customer-data.actions';\nimport SRDetailsTabService from '../services/sr-details-tab.service';\nimport AnalyticsService from '../services/analytics-service';\n\nexport function setCustomerAccountNumber(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_NUMBER, payload };\n}\n\nexport function setCustomerSRNumber(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_SR_NUMBER, payload};\n}\n\nexport function setCustomerLSINumber(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_LSI_NUMBER, payload};\n}\n\nexport function setCurrentLSIDetails(payload) {\n    return { type: CustomerInfoActionType.SET_CURRENT_LSI_DETAILS, payload};\n}\n\nexport function setCustomerLSINumberInput(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_LSI_NUMBER_FIELD_VALUE, payload};\n}\n\nexport function setCustomerSRNumberInput(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_SR_NUMBER_FIELD_VALUE, payload};\n}\n\nexport function setCustomerAccountNumberInput(payload) {\n    return { type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_NUMBER_FIELD_VALUE, payload};\n}\n\nexport function resetCurrentLSIDetails() {\n    return { type: CustomerInfoActionType.RESET_CURRENT_LSI_DETAILS};\n}\n\nexport function showCardLoader() {\n    return { type: CustomerInfoActionType.SHOW_CARD_LOADER, payload: true};\n}\n\nexport function hideCardLoader() {\n    return { type: CustomerInfoActionType.HIDE_CARD_LOADER, payload: false};\n}\n\nexport function setCustomerAccountDetails(payload) {\n    return {\n        type: CustomerInfoActionType.SET_CUSTOMER_ACCOUNT_DETAILS,\n        payload: payload\n    }\n}\n\n\nexport const fetchCustomerLSIDetails = (accountNumber, requestFromAccountNumberInput) => (dispatch, getState) => {\n\n    const state = getState();\n    const currentLsiNumber = state.customerInfo.customerLSINumber;\n\n    return new Promise((resolve, reject) => {\n        const reqData = {\n            accountNumber\n        }\n        if(accountNumber) {\n            dispatch(showCardLoader());\n            if(requestFromAccountNumberInput)\n                dispatch(showLoader());\n\n            CookieManagerService.setItem(AppConstant.ACCOUNT_NUMBER, accountNumber);\n\n            CustomerInfoService.fetchCustomerLSIDetailsFromAccountNumber(reqData).then(\n                response => {\n                    dispatch(hideCardLoader());\n                    if(requestFromAccountNumberInput)\n                        dispatch(hideLoader());\n                    if(response && response.data) {\n                        if (response.data.result && response.data.result.lsiDetails) {\n                            dispatch(setCustmerInfo(response.data.result.lsiDetails));\n                            resolve()\n                        } else {\n                            dispatch(setCustmerInfo(null));\n                            dispatch(openSnackbarRequest(null, SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND));\n                        }\n                    } else {\n                        dispatch(setCustmerInfo(null));\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND));\n                    }\n                    // throw new Error(\"error error\")\n                },\n                error => {\n                    dispatch(hideCardLoader());\n                    if(requestFromAccountNumberInput)\n                        dispatch(hideLoader());\n                    dispatch(setCustmerInfo(null));\n                    dispatch(openSnackbarRequest(error));\n                    reject(error)\n                }\n            )\n        } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_ACCOUNT_NUMBER));\n        }\n    });\n}\n\nexport const fetchCustomerAccountDetails = lsiNumber => dispatch => {\n    return new Promise((resolve, reject) => {\n        const reqData = {\n            lsiNumber\n        }\n        if (lsiNumber) {\n            dispatch(showLoader());\n            CookieManagerService.setItem(AppConstant.TRANSACTION_ID, Math.floor(Math.random() * 100000000));\n            CookieManagerService.setItem(AppConstant.LSI_NUMBER, lsiNumber);\n            CustomerInfoService.fetchCustomerAccountDetailsFromOptimus(reqData).then(\n                response => {\n                    dispatch(hideLoader());\n                    if(response && response.data) {\n                        if (response.data.result) {\n                            if(response.data.result.ecrm_nba)\n                                dispatch(autoSetAccountNumber(response.data.result.ecrm_nba));\n                            else {\n                                let snackbarMessage = SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND_OPTIMUS + \" :: LSI: \" + lsiNumber\n                                dispatch(openSnackbarRequest(null, snackbarMessage));\n                            }\n                            dispatch(setCustomerAccountDetails(response.data.result));\n                        } else {\n                            // dispatch();\n                            dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n                        }\n                    } else {\n                        // dispatch();\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS)); \n                    }\n                },\n                error => {\n                    // dispatch(fetchCustomerAccountDetailsFromCRM(lsiNumber))\n                    dispatch(hideLoader());\n                    if (error && error.response&& error.response.data && error.response.data.result) {\n                        dispatch(openSnackbarRequest(error, error.response.data.result));\n                    }\n                }\n            )\n        } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_LSI_NUMBER));\n        }\n    });\n}\n\nexport const fetchCustomerAccountDetailsFromCRM = lsiNumber => dispatch => {\n    return new Promise((resolve, reject) => {\n        const reqData = {\n            lsiNumber\n        }\n        if (lsiNumber) {\n            SRDetailsTabService.fetchSRDetailsTabApi().then(\n                response => {\n                    dispatch(hideLoader());\n                    if(response && response.data) {\n                        // if (response.data.result) {\n                        //     if(response.data.result.ecrm_nba)\n                        //         dispatch(autoSetAccountNumber(response.data.result.ecrm_nba));\n                        //     else {\n                        //         let snackbarMessage = SnackbarMessages.ACCOUNT_NUMBER_NOT_FOUND_OPTIMUS + \" :: LSI: \" + lsiNumber\n                        //         dispatch(openSnackbarRequest(null, snackbarMessage));\n                        //     }\n                        //     dispatch(setCustomerAccountDetails(response.data.result));\n                        // } else {\n                        //     dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS));\n                        // }\n                    } else {\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.CUSTOMER_NOT_FOUND_OPTIMUS)); \n                    }\n                },\n                error => {\n                    dispatch(hideLoader());\n                    if (error && error.response&& error.response.data && error.response.data.result) {\n                        dispatch(openSnackbarRequest(error, error.response.data.result));\n                    }\n                }\n            )\n            dispatch(showLoader());\n        } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_LSI_NUMBER));\n        }\n    });\n}\n\nexport const fetchSRDetails = srNumber => dispatch => {\n    return new Promise((resolve, reject) => {\n        const reqData = {\n            srNumber\n        }\n        if (srNumber) {\n            dispatch(showLoader());\n            CookieManagerService.setItem(AppConstant.SR_NUMBER, srNumber);\n            CustomerInfoService.fetchDetailsFromSRNumber(reqData).then(\n                response => {\n                    dispatch(hideLoader());\n                    if(response && response.data) {\n                        if (response.data.result && response.data.result.serviceRequestDetails && \n                            response.data.result.serviceRequestDetails.length>0) {\n                            dispatch(onLSINumberChange(response.data.result.serviceRequestDetails[0].logicalResource[0].circuitId));\n                        } else {\n                            dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n                        }\n                    } else {\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n                    }\n                },\n                error => {\n                    dispatch(hideLoader());\n                    if (error.response && error.response.status===409) {\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_SR_NUMBER));\n                    } else {\n                        dispatch(openSnackbarRequest(null, SnackbarMessages.SR_NUMBER_NOT_FOUND));\n                    }\n                }\n            )\n        } else {\n            dispatch(openSnackbarRequest(null, SnackbarMessages.INVALID_SR_NUMBER));\n        }\n    });\n}\n\nexport const resetCustomerInfoRequest = () => dispatch => {\n    CookieManagerService.removeItem(AppConstant.MSISDN);\n    CookieManagerService.removeItem(AppConstant.CORRELATION_ID);\n    dispatch({ type: CustomerInfoActionType.RESET_CUSTOMER, payload: false });\n}\n\nfunction setCustmerInfo(payload) {\n    return {\n        type: CustomerInfoActionType.SET_CUSOMER_INFO,\n        payload\n    }\n}\n\nfunction setCustmerPlanInfo(payload) {\n    return {\n        type: CustomerInfoActionType.CUSOMER_PLAN_INFO,\n        payload\n    }\n}\n\nexport function setProspectFlag(payload) {\n    return { type: CustomerInfoActionType.SET_PROSPECT_NUMBER_FLAG, payload };\n}\n\nexport function setProspectCircle(payload) {\n    return { type: CustomerInfoActionType.SET_PROSPECT_CIRCLE, payload };\n}\n\nexport function enableAutoFillLSI() {\n    return {\n        type: CustomerInfoActionType.ENABLE_AUTO_FILL_LSI\n    };\n}\n\nexport function disableAutoFillLSI() {\n    return {\n        type: CustomerInfoActionType.DISABLE_AUTO_FILL_LSI\n    };\n}"]},"metadata":{},"sourceType":"module"}