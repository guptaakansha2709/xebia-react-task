{"ast":null,"code":"import _classCallCheck from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/A1HP71DP/Documents/personal/mmt-task/task/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/task-update/task-update.smart.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './task-update.style';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { updateTaskFieldsNameValuePairs as _updateTaskFieldsNameValuePairs, taskUpdateSubmitRequest as _taskUpdateSubmitRequest, updateTaskFieldsSrNumber as _updateTaskFieldsSrNumber, updateSrFieldInfoInState as _updateSrFieldInfoInState } from '../../../actions/task-update.action';\nimport Button from '@material-ui/core/Button';\nimport FormValidatorService from '../../../services/form-validator.service';\nimport { openSnackbarRequest as _openSnackbarRequest } from '../../../actions/snackbar.action';\nimport { DFFConstant } from '../../../constants/dff.constant';\n\nvar SRTaskUpdate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SRTaskUpdate, _Component);\n\n  function SRTaskUpdate() {\n    var _this;\n\n    _classCallCheck(this, SRTaskUpdate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SRTaskUpdate).call(this));\n    _this.selectedState = \"\";\n    _this.selectedCity = \"\";\n    _this.onSubmitTaskUpdateRequest = _this.onSubmitTaskUpdateRequest.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SRTaskUpdate, [{\n    key: \"onChangeFieldValue\",\n    value: function onChangeFieldValue(event, item) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.props.updateTaskFieldsNameValuePairs({\n        id: item.columnName,\n        value: event.target.value\n      });\n    }\n  }, {\n    key: \"onChangeSrNumber\",\n    value: function onChangeSrNumber(event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.props.updateTaskFieldsSrNumber(event.target.value);\n    }\n  }, {\n    key: \"onChangeUpdateSrFieldValue\",\n    value: function onChangeUpdateSrFieldValue(event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      this.props.updateSrFieldInfoInState(event.target.value);\n    }\n  }, {\n    key: \"onSubmitTaskUpdateRequest\",\n    value: function onSubmitTaskUpdateRequest() {\n      var _this$props = this.props,\n          taskfieldsInfo = _this$props.taskfieldsInfo,\n          taskFieldsNameValuePairs = _this$props.taskFieldsNameValuePairs,\n          srDetailsCategorySpecificData = _this$props.srDetailsCategorySpecificData;\n      var _this$props2 = this.props,\n          taskFieldSrNumber = _this$props2.taskFieldSrNumber,\n          srTaskUpdateSrNumber = _this$props2.srTaskUpdateSrNumber;\n      var errMessage = FormValidatorService.validateTaskUpdateFields(taskfieldsInfo, taskFieldsNameValuePairs);\n\n      if (errMessage) {\n        this.props.openSnackbarRequest(null, errMessage);\n      } else {\n        var srNumbers = [];\n\n        if (srDetailsCategorySpecificData) {\n          if (srDetailsCategorySpecificData.srData) {\n            srDetailsCategorySpecificData.srData.forEach(function (sr) {\n              if (sr['problem_activityStatus'] && (sr['problem_activityStatus'].toLowerCase() === \"open\" || sr['problem_activityStatus'].toLowerCase() === \"re-open\") && sr['problem_problemId']) {\n                srNumbers.push(sr['problem_problemId']);\n              }\n            });\n          }\n        }\n\n        var srNumberErrMessage = srTaskUpdateSrNumber ? null : taskFieldSrNumber ? null : \"SR Number Field Cannot Be Empty\";\n\n        if (srNumberErrMessage) {\n          this.props.openSnackbarRequest(null, srNumberErrMessage);\n        } else {\n          this.props.taskUpdateSubmitRequest();\n        }\n      }\n    }\n  }, {\n    key: \"disableField\",\n    value: function disableField(item) {\n      if (item && item.autoFilled) {\n        return true;\n      } else if (item && item.name && (item.name.toUpperCase() === DFFConstant.CAPTURE_LOCATION_FIELD || item.name.toUpperCase() === DFFConstant.CUSTOMER_LAT_LONG_FIELD)) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"manageDisplayTaskUpdateTextField\",\n    value: function manageDisplayTaskUpdateTextField(item) {\n      if (item && item.dataType === 'text') {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"manageDisplayTaskUpdateComboField\",\n    value: function manageDisplayTaskUpdateComboField(item) {\n      if (item && item.dataType === 'combo') {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          classes = _this$props3.classes,\n          taskfieldsInfo = _this$props3.taskfieldsInfo,\n          taskFieldsNameValuePairs = _this$props3.taskFieldsNameValuePairs,\n          textFieldClass = _this$props3.textFieldClass,\n          scrollableAction = _this$props3.scrollableAction,\n          srTaskUpdateSrNumber = _this$props3.srTaskUpdateSrNumber,\n          srDetailsCategorySpecificData = _this$props3.srDetailsCategorySpecificData,\n          updateSrFieldInfo = _this$props3.updateSrFieldInfo,\n          updateTaskFieldsSrNumber = _this$props3.updateTaskFieldsSrNumber,\n          updateSrFieldInfoInState = _this$props3.updateSrFieldInfoInState,\n          selectedSrTaskDetails = _this$props3.selectedSrTaskDetails; // let updateSrFieldValue = this.props.updateSrFieldValue;\n      // let taskFieldSrNumber = this.props.taskFieldSrNumber;\n\n      var _this$props4 = this.props,\n          updateSrFieldValue = _this$props4.updateSrFieldValue,\n          taskFieldSrNumber = _this$props4.taskFieldSrNumber;\n      var srNumbers = [];\n\n      if (srDetailsCategorySpecificData) {\n        if (srDetailsCategorySpecificData.srData) {\n          srDetailsCategorySpecificData.srData.forEach(function (sr) {\n            if (sr['problem_activityStatus'] && (sr['problem_activityStatus'].toLowerCase() === \"open\" || sr['problem_activityStatus'].toLowerCase() === \"re-open\") && sr['problem_problemId']) {\n              srNumbers.push(sr['problem_problemId']);\n            }\n          });\n        }\n      }\n\n      if (!taskFieldSrNumber) {\n        if (srNumbers && srNumbers.length) {\n          updateTaskFieldsSrNumber(srNumbers[0]);\n        }\n      }\n\n      if (!updateSrFieldValue) {\n        if (updateSrFieldInfo.defaultValue) {\n          updateSrFieldInfoInState(updateSrFieldInfo.defaultValue);\n        }\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          return event.preventDefault();\n        },\n        className: classes.container + (scrollableAction || \"\"),\n        noValidate: true,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, !srTaskUpdateSrNumber && React.createElement(TextField, {\n        select: true,\n        id: \"srNumber\",\n        label: \"SR Number\",\n        className: textFieldClass,\n        value: taskFieldSrNumber,\n        onChange: function onChange(e) {\n          return _this2.onChangeSrNumber(e);\n        },\n        SelectProps: {\n          MenuProps: {\n            className: classes.menu\n          }\n        },\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(MenuItem, {\n        value: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"em\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Select\")), srNumbers && srNumbers.map(function (option) {\n        return React.createElement(MenuItem, {\n          key: option,\n          value: option,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, option);\n      })), taskfieldsInfo.map(function (item, index) {\n        return React.createElement(React.Fragment, {\n          key: item.columnName + '_' + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(TextField, {\n          required: item.mandatoryFlag === 'Y' ? true : false // id={item.columnName}\n          ,\n          label: item.columnName,\n          className: textFieldClass + (_this2.manageDisplayTaskUpdateTextField(item) ? '' : ' hidden '),\n          value: taskFieldsNameValuePairs[item.columnName].value ? taskFieldsNameValuePairs[item.columnName].value : \"\",\n          onChange: function onChange(e) {\n            return _this2.onChangeFieldValue(e, item);\n          },\n          margin: \"normal\",\n          disabled: _this2.disableField(item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }), React.createElement(TextField, {\n          required: item.mandatoryFlag === 'Y' ? true : false,\n          select: true // id={item.columnName}\n          ,\n          label: item.columnName,\n          className: textFieldClass + (_this2.manageDisplayTaskUpdateComboField(item) ? '' : ' hidden '),\n          value: taskFieldsNameValuePairs[item.columnName].value ? taskFieldsNameValuePairs[item.columnName].value : \"\",\n          onChange: function onChange(e) {\n            return _this2.onChangeFieldValue(e, item);\n          },\n          SelectProps: {\n            MenuProps: {\n              className: classes.menu\n            }\n          },\n          margin: \"normal\",\n          disabled: _this2.disableField(item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(MenuItem, {\n          value: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, \"Select\")), item.values && item.values.map(function (option) {\n          return React.createElement(MenuItem, {\n            key: option,\n            value: option,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }, option);\n        })));\n      }), updateSrFieldInfo && updateSrFieldInfo.columnName && React.createElement(TextField, {\n        required: updateSrFieldInfo.mandatoryFlag === 'Y' ? true : false,\n        id: updateSrFieldInfo.columnName,\n        label: updateSrFieldInfo.columnName,\n        className: textFieldClass,\n        value: updateSrFieldValue ? updateSrFieldValue : \"\",\n        onChange: function onChange(e) {\n          return _this2.onChangeUpdateSrFieldValue(e);\n        },\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: classes.btnContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"btn-primary\",\n        onClick: this.onSubmitTaskUpdateRequest,\n        variant: \"contained\",\n        size: \"medium\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return SRTaskUpdate;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    taskfieldsInfo: state.srTaskFields.taskfieldsInfo,\n    updateSrFieldInfo: state.srTaskFields.updateSrFieldInfo,\n    taskFieldsNameValuePairs: state.srTaskFields.taskFieldsNameValuePairs,\n    taskFieldSrNumber: state.srTaskFields.taskFieldSrNumber,\n    customerInfo: state.customerInfo.customerInfo,\n    srDetailsCategorySpecificData: state.SRDetailsTabApiInfo.srDetailsCategorySpecificData,\n    updateSrFieldValue: state.srTaskFields.updateSrFieldValue,\n    srTaskUpdateSrNumber: state.srTaskFields.srTaskUpdateSrNumber,\n    selectedSrTaskDetails: state.srTaskFields.selectedSrTaskDetails\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateTaskFieldsNameValuePairs: function updateTaskFieldsNameValuePairs(id, value) {\n      return dispatch(_updateTaskFieldsNameValuePairs(id, value));\n    },\n    taskUpdateSubmitRequest: function taskUpdateSubmitRequest(source) {\n      return dispatch(_taskUpdateSubmitRequest());\n    },\n    openSnackbarRequest: function openSnackbarRequest(err, msg) {\n      return dispatch(_openSnackbarRequest(err, msg));\n    },\n    updateTaskFieldsSrNumber: function updateTaskFieldsSrNumber(srNumber) {\n      return dispatch(_updateTaskFieldsSrNumber(srNumber));\n    },\n    updateSrFieldInfoInState: function updateSrFieldInfoInState(value) {\n      return dispatch(_updateSrFieldInfoInState(value));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {\n  withTheme: true\n})(SRTaskUpdate));","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/components/common/task-update/task-update.smart.js"],"names":["React","Component","connect","withStyles","styles","TextField","MenuItem","updateTaskFieldsNameValuePairs","taskUpdateSubmitRequest","updateTaskFieldsSrNumber","updateSrFieldInfoInState","Button","FormValidatorService","openSnackbarRequest","DFFConstant","SRTaskUpdate","selectedState","selectedCity","onSubmitTaskUpdateRequest","bind","event","item","preventDefault","props","id","columnName","value","target","taskfieldsInfo","taskFieldsNameValuePairs","srDetailsCategorySpecificData","taskFieldSrNumber","srTaskUpdateSrNumber","errMessage","validateTaskUpdateFields","srNumbers","srData","forEach","sr","toLowerCase","push","srNumberErrMessage","autoFilled","name","toUpperCase","CAPTURE_LOCATION_FIELD","CUSTOMER_LAT_LONG_FIELD","dataType","classes","textFieldClass","scrollableAction","updateSrFieldInfo","selectedSrTaskDetails","updateSrFieldValue","length","defaultValue","container","e","onChangeSrNumber","MenuProps","className","menu","map","option","index","mandatoryFlag","manageDisplayTaskUpdateTextField","onChangeFieldValue","disableField","manageDisplayTaskUpdateComboField","values","onChangeUpdateSrFieldValue","btnContainer","mapStateToProps","state","srTaskFields","customerInfo","SRDetailsTabApiInfo","mapDispatchToProps","dispatch","source","err","msg","srNumber","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './task-update.style';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { updateTaskFieldsNameValuePairs, taskUpdateSubmitRequest, updateTaskFieldsSrNumber, updateSrFieldInfoInState } from '../../../actions/task-update.action';\nimport Button from '@material-ui/core/Button';\nimport FormValidatorService from '../../../services/form-validator.service';\nimport { openSnackbarRequest } from '../../../actions/snackbar.action';\nimport { DFFConstant } from '../../../constants/dff.constant';\n\nclass SRTaskUpdate extends Component {\n    selectedState = \"\";\n    selectedCity = \"\";\n    constructor() {\n        super();\n        this.onSubmitTaskUpdateRequest = this.onSubmitTaskUpdateRequest.bind(this);\n    }\n\n    onChangeFieldValue(event, item) {\n        if (event) {\n            event.preventDefault();\n        }\n        this.props.updateTaskFieldsNameValuePairs({ id: item.columnName, value: event.target.value });\n    }\n\n    onChangeSrNumber(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        this.props.updateTaskFieldsSrNumber(event.target.value);\n    }\n\n    onChangeUpdateSrFieldValue(event) {\n        if (event) {\n            event.preventDefault();\n        }\n        this.props.updateSrFieldInfoInState(event.target.value);\n    }\n\n    onSubmitTaskUpdateRequest() {\n\n        const { taskfieldsInfo, taskFieldsNameValuePairs, srDetailsCategorySpecificData } = this.props;\n        let { taskFieldSrNumber, srTaskUpdateSrNumber } = this.props\n\n        const errMessage = FormValidatorService.validateTaskUpdateFields(taskfieldsInfo, taskFieldsNameValuePairs);\n        if (errMessage) {\n            this.props.openSnackbarRequest(null, errMessage);\n        } else {\n            const srNumbers = [];\n\n            if (srDetailsCategorySpecificData) {\n                if (srDetailsCategorySpecificData.srData) {\n                    srDetailsCategorySpecificData.srData.forEach(sr => {\n                        if (sr['problem_activityStatus'] && (sr['problem_activityStatus'].toLowerCase() === \"open\" || sr['problem_activityStatus'].toLowerCase() === \"re-open\")\n                            && sr['problem_problemId']) {\n                            srNumbers.push(sr['problem_problemId'])\n                        }\n                    })\n                }\n            }\n            const srNumberErrMessage = (srTaskUpdateSrNumber) ? null : (taskFieldSrNumber ? null : \"SR Number Field Cannot Be Empty\");\n            if (srNumberErrMessage) {\n                this.props.openSnackbarRequest(null, srNumberErrMessage);\n            } else {\n                this.props.taskUpdateSubmitRequest();\n            }\n        }\n\n    }\n\n    disableField(item) {\n        if (item && item.autoFilled) {\n            return true;\n        } else if (item && item.name && (item.name.toUpperCase() === DFFConstant.CAPTURE_LOCATION_FIELD || item.name.toUpperCase() === DFFConstant.CUSTOMER_LAT_LONG_FIELD)) {\n            return true;\n        }\n        return false;\n    }\n\n    manageDisplayTaskUpdateTextField(item) {\n        if (item && item.dataType === 'text') {\n            return true;\n        }\n        return false;\n    }\n\n    manageDisplayTaskUpdateComboField(item) {\n        if (item && item.dataType === 'combo') {\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        const { classes, taskfieldsInfo, taskFieldsNameValuePairs, textFieldClass, scrollableAction, srTaskUpdateSrNumber,\n            srDetailsCategorySpecificData, updateSrFieldInfo, updateTaskFieldsSrNumber, updateSrFieldInfoInState , selectedSrTaskDetails} = this.props;\n\n        // let updateSrFieldValue = this.props.updateSrFieldValue;\n        // let taskFieldSrNumber = this.props.taskFieldSrNumber;\n\n        let { updateSrFieldValue, taskFieldSrNumber } = this.props;\n        const srNumbers = [];\n\n        if (srDetailsCategorySpecificData) {\n            if (srDetailsCategorySpecificData.srData) {\n                srDetailsCategorySpecificData.srData.forEach(sr => {\n                    if( sr['problem_activityStatus'] && (sr['problem_activityStatus'].toLowerCase() === \"open\" || sr['problem_activityStatus'].toLowerCase() === \"re-open\" )\n                    && sr['problem_problemId']) {\n                        srNumbers.push(sr['problem_problemId'])\n                    }\n                })\n            }\n        }\n\n        if (!taskFieldSrNumber) {\n            if (srNumbers && srNumbers.length) {\n                updateTaskFieldsSrNumber(srNumbers[0]);\n            }\n        }\n\n        if (!updateSrFieldValue) {\n            if (updateSrFieldInfo.defaultValue) {\n                updateSrFieldInfoInState(updateSrFieldInfo.defaultValue);\n            }\n        }\n\n        return (\n            <React.Fragment>\n                <form onSubmit={event => event.preventDefault()} className={classes.container + (scrollableAction || \"\")} noValidate autoComplete=\"off\">\n                    {!srTaskUpdateSrNumber && <TextField\n                        select\n                        id=\"srNumber\"\n                        label=\"SR Number\"\n                        className={textFieldClass}\n                        value={taskFieldSrNumber}\n                        onChange={(e) => this.onChangeSrNumber(e)}\n                        SelectProps={{\n                            MenuProps: {\n                                className: classes.menu,\n                            },\n                        }}\n                        margin=\"normal\"\n                    >\n                        <MenuItem value=\"\">\n                            <em>Select</em>\n                        </MenuItem>\n                        {srNumbers && srNumbers.map(option => (\n                            <MenuItem key={option} value={option}>\n                                {option}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    }\n                    {taskfieldsInfo.map((item, index) => {\n                        return (\n                            <React.Fragment key={item.columnName + '_' + index}>\n                                <TextField\n                                    required={(item.mandatoryFlag === 'Y' ? true : false)}\n                                    // id={item.columnName}\n                                    label={item.columnName}\n                                    className={textFieldClass + (this.manageDisplayTaskUpdateTextField(item) ? '' : ' hidden ')}\n                                    value={taskFieldsNameValuePairs[item.columnName].value ? taskFieldsNameValuePairs[item.columnName].value : \"\"}\n                                    onChange={(e) => this.onChangeFieldValue(e, item)}\n                                    margin=\"normal\"\n                                    disabled={this.disableField(item)}\n                                />\n                                <TextField\n                                    required={(item.mandatoryFlag === 'Y' ? true : false)}\n                                    select\n                                    // id={item.columnName}\n                                    label={item.columnName}\n                                    className={textFieldClass + (this.manageDisplayTaskUpdateComboField(item) ? '' : ' hidden ')}\n                                    value={taskFieldsNameValuePairs[item.columnName].value ? taskFieldsNameValuePairs[item.columnName].value : \"\"}\n                                    onChange={(e) => this.onChangeFieldValue(e, item)}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            className: classes.menu,\n                                        },\n                                    }}\n                                    margin=\"normal\"\n                                    disabled={this.disableField(item)}\n                                >\n                                    <MenuItem value=\"\">\n                                        <em>Select</em>\n                                    </MenuItem>\n                                    {item.values && item.values.map(option => (\n                                        <MenuItem key={option} value={option}>\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </React.Fragment>\n                        )\n                    })}\n                    {updateSrFieldInfo && updateSrFieldInfo.columnName && <TextField\n                        required={(updateSrFieldInfo.mandatoryFlag === 'Y' ? true : false)}\n                        id={updateSrFieldInfo.columnName}\n                        label={updateSrFieldInfo.columnName}\n                        className={textFieldClass}\n                        value={updateSrFieldValue ? updateSrFieldValue : \"\"}\n                        onChange={(e) => this.onChangeUpdateSrFieldValue(e)}\n                        margin=\"normal\"\n                    />}\n                </form>\n                <div className={classes.btnContainer}>\n                    <Button className=\"btn-primary\" onClick={this.onSubmitTaskUpdateRequest} variant=\"contained\" size=\"medium\" color=\"primary\">\n                        Submit\n                    </Button>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        taskfieldsInfo: state.srTaskFields.taskfieldsInfo,\n        updateSrFieldInfo: state.srTaskFields.updateSrFieldInfo,\n        taskFieldsNameValuePairs: state.srTaskFields.taskFieldsNameValuePairs,\n        taskFieldSrNumber: state.srTaskFields.taskFieldSrNumber,\n        customerInfo: state.customerInfo.customerInfo,\n        srDetailsCategorySpecificData: state.SRDetailsTabApiInfo.srDetailsCategorySpecificData,\n        updateSrFieldValue: state.srTaskFields.updateSrFieldValue,\n        srTaskUpdateSrNumber: state.srTaskFields.srTaskUpdateSrNumber,\n        selectedSrTaskDetails: state.srTaskFields.selectedSrTaskDetails,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    updateTaskFieldsNameValuePairs: (id, value) => dispatch(updateTaskFieldsNameValuePairs(id, value)),\n    taskUpdateSubmitRequest: (source) => dispatch(taskUpdateSubmitRequest()),\n    openSnackbarRequest: (err, msg) => dispatch(openSnackbarRequest(err, msg)),\n    updateTaskFieldsSrNumber: (srNumber) => dispatch(updateTaskFieldsSrNumber(srNumber)),\n    updateSrFieldInfoInState: (value) => dispatch(updateSrFieldInfoInState(value))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, { withTheme: true })(SRTaskUpdate));"]},"metadata":{},"sourceType":"module"}