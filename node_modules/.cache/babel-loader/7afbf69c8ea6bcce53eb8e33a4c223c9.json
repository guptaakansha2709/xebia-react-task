{"ast":null,"code":"import { BlankCallActionType } from \"../actiontype/blank-call.actiontype\";\nimport BlankCallService from '../services/blank-call.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledBlankCallTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\nvar message = \"\";\nexport var fetchBlankCallData = function fetchBlankCallData(blankCallObj) {\n  return function (dispatch, getState) {\n    var state = getState();\n\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.BLANK_CALL_TAGGING]) {\n      message = SnackbarMessages.DUPLICATE_BLANK_CALL;\n      dispatch(openSnackbarRequest(null, message));\n      return;\n    }\n\n    dispatch(blankCallApiLoading());\n    dispatch(showLoader());\n    BlankCallService.fetchBlankCallApi().then(function (response) {\n      dispatch(hideLoader());\n\n      if (response && response.data) {\n        dispatch(blankCallApiSuccess(response));\n\n        if (response.data.result && response.data.result.tagId) {\n          message = SnackbarMessages.BLANK_CALL_SUCCESS_MSG + \" \" + response['data']['result']['tagId'];\n        } else {\n          message = SnackbarMessages.BLANK_CALL_SUCCESS_MSG;\n        }\n\n        dispatch(openSnackbarRequest(null, message));\n        dispatch(disabledBlankCallTagging(true));\n      }\n    }, function (error) {\n      dispatch(hideLoader());\n      dispatch(blankCallApiFailure(error));\n\n      if (error) {\n        dispatch(openSnackbarRequest(error));\n      } else {\n        message = SnackbarMessages.DEFAULT_ERROR_MSG;\n        dispatch(openSnackbarRequest(null, message));\n      }\n    });\n  };\n};\n\nfunction blankCallApiLoading() {\n  return {\n    type: BlankCallActionType.BLANK_CALL_REQUEST\n  };\n}\n\nfunction blankCallApiSuccess(response) {\n  return {\n    type: BlankCallActionType.BLANK_CALL_SUCCESS,\n    payload: response.data\n  };\n}\n\nfunction blankCallApiFailure(error) {\n  return {\n    type: BlankCallActionType.BLANK_CALL_FAILURE,\n    payload: error\n  };\n}","map":{"version":3,"sources":["/Users/A1HP71DP/Documents/personal/mmt-task/task/src/actions/blank-call.action.js"],"names":["BlankCallActionType","BlankCallService","openSnackbarRequest","showLoader","hideLoader","SnackbarMessages","disabledBlankCallTagging","DisabledTaggingStatus","message","fetchBlankCallData","blankCallObj","dispatch","getState","state","disabledTaggingInfo","BLANK_CALL_TAGGING","DUPLICATE_BLANK_CALL","blankCallApiLoading","fetchBlankCallApi","then","response","data","blankCallApiSuccess","result","tagId","BLANK_CALL_SUCCESS_MSG","error","blankCallApiFailure","DEFAULT_ERROR_MSG","type","BLANK_CALL_REQUEST","BLANK_CALL_SUCCESS","payload","BLANK_CALL_FAILURE"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,qCAApC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,uBAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,wBAAT,QAAyC,2BAAzC;AACA,OAAOC,qBAAP,MAAkC,oCAAlC;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,YAAY;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACtE,QAAMC,KAAK,GAAGD,QAAQ,EAAtB;;AACA,QAAIC,KAAK,CAACC,mBAAN,IAA6BD,KAAK,CAACC,mBAAN,CAA0BP,qBAAqB,CAACQ,kBAAhD,CAAjC,EAAsG;AAClGP,MAAAA,OAAO,GAAGH,gBAAgB,CAACW,oBAA3B;AACAL,MAAAA,QAAQ,CAACT,mBAAmB,CAAC,IAAD,EAAOM,OAAP,CAApB,CAAR;AACA;AACH;;AACDG,IAAAA,QAAQ,CAACM,mBAAmB,EAApB,CAAR;AACAN,IAAAA,QAAQ,CAACR,UAAU,EAAX,CAAR;AACAF,IAAAA,gBAAgB,CAACiB,iBAAjB,GAAqCC,IAArC,CACI,UAAAC,QAAQ,EAAI;AACRT,MAAAA,QAAQ,CAACP,UAAU,EAAX,CAAR;;AACA,UAAIgB,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC3BV,QAAAA,QAAQ,CAACW,mBAAmB,CAACF,QAAD,CAApB,CAAR;;AACA,YAAIA,QAAQ,CAACC,IAAT,CAAcE,MAAd,IAAwBH,QAAQ,CAACC,IAAT,CAAcE,MAAd,CAAqBC,KAAjD,EAAwD;AACpDhB,UAAAA,OAAO,GAAGH,gBAAgB,CAACoB,sBAAjB,GAA0C,GAA1C,GAAgDL,QAAQ,CAAC,MAAD,CAAR,CAAiB,QAAjB,EAA2B,OAA3B,CAA1D;AACH,SAFD,MAEO;AACHZ,UAAAA,OAAO,GAAGH,gBAAgB,CAACoB,sBAA3B;AACH;;AACDd,QAAAA,QAAQ,CAACT,mBAAmB,CAAC,IAAD,EAAOM,OAAP,CAApB,CAAR;AACAG,QAAAA,QAAQ,CAACL,wBAAwB,CAAC,IAAD,CAAzB,CAAR;AACH;AACJ,KAbL,EAcI,UAAAoB,KAAK,EAAI;AACLf,MAAAA,QAAQ,CAACP,UAAU,EAAX,CAAR;AACAO,MAAAA,QAAQ,CAACgB,mBAAmB,CAACD,KAAD,CAApB,CAAR;;AACA,UAAIA,KAAJ,EAAW;AACPf,QAAAA,QAAQ,CAACT,mBAAmB,CAACwB,KAAD,CAApB,CAAR;AACH,OAFD,MAGK;AACDlB,QAAAA,OAAO,GAAGH,gBAAgB,CAACuB,iBAA3B;AACAjB,QAAAA,QAAQ,CAACT,mBAAmB,CAAC,IAAD,EAAOM,OAAP,CAApB,CAAR;AACH;AAEJ,KAzBL;AA2BH,GApC6C;AAAA,CAAvC;;AAsCP,SAASS,mBAAT,GAA+B;AAC3B,SAAO;AACHY,IAAAA,IAAI,EAAE7B,mBAAmB,CAAC8B;AADvB,GAAP;AAGH;;AACD,SAASR,mBAAT,CAA6BF,QAA7B,EAAuC;AACnC,SAAO;AACHS,IAAAA,IAAI,EAAE7B,mBAAmB,CAAC+B,kBADvB;AAEHC,IAAAA,OAAO,EAAEZ,QAAQ,CAACC;AAFf,GAAP;AAIH;;AACD,SAASM,mBAAT,CAA6BD,KAA7B,EAAoC;AAChC,SAAO;AACHG,IAAAA,IAAI,EAAE7B,mBAAmB,CAACiC,kBADvB;AAEHD,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH","sourcesContent":["import { BlankCallActionType } from \"../actiontype/blank-call.actiontype\";\nimport BlankCallService from '../services/blank-call.service';\nimport { openSnackbarRequest } from './snackbar.action';\nimport { showLoader, hideLoader } from '../actions/app.action';\nimport { SnackbarMessages } from '../constants/snackbar-messages';\nimport { disabledBlankCallTagging } from './disabled-tagging.action';\nimport DisabledTaggingStatus from \"../constants/disabled-tagging.enum\";\n\nlet message = \"\";\n\nexport const fetchBlankCallData = blankCallObj => (dispatch, getState) => {\n    const state = getState();\n    if (state.disabledTaggingInfo && state.disabledTaggingInfo[DisabledTaggingStatus.BLANK_CALL_TAGGING]) {\n        message = SnackbarMessages.DUPLICATE_BLANK_CALL;\n        dispatch(openSnackbarRequest(null, message));\n        return;\n    }\n    dispatch(blankCallApiLoading());\n    dispatch(showLoader());\n    BlankCallService.fetchBlankCallApi().then(\n        response => {\n            dispatch(hideLoader());\n            if (response && response.data) {\n                dispatch(blankCallApiSuccess(response));\n                if (response.data.result && response.data.result.tagId) {\n                    message = SnackbarMessages.BLANK_CALL_SUCCESS_MSG + \" \" + response['data']['result']['tagId'];\n                } else {\n                    message = SnackbarMessages.BLANK_CALL_SUCCESS_MSG\n                }\n                dispatch(openSnackbarRequest(null, message));\n                dispatch(disabledBlankCallTagging(true));\n            }\n        },\n        error => {\n            dispatch(hideLoader());\n            dispatch(blankCallApiFailure(error));\n            if (error) {\n                dispatch(openSnackbarRequest(error));\n            }\n            else {\n                message = SnackbarMessages.DEFAULT_ERROR_MSG;\n                dispatch(openSnackbarRequest(null, message));\n            }\n\n        }\n    );\n}\n\nfunction blankCallApiLoading() {\n    return {\n        type: BlankCallActionType.BLANK_CALL_REQUEST\n    }\n}\nfunction blankCallApiSuccess(response) {\n    return {\n        type: BlankCallActionType.BLANK_CALL_SUCCESS,\n        payload: response.data\n    }\n}\nfunction blankCallApiFailure(error) {\n    return {\n        type: BlankCallActionType.BLANK_CALL_FAILURE,\n        payload: error\n    }\n}"]},"metadata":{},"sourceType":"module"}